{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Read Latest Documentation - Browse GitHub Code Repository QuickPYTHON A retro-futuristic educational interactive coding environment. Powered by Python and nostalgia. Key features Mouse support Futuristic blue color scheme Auto-formatting Integrated Debugging Support Quick shortcuts for creating new dataclasses, static methods, etc Built-in help Games! Quick Start Instructions pip install quickpython then start with qpython or quickpython Disclaimer : This project is provided as-is, for fun, with no guarantee of long-term support or maintenance.","title":"Home"},{"location":"#quick-start-instructions","text":"pip install quickpython then start with qpython or quickpython Disclaimer : This project is provided as-is, for fun, with no guarantee of long-term support or maintenance.","title":"Quick Start Instructions"},{"location":"CHANGELOG/","text":"Install the latest To install the latest version of quickpython simply run: pip3 install quickpython OR poetry add quickpython OR pipenv install quickpython Changelog 1.0.0 - TBD Initial API stable release.","title":"Changelog"},{"location":"CHANGELOG/#install-the-latest","text":"To install the latest version of quickpython simply run: pip3 install quickpython OR poetry add quickpython OR pipenv install quickpython","title":"Install the latest"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#100-tbd","text":"Initial API stable release.","title":"1.0.0 - TBD"},{"location":"docs/contributing/1.-contributing-guide/","text":"Contributing to quickpython Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place. Getting quickpython set up for local development The first step when contributing to any project is getting it set up on your local machine. quickpython aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/quickpython.git `cd quickpython poetry install Making a contribution Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main quickpython project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :). Thank you! I can not tell you how thankful I am for the hard work done by quickpython contributors like you . Thank you! ~Timothy Crosley","title":"1. Contributing Guide"},{"location":"docs/contributing/1.-contributing-guide/#contributing-to-quickpython","text":"Looking for a useful open source project to contribute to? Want your contributions to be warmly welcomed and acknowledged? Welcome! You have found the right place.","title":"Contributing to quickpython"},{"location":"docs/contributing/1.-contributing-guide/#getting-quickpython-set-up-for-local-development","text":"The first step when contributing to any project is getting it set up on your local machine. quickpython aims to make this as simple as possible. Account Requirements: A valid GitHub account Base System Requirements: Python3.6+ poetry bash or a bash compatible shell (should be auto-installed on Linux / Mac) Once you have verified that you system matches the base requirements you can start to get the project working by following these steps: Fork the project on GitHub . Clone your fork to your local file system: git clone https://github.com/$GITHUB_ACCOUNT/quickpython.git `cd quickpython poetry install","title":"Getting quickpython set up for local development"},{"location":"docs/contributing/1.-contributing-guide/#making-a-contribution","text":"Congrats! You're now ready to make a contribution! Use the following as a guide to help you reach a successful pull-request: Check the issues page on GitHub to see if the task you want to complete is listed there. If it's listed there, write a comment letting others know you are working on it. If it's not listed in GitHub issues, go ahead and log a new issue. Then add a comment letting everyone know you have it under control. If you're not sure if it's something that is good for the main quickpython project and want immediate feedback, you can discuss it here . Create an issue branch for your local work git checkout -b issue/$ISSUE-NUMBER . Do your magic here. Ensure your code matches the HOPE-8 Coding Standard used by the project. Submit a pull request to the main project repository via GitHub. Thanks for the contribution! It will quickly get reviewed, and, once accepted, will result in your name being added to the acknowledgments list :).","title":"Making a contribution"},{"location":"docs/contributing/1.-contributing-guide/#thank-you","text":"I can not tell you how thankful I am for the hard work done by quickpython contributors like you . Thank you! ~Timothy Crosley","title":"Thank you!"},{"location":"docs/contributing/2.-coding-standard/","text":"HOPE 8 -- Style Guide for Hug Code HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019 Introduction This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference. PEP 8 Foundation All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines. Line Length Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters. Descriptive Variable names Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand. Adding new modules New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible. Automated Code Cleaners All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place. Automated Code Linting All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"2. Coding Standard"},{"location":"docs/contributing/2.-coding-standard/#hope-8-style-guide-for-hug-code","text":"HOPE: 8 Title: Style Guide for Hug Code Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 19-May-2019 Updated: 17-August-2019","title":"HOPE 8 -- Style Guide for Hug Code"},{"location":"docs/contributing/2.-coding-standard/#introduction","text":"This document gives coding conventions for the Hug code comprising the Hug core as well as all official interfaces, extensions, and plugins for the framework. Optionally, projects that use Hug are encouraged to follow this HOPE and link to it as a reference.","title":"Introduction"},{"location":"docs/contributing/2.-coding-standard/#pep-8-foundation","text":"All guidelines in this document are in addition to those defined in Python's PEP 8 and PEP 257 guidelines.","title":"PEP 8 Foundation"},{"location":"docs/contributing/2.-coding-standard/#line-length","text":"Too short of lines discourage descriptive variable names where they otherwise make sense. Too long of lines reduce overall readability and make it hard to compare 2 files side by side. There is no perfect number: but for Hug, we've decided to cap the lines at 100 characters.","title":"Line Length"},{"location":"docs/contributing/2.-coding-standard/#descriptive-variable-names","text":"Naming things is hard. Hug has a few strict guidelines on the usage of variable names, which hopefully will reduce some of the guesswork: - No one character variable names. - Except for x, y, and z as coordinates. - It's not okay to override built-in functions. - Except for id . Guido himself thought that shouldn't have been moved to the system module. It's too commonly used, and alternatives feel very artificial. - Avoid Acronyms, Abbreviations, or any other short forms - unless they are almost universally understand.","title":"Descriptive Variable names"},{"location":"docs/contributing/2.-coding-standard/#adding-new-modules","text":"New modules added to the a project that follows the HOPE-8 standard should all live directly within the base PROJECT_NAME/ directory without nesting. If the modules are meant only for internal use within the project, they should be prefixed with a leading underscore. For example, def _internal_function. Modules should contain a docstring at the top that gives a general explanation of the purpose and then restates the project's use of the MIT license. There should be a tests/test_$MODULE_NAME.py file created to correspond to every new module that contains test coverage for the module. Ideally, tests should be 1:1 (one test object per code object, one test method per code method) to the extent cleanly possible.","title":"Adding new modules"},{"location":"docs/contributing/2.-coding-standard/#automated-code-cleaners","text":"All code submitted to Hug should be formatted using Black and isort. Black should be run with the line length set to 100, and isort with Black compatible settings in place.","title":"Automated Code Cleaners"},{"location":"docs/contributing/2.-coding-standard/#automated-code-linting","text":"All code submitted to hug should run through the following tools: Black and isort verification. Flake8 flake8-bugbear Bandit pep8-naming vulture safety","title":"Automated Code Linting"},{"location":"docs/contributing/3.-code-of-conduct/","text":"HOPE 11 -- Code of Conduct HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019 Abstract Defines the Code of Conduct for Hug and all related projects. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"3. Code Of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#hope-11-code-of-conduct","text":"HOPE: 11 Title: Code of Conduct Author(s): Timothy Crosley timothy.crosley@gmail.com Status: Active Type: Process Created: 17-August-2019 Updated: 17-August-2019","title":"HOPE 11 -- Code of Conduct"},{"location":"docs/contributing/3.-code-of-conduct/#abstract","text":"Defines the Code of Conduct for Hug and all related projects.","title":"Abstract"},{"location":"docs/contributing/3.-code-of-conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"docs/contributing/3.-code-of-conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"docs/contributing/3.-code-of-conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"docs/contributing/3.-code-of-conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"docs/contributing/3.-code-of-conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting timothy.crosley@gmail.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Confidentiality will be maintained with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"docs/contributing/3.-code-of-conduct/#attribution","text":"This Code of Conduct is adapted from the [Contributor Covenant][https://www.contributor-covenant.org], version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"docs/contributing/4.-acknowledgements/","text":"Contributors Core Developers Timothy Crosley (@timothycrosley) Notable Bug Reporters - Code Contributors - Documenters - A sincere thanks to everyone who helps make quickpython into a great Python3 project! ~Timothy Crosley","title":"4. Acknowledgements"},{"location":"docs/contributing/4.-acknowledgements/#contributors","text":"","title":"Contributors"},{"location":"docs/contributing/4.-acknowledgements/#core-developers","text":"Timothy Crosley (@timothycrosley)","title":"Core Developers"},{"location":"docs/contributing/4.-acknowledgements/#notable-bug-reporters","text":"-","title":"Notable Bug Reporters"},{"location":"docs/contributing/4.-acknowledgements/#code-contributors","text":"-","title":"Code Contributors"},{"location":"docs/contributing/4.-acknowledgements/#documenters","text":"- A sincere thanks to everyone who helps make quickpython into a great Python3 project! ~Timothy Crosley","title":"Documenters"},{"location":"docs/usage/functions/","text":"Built-in Functions The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order. +---------------------------------------------------------------------------------------------------+ | Built-in Functions | +=========================+=======================+=======================+=========================+ | | A | | E | | L | | R | | | abs | | enumerate {.interpreted-text role=\"func\"} | | len | | range() _ | | | all | | eval | | list() _ | | repr | | | any {.interpreted-text role=\"func\"} | | exec | | locals | | reversed | | | ascii | | | | | | round | | | | | F | | M | | | | | B | | filter | | map | | S | | | bin | | float {.interpreted-text role=\"func\"} | | max | | set() _ | | | bool | | format | | memoryview() _ | | setattr | | | breakpoint | | frozenset() _ | | min | | slice {.interpreted-text role=\"func\"} | | | bytearray() _ | | | | | | sorted | | | bytes() _ | | G | | N | | staticmethod | | | | | getattr | | next | | str() _ | | | C | | globals | | | | sum | | | callable | | | | O | | super | | | chr {.interpreted-text role=\"func\"} | | H | | object | | | | | classmethod | | hasattr | | oct {.interpreted-text role=\"func\"} | | T | | | compile {.interpreted-text role=\"func\"} | | hash | | open | | tuple() _ | | | complex | | help {.interpreted-text role=\"func\"} | | ord | | type | | | | | hex | | | | | | | D | | | | P | | V | | | delattr | | I | | pow | | vars | | | dict() _ | | id | | print {.interpreted-text role=\"func\"} | | | | | dir | | input | | property | | Z | | | divmod | | int {.interpreted-text role=\"func\"} | | | | zip | | | | | isinstance | | | | | | | | | issubclass | | | | _ | | | | | iter | | | | __import__ | +-------------------------+-----------------------+-----------------------+-------------------------+ ::: {.function} abs(x) Return the absolute value of a number. The argument may be an integer, a floating point number, or an object implementing __abs__ . If the argument is a complex number, its magnitude is returned. ::: ::: {.function} all(iterable) Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to: def all(iterable): for element in iterable: if not element: return False return True ::: ::: {.function} any(iterable) Return True if any element of the iterable is true. If the iterable is empty, return False . Equivalent to: def any(iterable): for element in iterable: if element: return True return False ::: ::: {.function} ascii(object) As repr , return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr {.interpreted-text role=\"func\"} using \\x , \\u or \\U escapes. This generates a string similar to that returned by repr in Python 2. ::: ::: {.function} bin(x) Convert an integer number to a binary string prefixed with \\\"0b\\\". The result is a valid Python expression. If x is not a Python int object, it has to define an __index__ method that returns an integer. Some examples: >>> bin(3) \\'0b11\\' >>> bin(-10) \\'-0b1010\\' If prefix \\\"0b\\\" is desired or not, you can use either of the following ways. >>> format(14, \\'#b\\'), format(14, \\'b\\') (\\'0b1110\\', \\'1110\\') >>> f\\'{14:#b}\\', f\\'{14:b}\\' (\\'0b1110\\', \\'1110\\') See also format for more information. ::: ::: {.bool([x])} Return a Boolean value, i.e. one of True or False . x is converted using the standard truth testing procedure <truth> {.interpreted-text role=\"ref\"}. If x is false or omitted, this returns False ; otherwise it returns True . The bool class is a subclass of int (see typesnumeric ). It cannot be subclassed further. Its only instances are False and True (see bltin-boolean-values ). ::: {.index} pair: Boolean; type ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: ::: {.function} breakpoint( args, *kws) This function drops you into the debugger at the call site. Specifically, it calls sys.breakpointhook {.interpreted-text role=\"func\"}, passing args and kws straight through. By default, sys.breakpointhook() calls pdb.set_trace() {.interpreted-text role=\"func\"} expecting no arguments. In this case, it is purely a convenience function so you don\\'t have to explicitly import pdb or type as much code to enter the debugger. However, sys.breakpointhook can be set to some other function and breakpoint {.interpreted-text role=\"func\"} will automatically call that, allowing you to drop into the debugger of choice. ::: {.audit-event} builtins.breakpoint breakpointhook breakpoint ::: ::: {.versionadded} 3.7 ::: Return a new array of bytes. The bytearray {.interpreted-text role=\"class\"} class is a mutable sequence of integers in the range 0 \\<= x \\< 256. It has most of the usual methods of mutable sequences, described in typesseq-mutable , as well as most methods that the bytes type has, see bytes-methods . The optional source parameter can be used to initialize the array in a few different ways: If it is a string , you must also give the encoding (and optionally, errors ) parameters; bytearray {.interpreted-text role=\"func\"} then converts the string to bytes using str.encode . If it is an integer , the array will have that size and will be initialized with null bytes. If it is an object conforming to the buffer interface <bufferobjects> , a read-only buffer of the object will be used to initialize the bytes array. If it is an iterable , it must be an iterable of integers in the range 0 <= x < 256 , which are used as the initial contents of the array. Without an argument, an array of size 0 is created. See also binaryseq and typebytearray . Return a new \\\"bytes\\\" object, which is an immutable sequence of integers in the range 0 <= x < 256 . bytes {.interpreted-text role=\"class\"} is an immutable version of bytearray {.interpreted-text role=\"class\"} -- it has the same non-mutating methods and the same indexing and slicing behavior. Accordingly, constructor arguments are interpreted as for bytearray . Bytes objects can also be created with literals, see strings . See also binaryseq , typebytes , and bytes-methods . ::: ::: {.function} callable(object) Return True if the object argument appears callable, False if not. If this returns True , it is still possible that a call fails, but if it is False , calling object will never succeed. Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a __call__ method. ::: {.versionadded} 3.2 This function was first removed in Python 3.0 and then brought back in Python 3.2. ::: ::: ::: {.function} chr(i) Return the string representing a character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , while chr(8364) returns the string '\u20ac' . This is the inverse of ord . The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). ValueError will be raised if i is outside that range. ::: ::: {.decorator} classmethod Transform a method into a class method. A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom: class C: @classmethod def f(cls, arg1, arg2, ...): ... The @classmethod form is a function decorator {.interpreted-text role=\"term\"} -- see function for details. A class method can be called either on the class (such as C.f() ) or on an instance (such as C().f() ). The instance is ignored except for its class. If a class method is called for a derived class, the derived class object is passed as the implied first argument. Class methods are different than C++ or Java static methods. If you want those, see staticmethod in this section. For more information on class methods, see types . ::: {.versionchanged} 3.9 Class methods can now wrap other descriptors <descriptor> such as property . ::: ::: ::: {.function} compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1) Compile the source into a code or AST object. Code objects can be executed by exec or eval . source can either be a normal string, a byte string, or an AST object. Refer to the ast module documentation for information on how to work with AST objects. The filename argument should give the file from which the code was read; pass some recognizable value if it wasn\\'t read from a file ( '<string>' is commonly used). The mode argument specifies what kind of code must be compiled; it can be 'exec' if source consists of a sequence of statements, 'eval' if it consists of a single expression, or 'single' if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than None will be printed). The optional arguments flags and dont_inherit control which compiler options <ast-compiler-flags> should be activated and which future features <future> should be allowed. If neither is present (or both are zero) the code is compiled with the same flags that affect the code that is calling compile . If the flags argument is given and dont_inherit is not (or is zero) then the compiler options and the future statements specified by the flags argument are used in addition to those that would be used anyway. If dont_inherit is a non-zero integer then the flags argument is it -- the flags (future features and compiler options) in the surrounding code are ignored. Compiler options and future statements are specified by bits which can be bitwise ORed together to specify multiple options. The bitfield required to specify a given future feature can be found as the ~__future__._Feature.compiler_flag attribute on the ~__future__._Feature instance in the __future__ module. Compiler flags <ast-compiler-flags> can be found in ast module, with PyCF_ prefix. The argument optimize specifies the optimization level of the compiler; the default value of -1 selects the optimization level of the interpreter as given by -O options. Explicit levels are 0 (no optimization; __debug__ is true), 1 (asserts are removed, __debug__ is false) or 2 (docstrings are removed too). This function raises SyntaxError if the compiled source is invalid, and ValueError {.interpreted-text role=\"exc\"} if the source contains null bytes. If you want to parse Python code into its AST representation, see ast.parse . ::: {.audit-event} compile source,filename compile Raises an auditing event <auditing> compile with arguments source and filename . This event may also be raised by implicit compilation. ::: ::: {.note} ::: {.admonition-title} Note ::: When compiling a string with multi-line code in 'single' or 'eval' mode, input must be terminated by at least one newline character. This is to facilitate detection of incomplete and complete statements in the code module. ::: ::: {.warning} ::: {.admonition-title} Warning ::: It is possible to crash the Python interpreter with a sufficiently large/complex string when compiling to an AST object due to stack depth limitations in Python\\'s AST compiler. ::: ::: {.versionchanged} 3.2 Allowed use of Windows and Mac newlines. Also input in 'exec' mode does not have to end in a newline anymore. Added the optimize parameter. ::: ::: {.versionchanged} 3.5 Previously, TypeError was raised when null bytes were encountered in source . ::: ::: {.versionadded} 3.8 ast.PyCF_ALLOW_TOP_LEVEL_AWAIT can now be passed in flags to enable support for top-level await , async for , and async with . ::: ::: ::: {.complex([real[, .imag]])} Return a complex number with the value real + imag *1j or convert a string or number to a complex number. If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter. The second parameter can never be a string. Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float . If both arguments are omitted, returns 0j . For a general Python object x , complex(x) delegates to x.__complex__() . If __complex__() is not defined then it falls back to __float__ . If __float__() is not defined then it falls back to __index__ {.interpreted-text role=\"meth\"}. ::: {.note} ::: {.admonition-title} Note ::: When converting from a string, the string must not contain whitespace around the central + or - operator. For example, complex('1+2j') is fine, but complex('1 + 2j') raises ValueError {.interpreted-text role=\"exc\"}. ::: The complex type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __complex__ and __float__ are not defined. ::: ::: ::: {.function} delattr(object, name) This is a relative of setattr . The arguments are an object and a string. The string must be the name of one of the object\\'s attributes. The function deletes the named attribute, provided the object allows it. For example, delattr(x, 'foobar') is equivalent to del x.foobar . Create a new dictionary. The dict object is the dictionary class. See dict {.interpreted-text role=\"class\"} and typesmapping for documentation about this class. For other containers see the built-in list {.interpreted-text role=\"class\"}, set , and tuple classes, as well as the collections module. ::: ::: {.function} dir([object]) Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object. If the object has a method named __dir__ {.interpreted-text role=\"meth\"}, this method will be called and must return the list of attributes. This allows objects that implement a custom __getattr__ or __getattribute__ function to customize the way dir reports their attributes. If the object does not provide __dir__ , the function tries its best to gather information from the object\\'s ~object.__dict__ attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom __getattr__ . The default dir mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information: If the object is a module object, the list contains the names of the module\\'s attributes. If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases. Otherwise, the list contains the object\\'s attributes\\' names, the names of its class\\'s attributes, and recursively of the attributes of its class\\'s base classes. The resulting list is sorted alphabetically. For example: >>> import struct >>> dir() # show the names in the module namespace # doctest: +SKIP [\\'__builtins__\\', \\'__name__\\', \\'struct\\'] >>> dir(struct) # show the names in the struct module # doctest: +SKIP [\\'Struct\\', \\'__all__\\', \\'__builtins__\\', \\'__cached__\\', \\'__doc__\\', \\'__file__\\', \\'__initializing__\\', \\'__loader__\\', \\'__name__\\', \\'__package__\\', \\'_clearcache\\', \\'calcsize\\', \\'error\\', \\'pack\\', \\'pack_into\\', \\'unpack\\', \\'unpack_from\\'] >>> class Shape: ... def __dir__(self): ... return [\\'area\\', \\'perimeter\\', \\'location\\'] >>> s = Shape() >>> dir(s) [\\'area\\', \\'location\\', \\'perimeter\\'] ::: {.note} ::: {.admonition-title} Note ::: Because dir is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class. ::: ::: ::: {.function} divmod(a, b) Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as (a // b, a % b) . For floating point numbers the result is (q, a % b) , where q is usually math.floor(a / b) but may be 1 less than that. In any case q * b + a % b is very close to a , if a % b is non-zero it has the same sign as b , and 0 <= abs(a % b) < abs(b) . ::: ::: {.function} enumerate(iterable, start=0) Return an enumerate object. iterable must be a sequence, an iterator , or some other object which supports iteration. The ~iterator.__next__ {.interpreted-text role=\"meth\"} method of the iterator returned by enumerate returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable . >>> seasons = [\\'Spring\\', \\'Summer\\', \\'Fall\\', \\'Winter\\'] >>> list(enumerate(seasons)) [(0, \\'Spring\\'), (1, \\'Summer\\'), (2, \\'Fall\\'), (3, \\'Winter\\')] >>> list(enumerate(seasons, start=1)) [(1, \\'Spring\\'), (2, \\'Summer\\'), (3, \\'Fall\\'), (4, \\'Winter\\')] Equivalent to: def enumerate ( sequence , start = 0 ): n = start for elem in sequence : yield n , elem n += 1 ::: ::: {.function} eval(expression[, globals[, locals]]) The arguments are a string and optional globals and locals. If provided, globals must be a dictionary. If provided, locals can be any mapping object. The expression argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the globals and locals dictionaries as global and local namespace. If the globals dictionary is present and does not contain a value for the key __builtins__ , a reference to the dictionary of the built-in module builtins is inserted under that key before expression is parsed. This means that expression normally has full access to the standard builtins module and restricted environments are propagated. If the locals dictionary is omitted it defaults to the globals dictionary. If both dictionaries are omitted, the expression is executed with the globals and locals in the environment where eval {.interpreted-text role=\"func\"} is called. Note, eval() does not have access to the nested scopes <nested scope> (non-locals) in the enclosing environment. The return value is the result of the evaluated expression. Syntax errors are reported as exceptions. Example: >>> x = 1 >>> eval(\\'x+1\\') 2 This function can also be used to execute arbitrary code objects (such as those created by compile ). In this case pass a code object instead of a string. If the code object has been compiled with 'exec' as the mode argument, eval {.interpreted-text role=\"func\"}\\'s return value will be None . Hints: dynamic execution of statements is supported by the exec function. The globals and locals {.interpreted-text role=\"func\"} functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by eval or exec {.interpreted-text role=\"func\"}. If the given source is a string, then leading and trailing spaces and tabs are stripped. See ast.literal_eval for a function that can safely evaluate strings with expressions containing only literals. ::: {.audit-event} exec code_object eval Raises an auditing event <auditing> exec with the code object as the argument. Code compilation events may also be raised. ::: ::: ::: {.index} builtin: exec ::: ::: {.function} exec(object[, globals[, locals]]) This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). 1 If it is a code object, it is simply executed. In all cases, the code that\\'s executed is expected to be valid as file input (see the section \\\"File input\\\" in the Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec function. The return value is None . In all cases, if the optional parts are omitted, the code is executed in the current scope. If only globals is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If globals and locals are given, they are used for the global and local variables, respectively. If provided, locals can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as globals and locals , the code will be executed as if it were embedded in a class definition. If the globals dictionary does not contain a value for the key __builtins__ , a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own __builtins__ dictionary into globals before passing it to exec . ::: {.audit-event} exec code_object exec Raises an auditing event <auditing> exec with the code object as the argument. Code compilation events may also be raised. ::: ::: {.note} ::: {.admonition-title} Note ::: The built-in functions globals and locals return the current global and local dictionary, respectively, which may be useful to pass around for use as the second and third argument to exec {.interpreted-text role=\"func\"}. ::: ::: {.note} ::: {.admonition-title} Note ::: The default locals act as described for function locals below: modifications to the default locals dictionary should not be attempted. Pass an explicit locals dictionary if you need to see effects of the code on locals after function exec returns. ::: ::: ::: {.function} filter(function, iterable) Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None , the identity function is assumed, that is, all elements of iterable that are false are removed. Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None . See itertools.filterfalse for the complementary function that returns elements of iterable for which function returns false. ::: ::: {.float([x])} ::: {.index} single: NaN single: Infinity ::: Return a floating point number constructed from a number or string x . If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be '+' or '-' ; a '+' sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity. More precisely, the input must conform to the following grammar after leading and trailing whitespace characters are removed: ::: {.productionlist} float sign: \\\"+\\\" | \\\"-\\\" infinity: \\\"Infinity\\\" | \\\"inf\\\" nan: \\\"nan\\\" numeric_value: [floatnumber]{.title-ref} | [infinity]{.title-ref} | [nan]{.title-ref} numeric_string: [[sign]{.title-ref}] [numeric_value]{.title-ref} ::: Here floatnumber is the form of a Python floating-point literal, described in floating . Case is not significant, so, for example, \\\"inf\\\", \\\"Inf\\\", \\\"INFINITY\\\" and \\\"iNfINity\\\" are all acceptable spellings for positive infinity. Otherwise, if the argument is an integer or a floating point number, a floating point number with the same value (within Python\\'s floating point precision) is returned. If the argument is outside the range of a Python float, an OverflowError will be raised. For a general Python object x , float(x) delegates to x.__float__() . If __float__() is not defined then it falls back to __index__ . If no argument is given, 0.0 is returned. Examples: >>> float('+1.23') 1.23 >>> float(' -12345\\n') -12345.0 >>> float('1e-003') 0.001 >>> float('+1E6') 1000000.0 >>> float('-Infinity') -inf The float type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __float__ is not defined. ::: ::: ::: {.index} single: __format__ single: string; format() (built-in function) ::: ::: {.function} format(value[, format_spec]) Convert a value to a \\\"formatted\\\" representation, as controlled by format_spec . The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: formatspec . The default format_spec is an empty string which usually gives the same effect as calling str(value) <str> {.interpreted-text role=\"func\"}. A call to format(value, format_spec) is translated to type(value).__format__(value, format_spec) which bypasses the instance dictionary when searching for the value\\'s __format__ method. A TypeError exception is raised if the method search reaches object and the format_spec is non-empty, or if either the format_spec or the return value are not strings. ::: {.versionchanged} 3.4 object().__format__(format_spec) raises TypeError if format_spec is not an empty string. ::: Return a new frozenset object, optionally with elements taken from iterable . frozenset is a built-in class. See frozenset and types-set for documentation about this class. For other containers see the built-in set {.interpreted-text role=\"class\"}, list , tuple , and dict {.interpreted-text role=\"class\"} classes, as well as the collections {.interpreted-text role=\"mod\"} module. ::: ::: {.function} getattr(object, name[, default]) Return the value of the named attribute of object . name must be a string. If the string is the name of one of the object\\'s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar . If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised. ::: ::: {.function} globals() Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called). ::: ::: {.function} hasattr(object, name) The arguments are an object and a string. The result is True if the string is the name of one of the object\\'s attributes, False if not. (This is implemented by calling getattr(object, name) and seeing whether it raises an AttributeError or not.) ::: ::: {.function} hash(object) Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0). ::: {.note} ::: {.admonition-title} Note ::: For objects with custom __hash__ methods, note that hash truncates the return value based on the bit width of the host machine. See __hash__ for details. ::: ::: ::: {.function} help([object]) Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated. Note that if a slash(/) appears in the parameter list of a function, when invoking help , it means that the parameters prior to the slash are positional-only. For more info, see the FAQ entry on positional-only parameters <faq-positional-only-arguments> {.interpreted-text role=\"ref\"}. This function is added to the built-in namespace by the site module. ::: {.versionchanged} 3.4 Changes to pydoc and inspect mean that the reported signatures for callables are now more comprehensive and consistent. ::: ::: ::: {.function} hex(x) Convert an integer number to a lowercase hexadecimal string prefixed with \\\"0x\\\". If x is not a Python int {.interpreted-text role=\"class\"} object, it has to define an __index__ {.interpreted-text role=\"meth\"} method that returns an integer. Some examples: >>> hex(255) \\'0xff\\' >>> hex(-42) \\'-0x2a\\' If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways: >>> \\'%#x\\' % 255, \\'%x\\' % 255, \\'%X\\' % 255 (\\'0xff\\', \\'ff\\', \\'FF\\') >>> format(255, \\'#x\\'), format(255, \\'x\\'), format(255, \\'X\\') (\\'0xff\\', \\'ff\\', \\'FF\\') >>> f\\'{255:#x}\\', f\\'{255:x}\\', f\\'{255:X}\\' (\\'0xff\\', \\'ff\\', \\'FF\\') See also format for more information. See also int for converting a hexadecimal string to an integer using a base of 16. ::: {.note} ::: {.admonition-title} Note ::: To obtain a hexadecimal string representation for a float, use the float.hex method. ::: ::: ::: {.function} id(object) Return the \\\"identity\\\" of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id value. ::: {.impl-detail} This is the address of the object in memory. ::: ::: {.audit-event} builtins.id id id ::: ::: ::: {.function} input([prompt]) If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError is raised. Example: >>> s = input('--> ') # doctest: +SKIP --> Monty Python's Flying Circus >>> s # doctest: +SKIP \"Monty Python's Flying Circus\" If the readline module was loaded, then input will use it to provide elaborate line editing and history features. ::: {.audit-event} builtins.input prompt input Raises an auditing event <auditing> builtins.input with argument prompt before reading input ::: ::: {.audit-event} builtins.input/result result input Raises an auditing event builtins.input/result with the result after successfully reading input. ::: ::: ::: {.int([x]) .int(x, .base=10)} Return an integer object constructed from a number or string x , or return 0 if no arguments are given. If x defines __int__ , int(x) returns x.__int__() . If x defines __index__ {.interpreted-text role=\"meth\"}, it returns x.__index__() . If x defines __trunc__ , it returns x.__trunc__() . For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes , or bytearray instance representing an integer literal <integers> in radix base . Optionally, the literal can be preceded by + or - (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z ) having values 10 to 35. The default base is 10. The allowed values are 0 and 2--36. Base-2, -8, and -16 literals can be optionally prefixed with 0b / 0B , 0o / 0O , or 0x / 0X , as with integer literals in code. Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that int('010', 0) is not legal, while int('010') is, as well as int('010', 8) . The integer type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.4 If base is not an instance of int {.interpreted-text role=\"class\"} and the base object has a base.__index__ <object.__index__> method, that method is called to obtain an integer for the base. Previous versions used base.__int__ <object.__int__> {.interpreted-text role=\"meth\"} instead of base.__index__ <object.__index__> . ::: ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __int__ is not defined. ::: ::: ::: {.function} isinstance(object, classinfo) Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual <abstract base class> ) subclass thereof. If object is not an object of the given type, the function always returns False . If classinfo is a tuple of type objects (or recursively, other such tuples), return True if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised. ::: ::: {.function} issubclass(class, classinfo) Return True if class is a subclass (direct, indirect or virtual <abstract base class> ) of classinfo . A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked. In any other case, a TypeError exception is raised. ::: ::: {.function} iter(object[, sentinel]) Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the __iter__ method), or it must support the sequence protocol (the __getitem__ method with integer arguments starting at 0 ). If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel , is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its ~iterator.__next__ method; if the value returned is equal to sentinel , StopIteration {.interpreted-text role=\"exc\"} will be raised, otherwise the value will be returned. See also typeiter . One useful application of the second form of iter {.interpreted-text role=\"func\"} is to build a block-reader. For example, reading fixed-width blocks from a binary database file until the end of file is reached: from functools import partial with open ( 'mydata.db' , 'rb' ) as f : for block in iter ( partial ( f . read , 64 ), b '' ): process_block ( block ) ::: ::: {.function} len(s) Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set). ::: {.impl-detail} len raises OverflowError on lengths larger than sys.maxsize , such as range(2 ** 100) <range> . ::: Rather than being a function, list is actually a mutable sequence type, as documented in typesseq-list and typesseq . ::: ::: {.function} locals() Update and return a dictionary representing the current local symbol table. Free variables are returned by locals {.interpreted-text role=\"func\"} when it is called in function blocks, but not in class blocks. Note that at the module level, locals {.interpreted-text role=\"func\"} and globals are the same dictionary. ::: {.note} ::: {.admonition-title} Note ::: The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter. ::: ::: ::: {.function} map(function, iterable, ...) Return an iterator that applies function to every item of iterable , yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap . ::: ::: {.function} max(iterable, [, key, default]) max(arg1, arg2, args[, key]) Return the largest item in an iterable or the largest of two or more arguments. If one positional argument is provided, it should be an iterable . The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned. There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort . The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised. If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable, key=keyfunc) . ::: {.versionadded} 3.4 The default keyword-only argument. ::: ::: {.versionchanged} 3.8 The key can be None . ::: Return a \\\"memory view\\\" object created from the given argument. See typememoryview for more information. ::: ::: {.function} min(iterable, [, key, default]) min(arg1, arg2, args[, key]) Return the smallest item in an iterable or the smallest of two or more arguments. If one positional argument is provided, it should be an iterable . The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned. There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort . The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised. If multiple items are minimal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc)[0] and heapq.nsmallest(1, iterable, key=keyfunc) . ::: {.versionadded} 3.4 The default keyword-only argument. ::: ::: {.versionchanged} 3.8 The key can be None . ::: ::: ::: {.function} next(iterator[, default]) Retrieve the next item from the iterator by calling its ~iterator.__next__ method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised. ::: ::: {.object()} Return a new featureless object. object {.interpreted-text role=\"class\"} is a base for all classes. It has the methods that are common to all instances of Python classes. This function does not accept any arguments. ::: {.note} ::: {.admonition-title} Note ::: object does not have a ~object.__dict__ , so you can\\'t assign arbitrary attributes to an instance of the object {.interpreted-text role=\"class\"} class. ::: ::: ::: {.function} oct(x) Convert an integer number to an octal string prefixed with \\\"0o\\\". The result is a valid Python expression. If x is not a Python int object, it has to define an __index__ method that returns an integer. For example: >>> oct(8) \\'0o10\\' >>> oct(-56) \\'-0o70\\' If you want to convert an integer number to octal string either with prefix \\\"0o\\\" or not, you can use either of the following ways. >>> \\'%#o\\' % 10, \\'%o\\' % 10 (\\'0o12\\', \\'12\\') >>> format(10, \\'#o\\'), format(10, \\'o\\') (\\'0o12\\', \\'12\\') >>> f\\'{10:#o}\\', f\\'{10:o}\\' (\\'0o12\\', \\'12\\') See also format for more information. ::: {.index} single: file object; open() built-in function ::: ::: ::: {.function} open(file, mode=\\'r\\', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a corresponding file object {.interpreted-text role=\"term\"}. If the file cannot be opened, an OSError is raised. See tut-files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed, unless closefd is set to False .) mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists), 'x' for exclusive creation and 'a' for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: ::: {#filemodes} ::: {.index} pair: file; modes ::: ::: Character Meaning 'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists 'b' binary mode 't' text mode (default) '+' open for updating (reading and writing) The default mode is 'r' (open for reading text, synonym of 'rt' ). Modes 'w+' and 'w+b' open and truncate the file. Modes 'r+' and 'r+b' open the file with no truncation. As mentioned in the io-overview , Python distinguishes between binary and text I/O. Files opened in binary mode (including 'b' in the mode argument) return contents as bytes objects without any decoding. In text mode (the default, or when 't' is included in the mode argument), the contents of the file are returned as str , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. There is an additional mode character permitted, 'U' , which no longer has any effect, and is considered deprecated. It previously enabled universal newlines in text mode, which became the default behaviour in Python 3.0. Refer to the documentation of the newline <open-newline-parameter> parameter for further details. ::: {.note} ::: {.admonition-title} Note ::: Python doesn\\'t depend on the underlying operating system\\'s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. ::: buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. When no buffering argument is given, the default buffering policy works as follows: Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device\\'s \\\"block size\\\" and falling back on io.DEFAULT_BUFFER_SIZE . On many systems, the buffer will typically be 4096 or 8192 bytes long. \\\"Interactive\\\" text files (files for which ~io.IOBase.isatty returns True ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever locale.getpreferredencoding returns), but any text encoding supported by Python can be used. See the codecs module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled---this cannot be used in binary mode. A variety of standard error handlers are available (listed under error-handlers ), though any error handling name that has been registered with codecs.register_error is also valid. The standard names include: 'strict' to raise a ValueError exception if there is an encoding error. The default value of None has the same effect. 'ignore' ignores errors. Note that ignoring encoding errors can lead to data loss. 'replace' causes a replacement marker (such as '?' ) to be inserted where there is malformed data. 'surrogateescape' will represent any incorrect bytes as code points in the Unicode Private Use Area ranging from U+DC80 to U+DCFF. These private code points will then be turned back into the same bytes when the surrogateescape error handler is used when writing data. This is useful for processing files in an unknown encoding. 'xmlcharrefreplace' is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference &#nnn; . 'backslashreplace' replaces malformed data by Python\\'s backslashed escape sequences. 'namereplace' (also only supported when writing) replaces unsupported characters with \\N{...} escape sequences. ::: {.index} single: universal newlines; open() built-in function ::: ::: {#open-newline-parameter} newline controls how universal newlines {.interpreted-text role=\"term\"} mode works (it only applies to text mode). It can be None , '' , '\\n' , '\\r' , and '\\r\\n' . It works as follows: ::: When reading input from the stream, if newline is None , universal newlines mode is enabled. Lines in the input can end in '\\n' , '\\r' , or '\\r\\n' , and these are translated into '\\n' before being returned to the caller. If it is '' , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated. When writing output to the stream, if newline is None , any '\\n' characters written are translated to the system default line separator, os.linesep . If newline is '' or '\\n' , no translation takes place. If newline is any of the other legal values, any '\\n' characters written are translated to the given string. If closefd is False and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be True (the default) otherwise an error will be raised. A custom opener can be used by passing a callable as opener . The underlying file descriptor for the file object is then obtained by calling opener with ( file , flags ). opener must return an open file descriptor (passing os.open as opener results in functionality similar to passing None ). The newly created file is non-inheritable <fd_inheritance> . The following example uses the dir_fd <dir_fd> {.interpreted-text role=\"ref\"} parameter of the os.open function to open a file relative to a given directory: >>> import os >>> dir_fd = os . open ( 'somedir' , os . O_RDONLY ) >>> def opener ( path , flags ): ... return os . open ( path , flags , dir_fd = dir_fd ) ... >>> with open ( 'spamspam.txt' , 'w' , opener = opener ) as f : ... print ( 'This will be written to somedir/spamspam.txt' , file = f ) ... >>> os . close ( dir_fd ) # don't leak a file descriptor The type of file object returned by the open function depends on the mode. When open is used to open a file in a text mode ( 'w' , 'r' , 'wt' , 'rt' , etc.), it returns a subclass of io.TextIOBase (specifically io.TextIOWrapper ). When used to open a file in a binary mode with buffering, the returned class is a subclass of io.BufferedIOBase . The exact class varies: in read binary mode, it returns an io.BufferedReader ; in write binary and append binary modes, it returns an io.BufferedWriter {.interpreted-text role=\"class\"}, and in read/write mode, it returns an io.BufferedRandom . When buffering is disabled, the raw stream, a subclass of io.RawIOBase {.interpreted-text role=\"class\"}, io.FileIO , is returned. ::: {.index} single: line-buffered I/O single: unbuffered I/O single: buffer size, I/O single: I/O control; buffering single: binary mode single: text mode module: sys ::: See also the file handling modules, such as, fileinput , io {.interpreted-text role=\"mod\"} (where open is declared), os , os.path {.interpreted-text role=\"mod\"}, tempfile , and shutil . ::: {.audit-event} open file,mode,flags open ::: The mode and flags arguments may have been modified or inferred from the original call. ::: {.versionchanged} 3.3 The opener parameter was added. The 'x' mode was added. IOError used to be raised, it is now an alias of OSError . FileExistsError is now raised if the file opened in exclusive creation mode ( 'x' ) already exists. ::: ::: {.versionchanged} 3.4 The file is now non-inheritable. ::: ::: {.deprecated-removed} 3.4 3.10 The 'U' mode. ::: ::: {.versionchanged} 3.5 If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see 475 for the rationale). The 'namereplace' error handler was added. ::: ::: {.versionchanged} 3.6 Support added to accept objects implementing os.PathLike . On Windows, opening a console buffer may return a subclass of io.RawIOBase other than io.FileIO . ::: ::: ::: {.function} ord(c) Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('\u20ac') (Euro sign) returns 8364 . This is the inverse of chr . ::: ::: {.function} pow(base, exp[, mod]) Return base to the power exp ; if mod is present, return base to the power exp , modulo mod (computed more efficiently than pow(base, exp) % mod ). The two-argument form pow(base, exp) is equivalent to using the power operator: base**exp . The arguments must have numeric types. With mixed operand types, the coercion rules for binary arithmetic operators apply. For int operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered. For example, 10**2 returns 100 , but 10**-2 returns 0.01 . For int operands base and exp , if mod is present, mod must also be of integer type and mod must be nonzero. If mod is present and exp is negative, base must be relatively prime to mod . In that case, pow(inv_base, -exp, mod) is returned, where inv_base is an inverse to base modulo mod . Here\\'s an example of computing an inverse for 38 modulo 97 : >>> pow(38, -1, mod=97) 23 >>> 23 * 38 % 97 == 1 True ::: {.versionchanged} 3.8 For int operands, the three-argument form of pow now allows the second argument to be negative, permitting computation of modular inverses. ::: ::: {.versionchanged} 3.8 Allow keyword arguments. Formerly, only positional arguments were supported. ::: ::: ::: {.function} print(*objects, sep=\\' \\', end=\\'\\n\\', file=sys.stdout, flush=False) Print objects to the text stream file , separated by sep and followed by end . sep , end , file and flush , if present, must be given as keyword arguments. All non-keyword arguments are converted to strings like str does and written to the stream, separated by sep and followed by end . Both sep and end must be strings; they can also be None , which means to use the default values. If no objects are given, print will just write end . The file argument must be an object with a write(string) method; if it is not present or None , sys.stdout will be used. Since printed arguments are converted to text strings, print cannot be used with binary mode file objects. For these, use file.write(...) instead. Whether output is buffered is usually determined by file , but if the flush keyword argument is true, the stream is forcibly flushed. ::: {.versionchanged} 3.3 Added the flush keyword argument. ::: ::: ::: {.property(fget=None, .fset=None, .fdel=None, .doc=None)} Return a property attribute. fget is a function for getting an attribute value. fset is a function for setting an attribute value. fdel is a function for deleting an attribute value. And doc creates a docstring for the attribute. A typical use is to define a managed attribute x : class C: def __init__ ( self ): self . _x = None def getx ( self ): return self . _x def setx ( self , value ): self . _x = value def delx ( self ): del self . _x x = property ( getx , setx , delx , \"I'm the 'x' property.\" ) If c is an instance of C , c.x will invoke the getter, c.x = value will invoke the setter and del c.x the deleter. If given, doc will be the docstring of the property attribute. Otherwise, the property will copy fget \\'s docstring (if it exists). This makes it possible to create read-only properties easily using property as a decorator : class Parrot : def __init__ ( self ) : self . _voltage = 100000 @property def voltage ( self ) : \"\"\"Get the current voltage.\"\"\" return self . _voltage The @property decorator turns the voltage {.interpreted-text role=\"meth\"} method into a \\\"getter\\\" for a read-only attribute with the same name, and it sets the docstring for voltage to \\\"Get the current voltage.\\\" A property object has ~property.getter , ~property.setter , and ~property.deleter methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example: class C : def __init__ ( self ) : self . _x = None @property def x ( self ) : \"\"\"I'm the 'x' property.\"\"\" return self . _x @x . setter def x ( self , value ) : self . _x = value @x . deleter def x ( self ) : del self . _x This code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property ( x in this case.) The returned property object also has the attributes fget , fset , and fdel corresponding to the constructor arguments. ::: {.versionchanged} 3.5 The docstrings of property objects are now writeable. ::: Rather than being a function, range is actually an immutable sequence type, as documented in typesseq-range and typesseq . ::: ::: {.function} repr(object) Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval , otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__ {.interpreted-text role=\"meth\"} method. ::: ::: {.function} reversed(seq) Return a reverse iterator . seq must be an object which has a __reversed__ method or supports the sequence protocol (the __len__ method and the __getitem__ method with integer arguments starting at 0 ). ::: ::: {.function} round(number[, ndigits]) Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None , it returns the nearest integer to its input. For the built-in types supporting round {.interpreted-text role=\"func\"}, values are rounded to the closest multiple of 10 to the power minus ndigits ; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0 , and round(1.5) is 2 ). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None . Otherwise the return value has the same type as number . For a general Python object number , round delegates to number.__round__ . ::: {.note} ::: {.admonition-title} Note ::: The behavior of round for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68 . This is not a bug: it\\'s a result of the fact that most decimal fractions can\\'t be represented exactly as a float. See tut-fp-issues for more information. ::: Return a new set object, optionally with elements taken from iterable . set is a built-in class. See set and types-set {.interpreted-text role=\"ref\"} for documentation about this class. For other containers see the built-in frozenset {.interpreted-text role=\"class\"}, list , tuple , and dict {.interpreted-text role=\"class\"} classes, as well as the collections {.interpreted-text role=\"mod\"} module. ::: ::: {.function} setattr(object, name, value) This is the counterpart of getattr . The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123 . ::: ::: {.slice(stop) .slice(start, .stop[, .step])} Return a slice object representing the set of indices specified by range(start, stop, step) . The start and step arguments default to None . Slice objects have read-only data attributes ~slice.start , ~slice.stop and ~slice.step which merely return the argument values (or their default). They have no other explicit functionality; however they are used by NumPy and other third party packages. Slice objects are also generated when extended indexing syntax is used. For example: a[start:stop:step] or a[start:stop, i] . See itertools.islice for an alternate version that returns an iterator. ::: ::: {.function} sorted(iterable, *, key=None, reverse=False) Return a new sorted list from the items in iterable . Has two optional arguments which must be specified as keyword arguments. key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower ). The default value is None (compare the elements directly). reverse is a boolean value. If set to True , then the list elements are sorted as if each comparison were reversed. Use functools.cmp_to_key to convert an old-style cmp function to a key function. The built-in sorted function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal --- this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). For sorting examples and a brief sorting tutorial, see sortinghowto . ::: ::: {.decorator} staticmethod Transform a method into a static method. A static method does not receive an implicit first argument. To declare a static method, use this idiom: class C: @staticmethod def f(arg1, arg2, ...): ... The @staticmethod form is a function decorator {.interpreted-text role=\"term\"} -- see function for details. A static method can be called either on the class (such as C.f() ) or on an instance (such as C().f() ). Static methods in Python are similar to those found in Java or C++. Also see classmethod for a variant that is useful for creating alternate class constructors. Like all decorators, it is also possible to call staticmethod as a regular function and do something with its result. This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method. For these cases, use this idiom: class C: builtin_open = staticmethod(open) For more information on static methods, see types {.interpreted-text role=\"ref\"}. ::: ::: {.index} single: string; str() (built-in function) Return a str version of object . See str for details. str is the built-in string class . For general information about strings, see textseq {.interpreted-text role=\"ref\"}. ::: ::: {.function} sum(iterable, /, start=0) Sums start and the items of an iterable from left to right and returns the total. The iterable \\'s items are normally numbers, and the start value is not allowed to be a string. For some use cases, there are good alternatives to sum . The preferred, fast way to concatenate a sequence of strings is by calling ''.join(sequence) . To add floating point values with extended precision, see math.fsum . To concatenate a series of iterables, consider using itertools.chain {.interpreted-text role=\"func\"}. ::: {.versionchanged} 3.8 The start parameter can be specified as a keyword argument. ::: ::: ::: {.function} super([type[, object-or-type]]) Return a proxy object that delegates method calls to a parent or sibling class of type . This is useful for accessing inherited methods that have been overridden in a class. The object-or-type determines the method resolution order to be searched. The search starts from the class right after the type . For example, if ~class.__mro__ of object-or-type is D -> B -> C -> A -> object and the value of type is B , then super searches C -> A -> object . The ~class.__mro__ attribute of the object-or-type lists the method resolution search order used by both getattr and super {.interpreted-text role=\"func\"}. The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true (this is useful for classmethods). There are two typical use cases for super . In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement \\\"diamond diagrams\\\" where multiple base classes implement the same method. Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: class C(B): def method(self, arg): super().method(arg) # This does the same thing as: # super(C, self).method(arg) In addition to method lookups, super also works for attribute lookups. One possible use case for this is calling descriptors <descriptor> in a parent or sibling class. Note that super is implemented as part of the binding process for explicit dotted attribute lookups such as super().__getitem__(name) . It does so by implementing its own __getattribute__ method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, super is undefined for implicit lookups using statements or operators such as super()[name] . Also note that, aside from the zero argument form, super is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using super , see guide to using super() . Rather than being a function, tuple is actually an immutable sequence type, as documented in typesseq-tuple and typesseq . ::: ::: {.type(object) .type(name, .bases, .dict)} ::: {.index} object: type ::: With one argument, return the type of an object . The return value is a type object and generally the same object as returned by object.__class__ <instance.__class__> . The isinstance built-in function is recommended for testing the type of an object, because it takes subclasses into account. With three arguments, return a new type object. This is essentially a dynamic form of the class statement. The name string is the class name and becomes the ~definition.__name__ attribute; the bases tuple itemizes the base classes and becomes the ~class.__bases__ attribute; and the dict dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the ~object.__dict__ attribute. For example, the following two statements create identical type objects: >>> class X: ... a = 1 ... >>> X = type(\\'X\\', (object,), dict(a=1)) See also bltin-type-objects . ::: {.versionchanged} 3.6 Subclasses of type which don\\'t override type.__new__ may no longer use the one-argument form to get the type of an object. ::: ::: ::: {.function} vars([object]) Return the ~object.__dict__ attribute for a module, class, instance, or any other object with a ~object.__dict__ attribute. Objects such as modules and instances have an updateable ~object.__dict__ attribute; however, other objects may have write restrictions on their ~object.__dict__ attributes (for example, classes use a types.MappingProxyType {.interpreted-text role=\"class\"} to prevent direct dictionary updates). Without an argument, vars acts like locals . Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored. A TypeError exception is raised if an object is specified but it doesn\\'t have a ~object.__dict__ attribute (for example, if its class defines the ~object.__slots__ {.interpreted-text role=\"attr\"} attribute). ::: ::: {.function} zip(*iterables, strict=False) Iterate over several iterables in parallel, producing tuples with an item from each one. Example: >>> for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']): ... print(item) ... (1, 'sugar') (2, 'spice') (3, 'everything nice') More formally: zip returns an iterator of tuples, where the i -th tuple contains the i -th element from each of the argument iterables. Another way to think of zip is that it turns rows into columns, and columns into rows. This is similar to transposing a matrix . zip is lazy: The elements won\\'t be processed until the iterable is iterated on, e.g. by a !for loop or by wrapping in a list . One thing to consider is that the iterables passed to zip could have different lengths; sometimes by design, and sometimes because of a bug in the code that prepared these iterables. Python offers three different approaches to dealing with this issue: By default, zip stops when the shortest iterable is exhausted. It will ignore the remaining items in the longer iterables, cutting off the result to the length of the shortest iterable: >>> list(zip(range(3), ['fee', 'fi', 'fo', 'fum'])) [(0, 'fee'), (1, 'fi'), (2, 'fo')] zip is often used in cases where the iterables are assumed to be of equal length. In such cases, it\\'s recommended to use the strict=True option. Its output is the same as regular zip : >>> list(zip(('a', 'b', 'c'), (1, 2, 3), strict=True)) [('a', 1), ('b', 2), ('c', 3)] Unlike the default behavior, it checks that the lengths of iterables are identical, raising a ValueError if they aren\\'t: >>> list(zip(range(3), [\\'fee\\', \\'fi\\', \\'fo\\', \\'fum\\'], strict=True)) Traceback (most recent call last): ... ValueError: zip() argument 2 is longer than argument 1 Without the strict=True argument, any bug that results in iterables of different lengths will be silenced, possibly manifesting as a hard-to-find bug in another part of the program. Shorter iterables can be padded with a constant value to make all the iterables have the same length. This is done by itertools.zip_longest . Edge cases: With a single iterable argument, zip {.interpreted-text role=\"func\"} returns an iterator of 1-tuples. With no arguments, it returns an empty iterator. Tips and tricks: The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n, strict=True) . This repeats the same iterator n times so that each output tuple has the result of n calls to the iterator. This has the effect of dividing the input into n-length chunks. zip in conjunction with the * operator can be used to unzip a list: >>> x = [1, 2, 3] >>> y = [4, 5, 6] >>> list(zip(x, y)) [(1, 4), (2, 5), (3, 6)] >>> x2, y2 = zip(*zip(x, y)) >>> x == list(x2) and y == list(y2) True ::: {.versionchanged} 3.10 Added the strict argument. ::: ::: ::: {.function} __import__(name, globals=None, locals=None, fromlist=(), level=0) ::: {.index} statement: import module: imp ::: ::: {.note} ::: {.admonition-title} Note ::: This is an advanced function that is not needed in everyday Python programming, unlike importlib.import_module {.interpreted-text role=\"func\"}. ::: This function is invoked by the import {.interpreted-text role=\"keyword\"} statement. It can be replaced (by importing the builtins module and assigning to builtins.__import__ ) in order to change semantics of the !import statement, but doing so is strongly discouraged as it is usually simpler to use import hooks (see 302 ) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use. Direct use of __import__ {.interpreted-text role=\"func\"} is also discouraged in favor of importlib.import_module . The function imports the module name , potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name . The standard implementation does not use its locals argument at all, and uses its globals only to determine the package context of the import statement. level specifies whether to use absolute or relative imports. 0 (the default) means only perform absolute imports. Positive values for level indicate the number of parent directories to search relative to the directory of the module calling __import__ {.interpreted-text role=\"func\"} (see 328 for the details). When the name variable is of the form package.module , normally, the top-level package (the name up till the first dot) is returned, not the module named by name . However, when a non-empty fromlist argument is given, the module named by name is returned. For example, the statement import spam results in bytecode resembling the following code: spam = __import__('spam', globals(), locals(), [], 0) The statement import spam.ham results in this call: spam = __import__('spam.ham', globals(), locals(), [], 0) Note how __import__ returns the toplevel module here because this is the object that is bound to a name by the import statement. On the other hand, the statement from spam.ham import eggs, sausage as saus results in : _temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0) eggs = _temp.eggs saus = _temp.sausage Here, the spam.ham module is returned from __import__ . From this object, the names to import are retrieved and assigned to their respective names. If you simply want to import a module (potentially within a package) by name, use importlib.import_module . ::: {.versionchanged} 3.3 Negative values for level are no longer supported (which also changes the default value to 0). ::: ::: {.versionchanged} 3.9 When the command line options -E or -I are being used, the environment variable PYTHONCASEOK is now ignored. ::: ::: Footnotes Note that the parser only accepts the Unix-style end of line convention. If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines. \u21a9","title":"Functions"},{"location":"docs/usage/functions/#built-in-funcs","text":"The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order. +---------------------------------------------------------------------------------------------------+ | Built-in Functions | +=========================+=======================+=======================+=========================+ | | A | | E | | L | | R | | | abs | | enumerate {.interpreted-text role=\"func\"} | | len | | range() _ | | | all | | eval | | list() _ | | repr | | | any {.interpreted-text role=\"func\"} | | exec | | locals | | reversed | | | ascii | | | | | | round | | | | | F | | M | | | | | B | | filter | | map | | S | | | bin | | float {.interpreted-text role=\"func\"} | | max | | set() _ | | | bool | | format | | memoryview() _ | | setattr | | | breakpoint | | frozenset() _ | | min | | slice {.interpreted-text role=\"func\"} | | | bytearray() _ | | | | | | sorted | | | bytes() _ | | G | | N | | staticmethod | | | | | getattr | | next | | str() _ | | | C | | globals | | | | sum | | | callable | | | | O | | super | | | chr {.interpreted-text role=\"func\"} | | H | | object | | | | | classmethod | | hasattr | | oct {.interpreted-text role=\"func\"} | | T | | | compile {.interpreted-text role=\"func\"} | | hash | | open | | tuple() _ | | | complex | | help {.interpreted-text role=\"func\"} | | ord | | type | | | | | hex | | | | | | | D | | | | P | | V | | | delattr | | I | | pow | | vars | | | dict() _ | | id | | print {.interpreted-text role=\"func\"} | | | | | dir | | input | | property | | Z | | | divmod | | int {.interpreted-text role=\"func\"} | | | | zip | | | | | isinstance | | | | | | | | | issubclass | | | | _ | | | | | iter | | | | __import__ | +-------------------------+-----------------------+-----------------------+-------------------------+ ::: {.function} abs(x) Return the absolute value of a number. The argument may be an integer, a floating point number, or an object implementing __abs__ . If the argument is a complex number, its magnitude is returned. ::: ::: {.function} all(iterable) Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to: def all(iterable): for element in iterable: if not element: return False return True ::: ::: {.function} any(iterable) Return True if any element of the iterable is true. If the iterable is empty, return False . Equivalent to: def any(iterable): for element in iterable: if element: return True return False ::: ::: {.function} ascii(object) As repr , return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by repr {.interpreted-text role=\"func\"} using \\x , \\u or \\U escapes. This generates a string similar to that returned by repr in Python 2. ::: ::: {.function} bin(x) Convert an integer number to a binary string prefixed with \\\"0b\\\". The result is a valid Python expression. If x is not a Python int object, it has to define an __index__ method that returns an integer. Some examples: >>> bin(3) \\'0b11\\' >>> bin(-10) \\'-0b1010\\' If prefix \\\"0b\\\" is desired or not, you can use either of the following ways. >>> format(14, \\'#b\\'), format(14, \\'b\\') (\\'0b1110\\', \\'1110\\') >>> f\\'{14:#b}\\', f\\'{14:b}\\' (\\'0b1110\\', \\'1110\\') See also format for more information. ::: ::: {.bool([x])} Return a Boolean value, i.e. one of True or False . x is converted using the standard truth testing procedure <truth> {.interpreted-text role=\"ref\"}. If x is false or omitted, this returns False ; otherwise it returns True . The bool class is a subclass of int (see typesnumeric ). It cannot be subclassed further. Its only instances are False and True (see bltin-boolean-values ). ::: {.index} pair: Boolean; type ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: ::: {.function} breakpoint( args, *kws) This function drops you into the debugger at the call site. Specifically, it calls sys.breakpointhook {.interpreted-text role=\"func\"}, passing args and kws straight through. By default, sys.breakpointhook() calls pdb.set_trace() {.interpreted-text role=\"func\"} expecting no arguments. In this case, it is purely a convenience function so you don\\'t have to explicitly import pdb or type as much code to enter the debugger. However, sys.breakpointhook can be set to some other function and breakpoint {.interpreted-text role=\"func\"} will automatically call that, allowing you to drop into the debugger of choice. ::: {.audit-event} builtins.breakpoint breakpointhook breakpoint ::: ::: {.versionadded} 3.7 ::: Return a new array of bytes. The bytearray {.interpreted-text role=\"class\"} class is a mutable sequence of integers in the range 0 \\<= x \\< 256. It has most of the usual methods of mutable sequences, described in typesseq-mutable , as well as most methods that the bytes type has, see bytes-methods . The optional source parameter can be used to initialize the array in a few different ways: If it is a string , you must also give the encoding (and optionally, errors ) parameters; bytearray {.interpreted-text role=\"func\"} then converts the string to bytes using str.encode . If it is an integer , the array will have that size and will be initialized with null bytes. If it is an object conforming to the buffer interface <bufferobjects> , a read-only buffer of the object will be used to initialize the bytes array. If it is an iterable , it must be an iterable of integers in the range 0 <= x < 256 , which are used as the initial contents of the array. Without an argument, an array of size 0 is created. See also binaryseq and typebytearray . Return a new \\\"bytes\\\" object, which is an immutable sequence of integers in the range 0 <= x < 256 . bytes {.interpreted-text role=\"class\"} is an immutable version of bytearray {.interpreted-text role=\"class\"} -- it has the same non-mutating methods and the same indexing and slicing behavior. Accordingly, constructor arguments are interpreted as for bytearray . Bytes objects can also be created with literals, see strings . See also binaryseq , typebytes , and bytes-methods . ::: ::: {.function} callable(object) Return True if the object argument appears callable, False if not. If this returns True , it is still possible that a call fails, but if it is False , calling object will never succeed. Note that classes are callable (calling a class returns a new instance); instances are callable if their class has a __call__ method. ::: {.versionadded} 3.2 This function was first removed in Python 3.0 and then brought back in Python 3.2. ::: ::: ::: {.function} chr(i) Return the string representing a character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , while chr(8364) returns the string '\u20ac' . This is the inverse of ord . The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in base 16). ValueError will be raised if i is outside that range. ::: ::: {.decorator} classmethod Transform a method into a class method. A class method receives the class as implicit first argument, just like an instance method receives the instance. To declare a class method, use this idiom: class C: @classmethod def f(cls, arg1, arg2, ...): ... The @classmethod form is a function decorator {.interpreted-text role=\"term\"} -- see function for details. A class method can be called either on the class (such as C.f() ) or on an instance (such as C().f() ). The instance is ignored except for its class. If a class method is called for a derived class, the derived class object is passed as the implied first argument. Class methods are different than C++ or Java static methods. If you want those, see staticmethod in this section. For more information on class methods, see types . ::: {.versionchanged} 3.9 Class methods can now wrap other descriptors <descriptor> such as property . ::: ::: ::: {.function} compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1) Compile the source into a code or AST object. Code objects can be executed by exec or eval . source can either be a normal string, a byte string, or an AST object. Refer to the ast module documentation for information on how to work with AST objects. The filename argument should give the file from which the code was read; pass some recognizable value if it wasn\\'t read from a file ( '<string>' is commonly used). The mode argument specifies what kind of code must be compiled; it can be 'exec' if source consists of a sequence of statements, 'eval' if it consists of a single expression, or 'single' if it consists of a single interactive statement (in the latter case, expression statements that evaluate to something other than None will be printed). The optional arguments flags and dont_inherit control which compiler options <ast-compiler-flags> should be activated and which future features <future> should be allowed. If neither is present (or both are zero) the code is compiled with the same flags that affect the code that is calling compile . If the flags argument is given and dont_inherit is not (or is zero) then the compiler options and the future statements specified by the flags argument are used in addition to those that would be used anyway. If dont_inherit is a non-zero integer then the flags argument is it -- the flags (future features and compiler options) in the surrounding code are ignored. Compiler options and future statements are specified by bits which can be bitwise ORed together to specify multiple options. The bitfield required to specify a given future feature can be found as the ~__future__._Feature.compiler_flag attribute on the ~__future__._Feature instance in the __future__ module. Compiler flags <ast-compiler-flags> can be found in ast module, with PyCF_ prefix. The argument optimize specifies the optimization level of the compiler; the default value of -1 selects the optimization level of the interpreter as given by -O options. Explicit levels are 0 (no optimization; __debug__ is true), 1 (asserts are removed, __debug__ is false) or 2 (docstrings are removed too). This function raises SyntaxError if the compiled source is invalid, and ValueError {.interpreted-text role=\"exc\"} if the source contains null bytes. If you want to parse Python code into its AST representation, see ast.parse . ::: {.audit-event} compile source,filename compile Raises an auditing event <auditing> compile with arguments source and filename . This event may also be raised by implicit compilation. ::: ::: {.note} ::: {.admonition-title} Note ::: When compiling a string with multi-line code in 'single' or 'eval' mode, input must be terminated by at least one newline character. This is to facilitate detection of incomplete and complete statements in the code module. ::: ::: {.warning} ::: {.admonition-title} Warning ::: It is possible to crash the Python interpreter with a sufficiently large/complex string when compiling to an AST object due to stack depth limitations in Python\\'s AST compiler. ::: ::: {.versionchanged} 3.2 Allowed use of Windows and Mac newlines. Also input in 'exec' mode does not have to end in a newline anymore. Added the optimize parameter. ::: ::: {.versionchanged} 3.5 Previously, TypeError was raised when null bytes were encountered in source . ::: ::: {.versionadded} 3.8 ast.PyCF_ALLOW_TOP_LEVEL_AWAIT can now be passed in flags to enable support for top-level await , async for , and async with . ::: ::: ::: {.complex([real[, .imag]])} Return a complex number with the value real + imag *1j or convert a string or number to a complex number. If the first parameter is a string, it will be interpreted as a complex number and the function must be called without a second parameter. The second parameter can never be a string. Each argument may be any numeric type (including complex). If imag is omitted, it defaults to zero and the constructor serves as a numeric conversion like int and float . If both arguments are omitted, returns 0j . For a general Python object x , complex(x) delegates to x.__complex__() . If __complex__() is not defined then it falls back to __float__ . If __float__() is not defined then it falls back to __index__ {.interpreted-text role=\"meth\"}. ::: {.note} ::: {.admonition-title} Note ::: When converting from a string, the string must not contain whitespace around the central + or - operator. For example, complex('1+2j') is fine, but complex('1 + 2j') raises ValueError {.interpreted-text role=\"exc\"}. ::: The complex type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __complex__ and __float__ are not defined. ::: ::: ::: {.function} delattr(object, name) This is a relative of setattr . The arguments are an object and a string. The string must be the name of one of the object\\'s attributes. The function deletes the named attribute, provided the object allows it. For example, delattr(x, 'foobar') is equivalent to del x.foobar . Create a new dictionary. The dict object is the dictionary class. See dict {.interpreted-text role=\"class\"} and typesmapping for documentation about this class. For other containers see the built-in list {.interpreted-text role=\"class\"}, set , and tuple classes, as well as the collections module. ::: ::: {.function} dir([object]) Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object. If the object has a method named __dir__ {.interpreted-text role=\"meth\"}, this method will be called and must return the list of attributes. This allows objects that implement a custom __getattr__ or __getattribute__ function to customize the way dir reports their attributes. If the object does not provide __dir__ , the function tries its best to gather information from the object\\'s ~object.__dict__ attribute, if defined, and from its type object. The resulting list is not necessarily complete, and may be inaccurate when the object has a custom __getattr__ . The default dir mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information: If the object is a module object, the list contains the names of the module\\'s attributes. If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases. Otherwise, the list contains the object\\'s attributes\\' names, the names of its class\\'s attributes, and recursively of the attributes of its class\\'s base classes. The resulting list is sorted alphabetically. For example: >>> import struct >>> dir() # show the names in the module namespace # doctest: +SKIP [\\'__builtins__\\', \\'__name__\\', \\'struct\\'] >>> dir(struct) # show the names in the struct module # doctest: +SKIP [\\'Struct\\', \\'__all__\\', \\'__builtins__\\', \\'__cached__\\', \\'__doc__\\', \\'__file__\\', \\'__initializing__\\', \\'__loader__\\', \\'__name__\\', \\'__package__\\', \\'_clearcache\\', \\'calcsize\\', \\'error\\', \\'pack\\', \\'pack_into\\', \\'unpack\\', \\'unpack_from\\'] >>> class Shape: ... def __dir__(self): ... return [\\'area\\', \\'perimeter\\', \\'location\\'] >>> s = Shape() >>> dir(s) [\\'area\\', \\'location\\', \\'perimeter\\'] ::: {.note} ::: {.admonition-title} Note ::: Because dir is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class. ::: ::: ::: {.function} divmod(a, b) Take two (non complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as (a // b, a % b) . For floating point numbers the result is (q, a % b) , where q is usually math.floor(a / b) but may be 1 less than that. In any case q * b + a % b is very close to a , if a % b is non-zero it has the same sign as b , and 0 <= abs(a % b) < abs(b) . ::: ::: {.function} enumerate(iterable, start=0) Return an enumerate object. iterable must be a sequence, an iterator , or some other object which supports iteration. The ~iterator.__next__ {.interpreted-text role=\"meth\"} method of the iterator returned by enumerate returns a tuple containing a count (from start which defaults to 0) and the values obtained from iterating over iterable . >>> seasons = [\\'Spring\\', \\'Summer\\', \\'Fall\\', \\'Winter\\'] >>> list(enumerate(seasons)) [(0, \\'Spring\\'), (1, \\'Summer\\'), (2, \\'Fall\\'), (3, \\'Winter\\')] >>> list(enumerate(seasons, start=1)) [(1, \\'Spring\\'), (2, \\'Summer\\'), (3, \\'Fall\\'), (4, \\'Winter\\')] Equivalent to: def enumerate ( sequence , start = 0 ): n = start for elem in sequence : yield n , elem n += 1 ::: ::: {.function} eval(expression[, globals[, locals]]) The arguments are a string and optional globals and locals. If provided, globals must be a dictionary. If provided, locals can be any mapping object. The expression argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the globals and locals dictionaries as global and local namespace. If the globals dictionary is present and does not contain a value for the key __builtins__ , a reference to the dictionary of the built-in module builtins is inserted under that key before expression is parsed. This means that expression normally has full access to the standard builtins module and restricted environments are propagated. If the locals dictionary is omitted it defaults to the globals dictionary. If both dictionaries are omitted, the expression is executed with the globals and locals in the environment where eval {.interpreted-text role=\"func\"} is called. Note, eval() does not have access to the nested scopes <nested scope> (non-locals) in the enclosing environment. The return value is the result of the evaluated expression. Syntax errors are reported as exceptions. Example: >>> x = 1 >>> eval(\\'x+1\\') 2 This function can also be used to execute arbitrary code objects (such as those created by compile ). In this case pass a code object instead of a string. If the code object has been compiled with 'exec' as the mode argument, eval {.interpreted-text role=\"func\"}\\'s return value will be None . Hints: dynamic execution of statements is supported by the exec function. The globals and locals {.interpreted-text role=\"func\"} functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by eval or exec {.interpreted-text role=\"func\"}. If the given source is a string, then leading and trailing spaces and tabs are stripped. See ast.literal_eval for a function that can safely evaluate strings with expressions containing only literals. ::: {.audit-event} exec code_object eval Raises an auditing event <auditing> exec with the code object as the argument. Code compilation events may also be raised. ::: ::: ::: {.index} builtin: exec ::: ::: {.function} exec(object[, globals[, locals]]) This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). 1 If it is a code object, it is simply executed. In all cases, the code that\\'s executed is expected to be valid as file input (see the section \\\"File input\\\" in the Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec function. The return value is None . In all cases, if the optional parts are omitted, the code is executed in the current scope. If only globals is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If globals and locals are given, they are used for the global and local variables, respectively. If provided, locals can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as globals and locals , the code will be executed as if it were embedded in a class definition. If the globals dictionary does not contain a value for the key __builtins__ , a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own __builtins__ dictionary into globals before passing it to exec . ::: {.audit-event} exec code_object exec Raises an auditing event <auditing> exec with the code object as the argument. Code compilation events may also be raised. ::: ::: {.note} ::: {.admonition-title} Note ::: The built-in functions globals and locals return the current global and local dictionary, respectively, which may be useful to pass around for use as the second and third argument to exec {.interpreted-text role=\"func\"}. ::: ::: {.note} ::: {.admonition-title} Note ::: The default locals act as described for function locals below: modifications to the default locals dictionary should not be attempted. Pass an explicit locals dictionary if you need to see effects of the code on locals after function exec returns. ::: ::: ::: {.function} filter(function, iterable) Construct an iterator from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If function is None , the identity function is assumed, that is, all elements of iterable that are false are removed. Note that filter(function, iterable) is equivalent to the generator expression (item for item in iterable if function(item)) if function is not None and (item for item in iterable if item) if function is None . See itertools.filterfalse for the complementary function that returns elements of iterable for which function returns false. ::: ::: {.float([x])} ::: {.index} single: NaN single: Infinity ::: Return a floating point number constructed from a number or string x . If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be '+' or '-' ; a '+' sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or a positive or negative infinity. More precisely, the input must conform to the following grammar after leading and trailing whitespace characters are removed: ::: {.productionlist} float sign: \\\"+\\\" | \\\"-\\\" infinity: \\\"Infinity\\\" | \\\"inf\\\" nan: \\\"nan\\\" numeric_value: [floatnumber]{.title-ref} | [infinity]{.title-ref} | [nan]{.title-ref} numeric_string: [[sign]{.title-ref}] [numeric_value]{.title-ref} ::: Here floatnumber is the form of a Python floating-point literal, described in floating . Case is not significant, so, for example, \\\"inf\\\", \\\"Inf\\\", \\\"INFINITY\\\" and \\\"iNfINity\\\" are all acceptable spellings for positive infinity. Otherwise, if the argument is an integer or a floating point number, a floating point number with the same value (within Python\\'s floating point precision) is returned. If the argument is outside the range of a Python float, an OverflowError will be raised. For a general Python object x , float(x) delegates to x.__float__() . If __float__() is not defined then it falls back to __index__ . If no argument is given, 0.0 is returned. Examples: >>> float('+1.23') 1.23 >>> float(' -12345\\n') -12345.0 >>> float('1e-003') 0.001 >>> float('+1E6') 1000000.0 >>> float('-Infinity') -inf The float type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __float__ is not defined. ::: ::: ::: {.index} single: __format__ single: string; format() (built-in function) ::: ::: {.function} format(value[, format_spec]) Convert a value to a \\\"formatted\\\" representation, as controlled by format_spec . The interpretation of format_spec will depend on the type of the value argument, however there is a standard formatting syntax that is used by most built-in types: formatspec . The default format_spec is an empty string which usually gives the same effect as calling str(value) <str> {.interpreted-text role=\"func\"}. A call to format(value, format_spec) is translated to type(value).__format__(value, format_spec) which bypasses the instance dictionary when searching for the value\\'s __format__ method. A TypeError exception is raised if the method search reaches object and the format_spec is non-empty, or if either the format_spec or the return value are not strings. ::: {.versionchanged} 3.4 object().__format__(format_spec) raises TypeError if format_spec is not an empty string. ::: Return a new frozenset object, optionally with elements taken from iterable . frozenset is a built-in class. See frozenset and types-set for documentation about this class. For other containers see the built-in set {.interpreted-text role=\"class\"}, list , tuple , and dict {.interpreted-text role=\"class\"} classes, as well as the collections {.interpreted-text role=\"mod\"} module. ::: ::: {.function} getattr(object, name[, default]) Return the value of the named attribute of object . name must be a string. If the string is the name of one of the object\\'s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar . If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised. ::: ::: {.function} globals() Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called). ::: ::: {.function} hasattr(object, name) The arguments are an object and a string. The result is True if the string is the name of one of the object\\'s attributes, False if not. (This is implemented by calling getattr(object, name) and seeing whether it raises an AttributeError or not.) ::: ::: {.function} hash(object) Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0). ::: {.note} ::: {.admonition-title} Note ::: For objects with custom __hash__ methods, note that hash truncates the return value based on the bit width of the host machine. See __hash__ for details. ::: ::: ::: {.function} help([object]) Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated. Note that if a slash(/) appears in the parameter list of a function, when invoking help , it means that the parameters prior to the slash are positional-only. For more info, see the FAQ entry on positional-only parameters <faq-positional-only-arguments> {.interpreted-text role=\"ref\"}. This function is added to the built-in namespace by the site module. ::: {.versionchanged} 3.4 Changes to pydoc and inspect mean that the reported signatures for callables are now more comprehensive and consistent. ::: ::: ::: {.function} hex(x) Convert an integer number to a lowercase hexadecimal string prefixed with \\\"0x\\\". If x is not a Python int {.interpreted-text role=\"class\"} object, it has to define an __index__ {.interpreted-text role=\"meth\"} method that returns an integer. Some examples: >>> hex(255) \\'0xff\\' >>> hex(-42) \\'-0x2a\\' If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways: >>> \\'%#x\\' % 255, \\'%x\\' % 255, \\'%X\\' % 255 (\\'0xff\\', \\'ff\\', \\'FF\\') >>> format(255, \\'#x\\'), format(255, \\'x\\'), format(255, \\'X\\') (\\'0xff\\', \\'ff\\', \\'FF\\') >>> f\\'{255:#x}\\', f\\'{255:x}\\', f\\'{255:X}\\' (\\'0xff\\', \\'ff\\', \\'FF\\') See also format for more information. See also int for converting a hexadecimal string to an integer using a base of 16. ::: {.note} ::: {.admonition-title} Note ::: To obtain a hexadecimal string representation for a float, use the float.hex method. ::: ::: ::: {.function} id(object) Return the \\\"identity\\\" of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id value. ::: {.impl-detail} This is the address of the object in memory. ::: ::: {.audit-event} builtins.id id id ::: ::: ::: {.function} input([prompt]) If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, EOFError is raised. Example: >>> s = input('--> ') # doctest: +SKIP --> Monty Python's Flying Circus >>> s # doctest: +SKIP \"Monty Python's Flying Circus\" If the readline module was loaded, then input will use it to provide elaborate line editing and history features. ::: {.audit-event} builtins.input prompt input Raises an auditing event <auditing> builtins.input with argument prompt before reading input ::: ::: {.audit-event} builtins.input/result result input Raises an auditing event builtins.input/result with the result after successfully reading input. ::: ::: ::: {.int([x]) .int(x, .base=10)} Return an integer object constructed from a number or string x , or return 0 if no arguments are given. If x defines __int__ , int(x) returns x.__int__() . If x defines __index__ {.interpreted-text role=\"meth\"}, it returns x.__index__() . If x defines __trunc__ , it returns x.__trunc__() . For floating point numbers, this truncates towards zero. If x is not a number or if base is given, then x must be a string, bytes , or bytearray instance representing an integer literal <integers> in radix base . Optionally, the literal can be preceded by + or - (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z ) having values 10 to 35. The default base is 10. The allowed values are 0 and 2--36. Base-2, -8, and -16 literals can be optionally prefixed with 0b / 0B , 0o / 0O , or 0x / 0X , as with integer literals in code. Base 0 means to interpret exactly as a code literal, so that the actual base is 2, 8, 10, or 16, and so that int('010', 0) is not legal, while int('010') is, as well as int('010', 8) . The integer type is described in typesnumeric {.interpreted-text role=\"ref\"}. ::: {.versionchanged} 3.4 If base is not an instance of int {.interpreted-text role=\"class\"} and the base object has a base.__index__ <object.__index__> method, that method is called to obtain an integer for the base. Previous versions used base.__int__ <object.__int__> {.interpreted-text role=\"meth\"} instead of base.__index__ <object.__index__> . ::: ::: {.versionchanged} 3.6 Grouping digits with underscores as in code literals is allowed. ::: ::: {.versionchanged} 3.7 x is now a positional-only parameter. ::: ::: {.versionchanged} 3.8 Falls back to __index__ if __int__ is not defined. ::: ::: ::: {.function} isinstance(object, classinfo) Return True if the object argument is an instance of the classinfo argument, or of a (direct, indirect or virtual <abstract base class> ) subclass thereof. If object is not an object of the given type, the function always returns False . If classinfo is a tuple of type objects (or recursively, other such tuples), return True if object is an instance of any of the types. If classinfo is not a type or tuple of types and such tuples, a TypeError exception is raised. ::: ::: {.function} issubclass(class, classinfo) Return True if class is a subclass (direct, indirect or virtual <abstract base class> ) of classinfo . A class is considered a subclass of itself. classinfo may be a tuple of class objects, in which case every entry in classinfo will be checked. In any other case, a TypeError exception is raised. ::: ::: {.function} iter(object[, sentinel]) Return an iterator object. The first argument is interpreted very differently depending on the presence of the second argument. Without a second argument, object must be a collection object which supports the iteration protocol (the __iter__ method), or it must support the sequence protocol (the __getitem__ method with integer arguments starting at 0 ). If it does not support either of those protocols, TypeError is raised. If the second argument, sentinel , is given, then object must be a callable object. The iterator created in this case will call object with no arguments for each call to its ~iterator.__next__ method; if the value returned is equal to sentinel , StopIteration {.interpreted-text role=\"exc\"} will be raised, otherwise the value will be returned. See also typeiter . One useful application of the second form of iter {.interpreted-text role=\"func\"} is to build a block-reader. For example, reading fixed-width blocks from a binary database file until the end of file is reached: from functools import partial with open ( 'mydata.db' , 'rb' ) as f : for block in iter ( partial ( f . read , 64 ), b '' ): process_block ( block ) ::: ::: {.function} len(s) Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set). ::: {.impl-detail} len raises OverflowError on lengths larger than sys.maxsize , such as range(2 ** 100) <range> . ::: Rather than being a function, list is actually a mutable sequence type, as documented in typesseq-list and typesseq . ::: ::: {.function} locals() Update and return a dictionary representing the current local symbol table. Free variables are returned by locals {.interpreted-text role=\"func\"} when it is called in function blocks, but not in class blocks. Note that at the module level, locals {.interpreted-text role=\"func\"} and globals are the same dictionary. ::: {.note} ::: {.admonition-title} Note ::: The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the interpreter. ::: ::: ::: {.function} map(function, iterable, ...) Return an iterator that applies function to every item of iterable , yielding the results. If additional iterable arguments are passed, function must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see itertools.starmap . ::: ::: {.function} max(iterable, [, key, default]) max(arg1, arg2, args[, key]) Return the largest item in an iterable or the largest of two or more arguments. If one positional argument is provided, it should be an iterable . The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned. There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort . The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised. If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc, reverse=True)[0] and heapq.nlargest(1, iterable, key=keyfunc) . ::: {.versionadded} 3.4 The default keyword-only argument. ::: ::: {.versionchanged} 3.8 The key can be None . ::: Return a \\\"memory view\\\" object created from the given argument. See typememoryview for more information. ::: ::: {.function} min(iterable, [, key, default]) min(arg1, arg2, args[, key]) Return the smallest item in an iterable or the smallest of two or more arguments. If one positional argument is provided, it should be an iterable . The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned. There are two optional keyword-only arguments. The key argument specifies a one-argument ordering function like that used for list.sort . The default argument specifies an object to return if the provided iterable is empty. If the iterable is empty and default is not provided, a ValueError is raised. If multiple items are minimal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as sorted(iterable, key=keyfunc)[0] and heapq.nsmallest(1, iterable, key=keyfunc) . ::: {.versionadded} 3.4 The default keyword-only argument. ::: ::: {.versionchanged} 3.8 The key can be None . ::: ::: ::: {.function} next(iterator[, default]) Retrieve the next item from the iterator by calling its ~iterator.__next__ method. If default is given, it is returned if the iterator is exhausted, otherwise StopIteration is raised. ::: ::: {.object()} Return a new featureless object. object {.interpreted-text role=\"class\"} is a base for all classes. It has the methods that are common to all instances of Python classes. This function does not accept any arguments. ::: {.note} ::: {.admonition-title} Note ::: object does not have a ~object.__dict__ , so you can\\'t assign arbitrary attributes to an instance of the object {.interpreted-text role=\"class\"} class. ::: ::: ::: {.function} oct(x) Convert an integer number to an octal string prefixed with \\\"0o\\\". The result is a valid Python expression. If x is not a Python int object, it has to define an __index__ method that returns an integer. For example: >>> oct(8) \\'0o10\\' >>> oct(-56) \\'-0o70\\' If you want to convert an integer number to octal string either with prefix \\\"0o\\\" or not, you can use either of the following ways. >>> \\'%#o\\' % 10, \\'%o\\' % 10 (\\'0o12\\', \\'12\\') >>> format(10, \\'#o\\'), format(10, \\'o\\') (\\'0o12\\', \\'12\\') >>> f\\'{10:#o}\\', f\\'{10:o}\\' (\\'0o12\\', \\'12\\') See also format for more information. ::: {.index} single: file object; open() built-in function ::: ::: ::: {.function} open(file, mode=\\'r\\', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None) Open file and return a corresponding file object {.interpreted-text role=\"term\"}. If the file cannot be opened, an OSError is raised. See tut-files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed, unless closefd is set to False .) mode is an optional string that specifies the mode in which the file is opened. It defaults to 'r' which means open for reading in text mode. Other common values are 'w' for writing (truncating the file if it already exists), 'x' for exclusive creation and 'a' for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform dependent: locale.getpreferredencoding(False) is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: ::: {#filemodes} ::: {.index} pair: file; modes ::: ::: Character Meaning 'r' open for reading (default) 'w' open for writing, truncating the file first 'x' open for exclusive creation, failing if the file already exists 'a' open for writing, appending to the end of the file if it exists 'b' binary mode 't' text mode (default) '+' open for updating (reading and writing) The default mode is 'r' (open for reading text, synonym of 'rt' ). Modes 'w+' and 'w+b' open and truncate the file. Modes 'r+' and 'r+b' open the file with no truncation. As mentioned in the io-overview , Python distinguishes between binary and text I/O. Files opened in binary mode (including 'b' in the mode argument) return contents as bytes objects without any decoding. In text mode (the default, or when 't' is included in the mode argument), the contents of the file are returned as str , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. There is an additional mode character permitted, 'U' , which no longer has any effect, and is considered deprecated. It previously enabled universal newlines in text mode, which became the default behaviour in Python 3.0. Refer to the documentation of the newline <open-newline-parameter> parameter for further details. ::: {.note} ::: {.admonition-title} Note ::: Python doesn\\'t depend on the underlying operating system\\'s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. ::: buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. When no buffering argument is given, the default buffering policy works as follows: Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device\\'s \\\"block size\\\" and falling back on io.DEFAULT_BUFFER_SIZE . On many systems, the buffer will typically be 4096 or 8192 bytes long. \\\"Interactive\\\" text files (files for which ~io.IOBase.isatty returns True ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever locale.getpreferredencoding returns), but any text encoding supported by Python can be used. See the codecs module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled---this cannot be used in binary mode. A variety of standard error handlers are available (listed under error-handlers ), though any error handling name that has been registered with codecs.register_error is also valid. The standard names include: 'strict' to raise a ValueError exception if there is an encoding error. The default value of None has the same effect. 'ignore' ignores errors. Note that ignoring encoding errors can lead to data loss. 'replace' causes a replacement marker (such as '?' ) to be inserted where there is malformed data. 'surrogateescape' will represent any incorrect bytes as code points in the Unicode Private Use Area ranging from U+DC80 to U+DCFF. These private code points will then be turned back into the same bytes when the surrogateescape error handler is used when writing data. This is useful for processing files in an unknown encoding. 'xmlcharrefreplace' is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference &#nnn; . 'backslashreplace' replaces malformed data by Python\\'s backslashed escape sequences. 'namereplace' (also only supported when writing) replaces unsupported characters with \\N{...} escape sequences. ::: {.index} single: universal newlines; open() built-in function ::: ::: {#open-newline-parameter} newline controls how universal newlines {.interpreted-text role=\"term\"} mode works (it only applies to text mode). It can be None , '' , '\\n' , '\\r' , and '\\r\\n' . It works as follows: ::: When reading input from the stream, if newline is None , universal newlines mode is enabled. Lines in the input can end in '\\n' , '\\r' , or '\\r\\n' , and these are translated into '\\n' before being returned to the caller. If it is '' , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated. When writing output to the stream, if newline is None , any '\\n' characters written are translated to the system default line separator, os.linesep . If newline is '' or '\\n' , no translation takes place. If newline is any of the other legal values, any '\\n' characters written are translated to the given string. If closefd is False and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be True (the default) otherwise an error will be raised. A custom opener can be used by passing a callable as opener . The underlying file descriptor for the file object is then obtained by calling opener with ( file , flags ). opener must return an open file descriptor (passing os.open as opener results in functionality similar to passing None ). The newly created file is non-inheritable <fd_inheritance> . The following example uses the dir_fd <dir_fd> {.interpreted-text role=\"ref\"} parameter of the os.open function to open a file relative to a given directory: >>> import os >>> dir_fd = os . open ( 'somedir' , os . O_RDONLY ) >>> def opener ( path , flags ): ... return os . open ( path , flags , dir_fd = dir_fd ) ... >>> with open ( 'spamspam.txt' , 'w' , opener = opener ) as f : ... print ( 'This will be written to somedir/spamspam.txt' , file = f ) ... >>> os . close ( dir_fd ) # don't leak a file descriptor The type of file object returned by the open function depends on the mode. When open is used to open a file in a text mode ( 'w' , 'r' , 'wt' , 'rt' , etc.), it returns a subclass of io.TextIOBase (specifically io.TextIOWrapper ). When used to open a file in a binary mode with buffering, the returned class is a subclass of io.BufferedIOBase . The exact class varies: in read binary mode, it returns an io.BufferedReader ; in write binary and append binary modes, it returns an io.BufferedWriter {.interpreted-text role=\"class\"}, and in read/write mode, it returns an io.BufferedRandom . When buffering is disabled, the raw stream, a subclass of io.RawIOBase {.interpreted-text role=\"class\"}, io.FileIO , is returned. ::: {.index} single: line-buffered I/O single: unbuffered I/O single: buffer size, I/O single: I/O control; buffering single: binary mode single: text mode module: sys ::: See also the file handling modules, such as, fileinput , io {.interpreted-text role=\"mod\"} (where open is declared), os , os.path {.interpreted-text role=\"mod\"}, tempfile , and shutil . ::: {.audit-event} open file,mode,flags open ::: The mode and flags arguments may have been modified or inferred from the original call. ::: {.versionchanged} 3.3 The opener parameter was added. The 'x' mode was added. IOError used to be raised, it is now an alias of OSError . FileExistsError is now raised if the file opened in exclusive creation mode ( 'x' ) already exists. ::: ::: {.versionchanged} 3.4 The file is now non-inheritable. ::: ::: {.deprecated-removed} 3.4 3.10 The 'U' mode. ::: ::: {.versionchanged} 3.5 If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an InterruptedError exception (see 475 for the rationale). The 'namereplace' error handler was added. ::: ::: {.versionchanged} 3.6 Support added to accept objects implementing os.PathLike . On Windows, opening a console buffer may return a subclass of io.RawIOBase other than io.FileIO . ::: ::: ::: {.function} ord(c) Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 and ord('\u20ac') (Euro sign) returns 8364 . This is the inverse of chr . ::: ::: {.function} pow(base, exp[, mod]) Return base to the power exp ; if mod is present, return base to the power exp , modulo mod (computed more efficiently than pow(base, exp) % mod ). The two-argument form pow(base, exp) is equivalent to using the power operator: base**exp . The arguments must have numeric types. With mixed operand types, the coercion rules for binary arithmetic operators apply. For int operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered. For example, 10**2 returns 100 , but 10**-2 returns 0.01 . For int operands base and exp , if mod is present, mod must also be of integer type and mod must be nonzero. If mod is present and exp is negative, base must be relatively prime to mod . In that case, pow(inv_base, -exp, mod) is returned, where inv_base is an inverse to base modulo mod . Here\\'s an example of computing an inverse for 38 modulo 97 : >>> pow(38, -1, mod=97) 23 >>> 23 * 38 % 97 == 1 True ::: {.versionchanged} 3.8 For int operands, the three-argument form of pow now allows the second argument to be negative, permitting computation of modular inverses. ::: ::: {.versionchanged} 3.8 Allow keyword arguments. Formerly, only positional arguments were supported. ::: ::: ::: {.function} print(*objects, sep=\\' \\', end=\\'\\n\\', file=sys.stdout, flush=False) Print objects to the text stream file , separated by sep and followed by end . sep , end , file and flush , if present, must be given as keyword arguments. All non-keyword arguments are converted to strings like str does and written to the stream, separated by sep and followed by end . Both sep and end must be strings; they can also be None , which means to use the default values. If no objects are given, print will just write end . The file argument must be an object with a write(string) method; if it is not present or None , sys.stdout will be used. Since printed arguments are converted to text strings, print cannot be used with binary mode file objects. For these, use file.write(...) instead. Whether output is buffered is usually determined by file , but if the flush keyword argument is true, the stream is forcibly flushed. ::: {.versionchanged} 3.3 Added the flush keyword argument. ::: ::: ::: {.property(fget=None, .fset=None, .fdel=None, .doc=None)} Return a property attribute. fget is a function for getting an attribute value. fset is a function for setting an attribute value. fdel is a function for deleting an attribute value. And doc creates a docstring for the attribute. A typical use is to define a managed attribute x : class C: def __init__ ( self ): self . _x = None def getx ( self ): return self . _x def setx ( self , value ): self . _x = value def delx ( self ): del self . _x x = property ( getx , setx , delx , \"I'm the 'x' property.\" ) If c is an instance of C , c.x will invoke the getter, c.x = value will invoke the setter and del c.x the deleter. If given, doc will be the docstring of the property attribute. Otherwise, the property will copy fget \\'s docstring (if it exists). This makes it possible to create read-only properties easily using property as a decorator : class Parrot : def __init__ ( self ) : self . _voltage = 100000 @property def voltage ( self ) : \"\"\"Get the current voltage.\"\"\" return self . _voltage The @property decorator turns the voltage {.interpreted-text role=\"meth\"} method into a \\\"getter\\\" for a read-only attribute with the same name, and it sets the docstring for voltage to \\\"Get the current voltage.\\\" A property object has ~property.getter , ~property.setter , and ~property.deleter methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example: class C : def __init__ ( self ) : self . _x = None @property def x ( self ) : \"\"\"I'm the 'x' property.\"\"\" return self . _x @x . setter def x ( self , value ) : self . _x = value @x . deleter def x ( self ) : del self . _x This code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property ( x in this case.) The returned property object also has the attributes fget , fset , and fdel corresponding to the constructor arguments. ::: {.versionchanged} 3.5 The docstrings of property objects are now writeable. ::: Rather than being a function, range is actually an immutable sequence type, as documented in typesseq-range and typesseq . ::: ::: {.function} repr(object) Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval , otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__ {.interpreted-text role=\"meth\"} method. ::: ::: {.function} reversed(seq) Return a reverse iterator . seq must be an object which has a __reversed__ method or supports the sequence protocol (the __len__ method and the __getitem__ method with integer arguments starting at 0 ). ::: ::: {.function} round(number[, ndigits]) Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None , it returns the nearest integer to its input. For the built-in types supporting round {.interpreted-text role=\"func\"}, values are rounded to the closest multiple of 10 to the power minus ndigits ; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0 , and round(1.5) is 2 ). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None . Otherwise the return value has the same type as number . For a general Python object number , round delegates to number.__round__ . ::: {.note} ::: {.admonition-title} Note ::: The behavior of round for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68 . This is not a bug: it\\'s a result of the fact that most decimal fractions can\\'t be represented exactly as a float. See tut-fp-issues for more information. ::: Return a new set object, optionally with elements taken from iterable . set is a built-in class. See set and types-set {.interpreted-text role=\"ref\"} for documentation about this class. For other containers see the built-in frozenset {.interpreted-text role=\"class\"}, list , tuple , and dict {.interpreted-text role=\"class\"} classes, as well as the collections {.interpreted-text role=\"mod\"} module. ::: ::: {.function} setattr(object, name, value) This is the counterpart of getattr . The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123 . ::: ::: {.slice(stop) .slice(start, .stop[, .step])} Return a slice object representing the set of indices specified by range(start, stop, step) . The start and step arguments default to None . Slice objects have read-only data attributes ~slice.start , ~slice.stop and ~slice.step which merely return the argument values (or their default). They have no other explicit functionality; however they are used by NumPy and other third party packages. Slice objects are also generated when extended indexing syntax is used. For example: a[start:stop:step] or a[start:stop, i] . See itertools.islice for an alternate version that returns an iterator. ::: ::: {.function} sorted(iterable, *, key=None, reverse=False) Return a new sorted list from the items in iterable . Has two optional arguments which must be specified as keyword arguments. key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower ). The default value is None (compare the elements directly). reverse is a boolean value. If set to True , then the list elements are sorted as if each comparison were reversed. Use functools.cmp_to_key to convert an old-style cmp function to a key function. The built-in sorted function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal --- this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). For sorting examples and a brief sorting tutorial, see sortinghowto . ::: ::: {.decorator} staticmethod Transform a method into a static method. A static method does not receive an implicit first argument. To declare a static method, use this idiom: class C: @staticmethod def f(arg1, arg2, ...): ... The @staticmethod form is a function decorator {.interpreted-text role=\"term\"} -- see function for details. A static method can be called either on the class (such as C.f() ) or on an instance (such as C().f() ). Static methods in Python are similar to those found in Java or C++. Also see classmethod for a variant that is useful for creating alternate class constructors. Like all decorators, it is also possible to call staticmethod as a regular function and do something with its result. This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method. For these cases, use this idiom: class C: builtin_open = staticmethod(open) For more information on static methods, see types {.interpreted-text role=\"ref\"}. ::: ::: {.index} single: string; str() (built-in function) Return a str version of object . See str for details. str is the built-in string class . For general information about strings, see textseq {.interpreted-text role=\"ref\"}. ::: ::: {.function} sum(iterable, /, start=0) Sums start and the items of an iterable from left to right and returns the total. The iterable \\'s items are normally numbers, and the start value is not allowed to be a string. For some use cases, there are good alternatives to sum . The preferred, fast way to concatenate a sequence of strings is by calling ''.join(sequence) . To add floating point values with extended precision, see math.fsum . To concatenate a series of iterables, consider using itertools.chain {.interpreted-text role=\"func\"}. ::: {.versionchanged} 3.8 The start parameter can be specified as a keyword argument. ::: ::: ::: {.function} super([type[, object-or-type]]) Return a proxy object that delegates method calls to a parent or sibling class of type . This is useful for accessing inherited methods that have been overridden in a class. The object-or-type determines the method resolution order to be searched. The search starts from the class right after the type . For example, if ~class.__mro__ of object-or-type is D -> B -> C -> A -> object and the value of type is B , then super searches C -> A -> object . The ~class.__mro__ attribute of the object-or-type lists the method resolution search order used by both getattr and super {.interpreted-text role=\"func\"}. The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, isinstance(obj, type) must be true. If the second argument is a type, issubclass(type2, type) must be true (this is useful for classmethods). There are two typical use cases for super . In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement \\\"diamond diagrams\\\" where multiple base classes implement the same method. Good design dictates that this method have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: class C(B): def method(self, arg): super().method(arg) # This does the same thing as: # super(C, self).method(arg) In addition to method lookups, super also works for attribute lookups. One possible use case for this is calling descriptors <descriptor> in a parent or sibling class. Note that super is implemented as part of the binding process for explicit dotted attribute lookups such as super().__getitem__(name) . It does so by implementing its own __getattribute__ method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, super is undefined for implicit lookups using statements or operators such as super()[name] . Also note that, aside from the zero argument form, super is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using super , see guide to using super() . Rather than being a function, tuple is actually an immutable sequence type, as documented in typesseq-tuple and typesseq . ::: ::: {.type(object) .type(name, .bases, .dict)} ::: {.index} object: type ::: With one argument, return the type of an object . The return value is a type object and generally the same object as returned by object.__class__ <instance.__class__> . The isinstance built-in function is recommended for testing the type of an object, because it takes subclasses into account. With three arguments, return a new type object. This is essentially a dynamic form of the class statement. The name string is the class name and becomes the ~definition.__name__ attribute; the bases tuple itemizes the base classes and becomes the ~class.__bases__ attribute; and the dict dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the ~object.__dict__ attribute. For example, the following two statements create identical type objects: >>> class X: ... a = 1 ... >>> X = type(\\'X\\', (object,), dict(a=1)) See also bltin-type-objects . ::: {.versionchanged} 3.6 Subclasses of type which don\\'t override type.__new__ may no longer use the one-argument form to get the type of an object. ::: ::: ::: {.function} vars([object]) Return the ~object.__dict__ attribute for a module, class, instance, or any other object with a ~object.__dict__ attribute. Objects such as modules and instances have an updateable ~object.__dict__ attribute; however, other objects may have write restrictions on their ~object.__dict__ attributes (for example, classes use a types.MappingProxyType {.interpreted-text role=\"class\"} to prevent direct dictionary updates). Without an argument, vars acts like locals . Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored. A TypeError exception is raised if an object is specified but it doesn\\'t have a ~object.__dict__ attribute (for example, if its class defines the ~object.__slots__ {.interpreted-text role=\"attr\"} attribute). ::: ::: {.function} zip(*iterables, strict=False) Iterate over several iterables in parallel, producing tuples with an item from each one. Example: >>> for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']): ... print(item) ... (1, 'sugar') (2, 'spice') (3, 'everything nice') More formally: zip returns an iterator of tuples, where the i -th tuple contains the i -th element from each of the argument iterables. Another way to think of zip is that it turns rows into columns, and columns into rows. This is similar to transposing a matrix . zip is lazy: The elements won\\'t be processed until the iterable is iterated on, e.g. by a !for loop or by wrapping in a list . One thing to consider is that the iterables passed to zip could have different lengths; sometimes by design, and sometimes because of a bug in the code that prepared these iterables. Python offers three different approaches to dealing with this issue: By default, zip stops when the shortest iterable is exhausted. It will ignore the remaining items in the longer iterables, cutting off the result to the length of the shortest iterable: >>> list(zip(range(3), ['fee', 'fi', 'fo', 'fum'])) [(0, 'fee'), (1, 'fi'), (2, 'fo')] zip is often used in cases where the iterables are assumed to be of equal length. In such cases, it\\'s recommended to use the strict=True option. Its output is the same as regular zip : >>> list(zip(('a', 'b', 'c'), (1, 2, 3), strict=True)) [('a', 1), ('b', 2), ('c', 3)] Unlike the default behavior, it checks that the lengths of iterables are identical, raising a ValueError if they aren\\'t: >>> list(zip(range(3), [\\'fee\\', \\'fi\\', \\'fo\\', \\'fum\\'], strict=True)) Traceback (most recent call last): ... ValueError: zip() argument 2 is longer than argument 1 Without the strict=True argument, any bug that results in iterables of different lengths will be silenced, possibly manifesting as a hard-to-find bug in another part of the program. Shorter iterables can be padded with a constant value to make all the iterables have the same length. This is done by itertools.zip_longest . Edge cases: With a single iterable argument, zip {.interpreted-text role=\"func\"} returns an iterator of 1-tuples. With no arguments, it returns an empty iterator. Tips and tricks: The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n, strict=True) . This repeats the same iterator n times so that each output tuple has the result of n calls to the iterator. This has the effect of dividing the input into n-length chunks. zip in conjunction with the * operator can be used to unzip a list: >>> x = [1, 2, 3] >>> y = [4, 5, 6] >>> list(zip(x, y)) [(1, 4), (2, 5), (3, 6)] >>> x2, y2 = zip(*zip(x, y)) >>> x == list(x2) and y == list(y2) True ::: {.versionchanged} 3.10 Added the strict argument. ::: ::: ::: {.function} __import__(name, globals=None, locals=None, fromlist=(), level=0) ::: {.index} statement: import module: imp ::: ::: {.note} ::: {.admonition-title} Note ::: This is an advanced function that is not needed in everyday Python programming, unlike importlib.import_module {.interpreted-text role=\"func\"}. ::: This function is invoked by the import {.interpreted-text role=\"keyword\"} statement. It can be replaced (by importing the builtins module and assigning to builtins.__import__ ) in order to change semantics of the !import statement, but doing so is strongly discouraged as it is usually simpler to use import hooks (see 302 ) to attain the same goals and does not cause issues with code which assumes the default import implementation is in use. Direct use of __import__ {.interpreted-text role=\"func\"} is also discouraged in favor of importlib.import_module . The function imports the module name , potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name . The standard implementation does not use its locals argument at all, and uses its globals only to determine the package context of the import statement. level specifies whether to use absolute or relative imports. 0 (the default) means only perform absolute imports. Positive values for level indicate the number of parent directories to search relative to the directory of the module calling __import__ {.interpreted-text role=\"func\"} (see 328 for the details). When the name variable is of the form package.module , normally, the top-level package (the name up till the first dot) is returned, not the module named by name . However, when a non-empty fromlist argument is given, the module named by name is returned. For example, the statement import spam results in bytecode resembling the following code: spam = __import__('spam', globals(), locals(), [], 0) The statement import spam.ham results in this call: spam = __import__('spam.ham', globals(), locals(), [], 0) Note how __import__ returns the toplevel module here because this is the object that is bound to a name by the import statement. On the other hand, the statement from spam.ham import eggs, sausage as saus results in : _temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0) eggs = _temp.eggs saus = _temp.sausage Here, the spam.ham module is returned from __import__ . From this object, the names to import are retrieved and assigned to their respective names. If you simply want to import a module (potentially within a package) by name, use importlib.import_module . ::: {.versionchanged} 3.3 Negative values for level are no longer supported (which also changes the default value to 0). ::: ::: {.versionchanged} 3.9 When the command line options -E or -I are being used, the environment variable PYTHONCASEOK is now ignored. ::: ::: Footnotes Note that the parser only accepts the Unix-style end of line convention. If you are reading the code from a file, make sure to use newline conversion mode to convert Windows or Mac-style newlines. \u21a9","title":"Built-in Functions"},{"location":"reference/quickpython/","text":"Module quickpython quickpython A retro interactive coding environment powered by Python and nostalgia View Source \"\"\"**quickpython** A retro interactive coding environment powered by Python and nostalgia \"\"\" __version__ = \"0.1.1\" Sub-modules quickpython.cli quickpython.examples quickpython.extensions","title":"Index"},{"location":"reference/quickpython/#module-quickpython","text":"quickpython A retro interactive coding environment powered by Python and nostalgia View Source \"\"\"**quickpython** A retro interactive coding environment powered by Python and nostalgia \"\"\" __version__ = \"0.1.1\"","title":"Module quickpython"},{"location":"reference/quickpython/#sub-modules","text":"quickpython.cli quickpython.examples quickpython.extensions","title":"Sub-modules"},{"location":"reference/quickpython/cli/","text":"Module quickpython.cli View Source import asyncio import builtins import os import pydoc import sys import types from asyncio import Future , ensure_future from datetime import datetime from functools import partial from pathlib import Path from typing import Optional import black import isort from prompt_toolkit import Application from prompt_toolkit.completion import PathCompleter from prompt_toolkit.filters import Condition from prompt_toolkit.formatted_text import AnyFormattedText , Template from prompt_toolkit.key_binding.key_bindings import KeyBindings from prompt_toolkit.layout.containers import ( AnyContainer , ConditionalContainer , Container , DynamicContainer , Float , HSplit , VSplit , Window , ) from prompt_toolkit.layout.dimension import AnyDimension , Dimension from prompt_toolkit.layout.layout import Layout from prompt_toolkit.layout.menus import CompletionsMenu from prompt_toolkit.output.color_depth import ColorDepth from prompt_toolkit.search import start_search from prompt_toolkit.shortcuts import clear , message_dialog from prompt_toolkit.styles import Style from prompt_toolkit.widgets import ( Dialog , MenuContainer , MenuItem , SearchToolbar , TextArea , ) from prompt_toolkit.widgets.base import Border , Button , Label from quickpython import __version__ , extensions ABOUT_MESSAGE = f \"\"\"QuickPython version {__version__} Copyright (c) 2020 Timothy Crosley. Few rights reserved. MIT Licensed. Simultanously distributed to the US and Canada. And you know, the rest of the world. A productive parody. Made in Seattle. \"\"\" kb = KeyBindings () eb = KeyBindings () current_file : Optional [ Path ] = None default_isort_config = isort . Config ( settings_path = os . getcwd ()) if default_isort_config == isort . settings . DEFAULT_CONFIG : default_isort_config = isort . Config ( profile = \"black\" , float_to_top = True ) default_black_config_file = black . find_pyproject_toml (( os . getcwd (),)) if default_black_config_file : default_black_config = black . parse_pyproject_toml ( default_black_config_file ) else : default_black_config = {} default_black_config = {} isort_config : isort . Config = default_isort_config black_config : dict = default_black_config code_frame_style = Style . from_dict ({ \"frame.label\" : \"bg:#AAAAAA fg:#0000aa\" }) style = Style . from_dict ( { \"menu-bar\" : \"bg:#aaaaaa black bold\" , \"menu-bar.selected-item\" : \"bg:black #aaaaaa bold\" , \"menu\" : \"bg:#aaaaaa black bold\" , \"menu.border shadow\" : \"black\" , \"shadow\" : \"bg:black\" , \"dialog\" : \"bg:#0000AA\" , \"frame.label\" : \"fg:#AAAAAA bold\" , \"dialog frame.label\" : \"fg:black bold bg:#AAAAAA\" , \"code-frame frame.label\" : \"bg:#AAAAAA fg:#0000aa\" , \"dialog.body\" : \"bg:#AAAAAA fg:#000000\" , \"dialog shadow\" : \"bg:#000000\" , \"scrollbar.background\" : \"bg:#AAAAAA\" , \"scrollbar.button\" : \"bg:black fg:black\" , \"scrollbar.arrow\" : \"bg:#AAAAAA fg:black bold\" , \"\" : \"bg:#0000AA fg:#AAAAAA bold\" , } ) @kb.add ( \"escape\" ) def _ ( event ): \"\"\"Focus the menu\"\"\" if event . app . layout . has_focus ( root_container . window ): event . app . layout . focus ( code ) else : event . app . layout . focus ( root_container . window ) def format_code ( contents : str ) -> str : return black_format_code ( isort_format_code ( contents )) def isort_format_code ( contents : str ) -> str : return isort . code ( contents , config = isort_config ) class TextInputDialog : def __init__ ( self , title = \"\" , label_text = \"\" , completer = None ): self . future = Future () def accept_text ( buf ): app . layout . focus ( ok_button ) buf . complete_state = None return True def accept (): self . future . set_result ( self . text_area . text ) def cancel (): self . future . set_result ( None ) self . text_area = TextArea ( completer = completer , multiline = False , width = Dimension ( preferred = 40 ), accept_handler = accept_text , ) ok_button = Button ( text = \"OK\" , handler = accept ) cancel_button = Button ( text = \"Cancel\" , handler = cancel ) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = label_text ), self . text_area ]), buttons = [ ok_button , cancel_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog class MessageDialog : def __init__ ( self , title , text ): self . future = Future () def set_done (): self . future . set_result ( None ) ok_button = Button ( text = \"OK\" , handler = ( lambda : set_done ())) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = text )]), buttons = [ ok_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog async def show_dialog_as_float ( dialog ): \" Coroutine. \" float_ = Float ( content = dialog ) root_container . floats . insert ( 0 , float_ ) focused_before = app . layout . current_window app . layout . focus ( dialog ) result = await dialog . future app . layout . focus ( focused_before ) if float_ in root_container . floats : root_container . floats . remove ( float_ ) return result @kb.add ( \"c-o\" ) def open_file ( event = None ): async def coroutine (): global current_file global isort_config global black_config open_dialog = TextInputDialog ( title = \"Open file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( open_dialog ) if filename is not None : current_file = Path ( filename ) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} try : with open ( current_file , \"r\" , encoding = \"utf8\" ) as new_file_conent : code . buffer . text = new_file_conent . read () open_file_frame . title = current_file . name feedback ( f \"Successfully opened {current_file}\" ) except IOError as error : feedback ( f \"Error: {error}\" ) ensure_future ( coroutine ()) def save_as_file (): async def coroutine (): global current_file global isort_config global black_config save_dialog = TextInputDialog ( title = \"Save file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( save_dialog ) if filename is not None : current_file = Path ( filename ) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} if not current_file . suffixes and not current_file . exists (): current_file = current_file . with_suffix ( \".py\" ) open_file_frame . title = current_file . name save_file () ensure_future ( coroutine ()) def feedback ( text ): immediate . buffer . text = text def black_format_code ( contents : str ) -> str : \"\"\"Formats the given import section using black.\"\"\" try : immediate . buffer . text = \"\" return black . format_file_contents ( contents , fast = True , mode = black . FileMode ( ** black_config ) ) except black . NothingChanged : return contents except Exception as error : immediate . buffer . text = str ( error ) return contents def new ( content = \"\" ): \"\"\"Creates a new file buffer.\"\"\" global current_file global isort_config global black_config current_file = None isort_config = default_isort_config black_config = default_black_config code . buffer . text = content open_file_frame . title = \"Untitled\" feedback ( \"\" ) @kb.add ( \"c-q\" ) def exit ( event = None ): \"\"\"Triggers the request to close QPython cleanly.\"\"\" app . exit () @Condition def is_code_focused () -> bool : return app . layout . has_focus ( code ) @kb.add ( \"tab\" ) def indent ( event ): event . app . current_buffer . insert_text ( \" \" ) @kb.add ( \"enter\" , filter = is_code_focused ) def enter ( event ): buffer = event . app . current_buffer buffer . insert_text ( \" \\n \" ) if ( current_file and \".py\" not in current_file . suffixes and \".pyi\" not in current_file . suffixes ): return old_cursor_position = buffer . cursor_position if old_cursor_position == 0 : return end_position = buffer . text . rfind ( \" \\n \" , 0 , old_cursor_position ) + 1 code , rest = buffer . text [: end_position ], buffer . text [ end_position :] if len ( code ) < 2 or ( code [ - 1 ] == \" \\n \" and code [ - 2 ] == \" \\n \" ): return formatted_code = format_code ( code ) difference = len ( formatted_code ) - len ( code ) buffer . text = formatted_code + rest buffer . cursor_position = old_cursor_position + difference @kb.add ( \"c-s\" ) def save_file ( event = None ): if not current_file : save_as_file () return buffer = app . current_buffer buffer . text = format_code ( buffer . text ) current_file . write_text ( buffer . text , encoding = \"utf8\" ) immediate . buffer . text = f \"Successfully saved {current_file}\" async def _run_buffer ( debug : bool = False ): buffer_filename = f \"{current_file or 'buffer'}.qpython\" with open ( buffer_filename , \"w\" ) as buffer_file : user_code = app . current_buffer . text if not user_code . endswith ( \" \\n \" ): user_code += \" \\n \" with_qpython_injected = isort . code ( user_code , add_imports = [ \"import quickpython.extensions\" ] ) buffer_file . write ( isort_format_code ( with_qpython_injected )) if debug : buffer_file . write ( \"breakpoint()\" ) try : clear () await app . run_system_command ( f 'PYTHONBREAKPOINT=ipdb.set_trace {sys.executable} \"{buffer_filename}\"' ) finally : os . remove ( buffer_filename ) async def _view_buffer (): clear () await app . run_system_command ( \"echo ''\" ) @kb.add ( \"c-r\" ) @kb.add ( \"f5\" ) def run_buffer ( event = None ): asyncio . ensure_future ( _run_buffer ()) def debug (): asyncio . ensure_future ( _run_buffer ( debug = True )) def view_buffer ( event = None ): asyncio . ensure_future ( _view_buffer ()) @kb.add ( \"c-z\" ) def undo ( event = None ): code . buffer . undo () def cut (): data = code . buffer . cut_selection () app . clipboard . set_data ( data ) def copy (): data = code . buffer . copy_selection () app . clipboard . set_data ( data ) def delete (): code . buffer . cut_selection () def paste (): code . buffer . paste_clipboard_data ( app . clipboard . get_data ()) @kb.add ( \"c-a\" ) def select_all ( event = None ): code . buffer . cursor_position = 0 code . buffer . start_selection () code . buffer . cursor_position = len ( code . buffer . text ) def insert_time_and_date (): code . buffer . insert_text ( datetime . now () . isoformat ()) search_toolbar = SearchToolbar () code = TextArea ( scrollbar = True , wrap_lines = False , focus_on_click = True , line_numbers = True , search_field = search_toolbar , ) code . window . right_margins [ 0 ] . up_arrow_symbol = \"\u2191\" # type: ignore code . window . right_margins [ 0 ] . down_arrow_symbol = \"\u2193\" # type: ignore class CodeFrame : \"\"\"A custom frame for the quick python code container to match desired styling\"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), Label ( lambda : Template ( \" {} \" ) . format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ], padding = 0 , ), ], width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container class ImmediateFrame : \"\"\" Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the `body` and `title` attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. \"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = \"\u251c\" ), fill ( char = Border . HORIZONTAL ), # Notice: we use `Template` here, because `self.title` can be an # `HTML` object for instance. Label ( lambda : Template ( \" {} \" ) . format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = \"\u2524\" ), ], height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ], padding = 0 , ), ], width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container open_file_frame = CodeFrame ( HSplit ( [ # One window that holds the BufferControl with the default buffer on # the left. code , # A vertical line in the middle. We explicitly specify the width, to # make sure that the layout engine will not try to divide the whole # width by three for all these windows. The window will simply fill its # content by repeating this character. ], ), title = \"Untitled\" , style = \"class:code-frame\" , ) @kb.add ( \"c-g\" ) def goto ( event = None ): async def coroutine (): dialog = TextInputDialog ( title = \"Go to line\" , label_text = \"Line number:\" ) line_number = await show_dialog_as_float ( dialog ) if line_number is None : return try : line_number = int ( line_number ) except ValueError : feedback ( \"Invalid line number\" ) else : code . buffer . cursor_position = ( code . buffer . document . translate_row_col_to_index ( line_number - 1 , 0 ) ) ensure_future ( coroutine ()) def replace_text (): async def coroutine (): to_replace_dialog = TextInputDialog ( title = \"Text to Replace\" , label_text = \"original:\" ) replacement_dialog = TextInputDialog ( title = \"Replace With\" , label_text = \"replacement:\" ) to_replace = await show_dialog_as_float ( to_replace_dialog ) if to_replace is None : return replacement = await show_dialog_as_float ( replacement_dialog ) if replacement is None : return code . buffer . text = format_code ( code . buffer . text . replace ( to_replace , replacement ) ) ensure_future ( coroutine ()) def about (): async def coroutine (): await show_dialog_as_float ( MessageDialog ( \"About QuickPython\" , ABOUT_MESSAGE )) ensure_future ( coroutine ()) def add_function (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Function\" , label_text = \"Function name:\" ) function_name = await show_dialog_as_float ( dialog ) if not function_name : return code . buffer . insert_text ( f \"\"\" def {function_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f \"\"\" class {class_name}: def __init__(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_data_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Data Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f ''' @dataclass class {class_name}: \"\"\"Comment\"\"\" ''' ) code . buffer . text = isort . code ( code . buffer . text , add_imports = [ \"from dataclasses import dataclass\" ], float_to_top = True , ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" def {method_name}(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_static_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Static Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @staticmethod def {method_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_class_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @classmethod def {method_name}(cls): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) @kb.add ( \"c-f\" ) def search ( event = None ): start_search ( code . control ) def search_next ( event = None ): search_state = app . current_search_state cursor_position = code . buffer . get_search_position ( search_state , include_current_position = False ) code . buffer . cursor_position = cursor_position def example ( game_name : str ): import inspect from quickpython import examples def expand_example (): new ( inspect . getsource ( getattr ( examples , game_name ))) return expand_example def built_in_functions (): docs = [ pydoc . render_doc ( builtin , renderer = pydoc . plaintext ) . split ( \" \\n \" , 1 )[ 1 ] for builtin_name , builtin in vars ( builtins ) . items () if type ( builtin ) in ( types . FunctionType , types . BuiltinFunctionType ) and not builtin_name . startswith ( \"_\" ) ] new ( \" \\n \" . join ( docs )) QLabel = partial ( Label , dont_extend_width = True ) SPACE = QLabel ( \" \" ) immediate = TextArea () root_container = MenuContainer ( body = HSplit ( [ open_file_frame , search_toolbar , ImmediateFrame ( immediate , title = \"Immediate\" , height = 5 , style = \"fg:#AAAAAA bold\" , ), VSplit ( [ QLabel ( \"<F1=Help>\" ), SPACE , QLabel ( \"<F5=Run>\" ), SPACE , QLabel ( \"<CTRL+R=Run>\" ), ], style = \"bg:#00AAAA fg:white bold\" , height = 1 , ), ] ), menu_items = [ MenuItem ( \" File \" , children = [ MenuItem ( \"New...\" , handler = new ), MenuItem ( \"Open...\" , handler = open_file ), MenuItem ( \"Save\" , handler = save_file ), MenuItem ( \"Save as...\" , handler = save_as_file ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"Exit\" , handler = exit ), ], ), MenuItem ( \" Edit \" , children = [ MenuItem ( \"Undo\" , handler = undo ), MenuItem ( \"Cut\" , handler = cut ), MenuItem ( \"Copy\" , handler = copy ), MenuItem ( \"Paste\" , handler = paste ), MenuItem ( \"Delete\" , handler = delete ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"Go To\" , handler = goto ), MenuItem ( \"Select All\" , handler = select_all ), MenuItem ( \"Add Time/Date\" , handler = insert_time_and_date ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"New Function\" , handler = add_function ), MenuItem ( \"New Class\" , handler = add_class ), MenuItem ( \"New Data Class\" , handler = add_data_class ), MenuItem ( \"New Method\" , handler = add_method ), MenuItem ( \"New Static Method\" , handler = add_static_method ), MenuItem ( \"New Class Method\" , handler = add_class_method ), ], ), MenuItem ( \" View \" , children = [ MenuItem ( \"Output Screen\" , handler = view_buffer )], ), MenuItem ( \" Search \" , children = [ MenuItem ( \"Find (CTRL+F)\" , handler = search ), MenuItem ( \"Repeat last find\" , handler = search_next ), MenuItem ( \"Change\" , handler = replace_text ), ], ), MenuItem ( \" Run \" , children = [ MenuItem ( \"Start (F5)\" , handler = run_buffer ), MenuItem ( \"Debug\" , handler = debug ), ], ), MenuItem ( \" Examples \" , children = [ MenuItem ( \"Connect\" , handler = example ( \"connect\" )), MenuItem ( \"Eight Puzzle\" , handler = example ( \"eightpuzzle\" )), MenuItem ( \"Hang Man\" , handler = example ( \"hangman\" )), MenuItem ( \"Memory\" , handler = example ( \"memory\" )), MenuItem ( \"Minesweeper\" , handler = example ( \"minesweeper\" )), MenuItem ( \"Simon\" , handler = example ( \"simon\" )), MenuItem ( \"Tic Tac Toe\" , handler = example ( \"tictactoe\" )), MenuItem ( \"Towers\" , handler = example ( \"towers\" )), MenuItem ( \"Zig Zag\" , handler = example ( \"zigzag\" )), MenuItem ( \"Uno\" , handler = example ( \"uno\" )), ], ), MenuItem ( \" Help \" , children = [ MenuItem ( \"About\" , handler = about ), MenuItem ( \"Built-in Functions\" , handler = built_in_functions ), ], ), ], floats = [ Float ( xcursor = True , ycursor = True , content = CompletionsMenu ( max_height = 16 , scroll_offset = 1 ), ), ], key_bindings = kb , ) layout = Layout ( root_container ) app : Application = Application ( layout = layout , full_screen = True , mouse_support = True , style = style , enable_page_navigation_bindings = True , color_depth = ColorDepth . DEPTH_8_BIT , ) def start ( argv = None ): global current_file global isort_config argv = sys . argv if argv is None else argv if len ( sys . argv ) > 2 : sys . exit ( \"Usage: qpython [filename]\" ) elif len ( sys . argv ) == 2 : current_file = Path ( sys . argv [ 1 ]) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) open_file_frame . title = current_file . name if current_file . exists (): with current_file . open ( encoding = \"utf8\" ) as open_file : code . buffer . text = open_file . read () else : message_dialog ( title = \"Welcome to\" , text = ABOUT_MESSAGE , style = style , ) . run () app . layout . focus ( code . buffer ) app . run () if __name__ == \"__main__\" : start () Variables ABOUT_MESSAGE QLabel SPACE black_config code code_frame_style current_file default_black_config default_black_config_file default_isort_config eb immediate kb layout open_file_frame root_container search_toolbar style Functions about def about ( ) View Source def about (): async def coroutine (): await show_dialog_as_float ( MessageDialog ( \"About QuickPython\" , ABOUT_MESSAGE )) ensure_future ( coroutine ()) add_class def add_class ( ) View Source def add_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f \"\"\" class {class_name}: def __init__(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) add_class_method def add_class_method ( ) View Source def add_class_method () : async def coroutine () : dialog = TextInputDialog ( title = \"Add Class Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @classmethod def {method_name}(cls): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) add_data_class def add_data_class ( ) View Source def add_data_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Data Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f ''' @dataclass class {class_name}: \"\"\"Comment\"\"\" ''' ) code . buffer . text = isort . code ( code . buffer . text , add_imports = [ \"from dataclasses import dataclass\" ], float_to_top = True , ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) add_function def add_function ( ) View Source def add_function (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Function\" , label_text = \"Function name:\" ) function_name = await show_dialog_as_float ( dialog ) if not function_name : return code . buffer . insert_text ( f \"\"\" def {function_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) add_method def add_method ( ) View Source def add_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" def {method_name}(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) add_static_method def add_static_method ( ) View Source def add_static_method () : async def coroutine () : dialog = TextInputDialog ( title = \"Add Static Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @staticmethod def {method_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) black_format_code def black_format_code ( contents : str ) -> str Formats the given import section using black. View Source def black_format_code ( contents : str ) -> str : \"\"\"Formats the given import section using black.\"\"\" try : immediate . buffer . text = \"\" return black . format_file_contents ( contents , fast = True , mode = black . FileMode ( ** black_config ) ) except black . NothingChanged : return contents except Exception as error : immediate . buffer . text = str ( error ) return contents built_in_functions def built_in_functions ( ) View Source def built_in_functions (): docs = [ pydoc . render_doc ( builtin , renderer = pydoc . plaintext ) . split ( \" \\n \" , 1 )[ 1 ] for builtin_name , builtin in vars ( builtins ) . items () if type ( builtin ) in ( types . FunctionType , types . BuiltinFunctionType ) and not builtin_name . startswith ( \"_\" ) ] new ( \" \\n \" . join ( docs )) copy def copy ( ) View Source def copy (): data = code . buffer . copy_selection () app . clipboard . set_data ( data ) cut def cut ( ) View Source def cut (): data = code . buffer . cut_selection () app . clipboard . set_data ( data ) debug def debug ( ) View Source def debug (): asyncio . ensure_future ( _run_buffer ( debug = True )) delete def delete ( ) View Source def delete (): code . buffer . cut_selection () enter def enter ( event ) View Source @kb . add ( \"enter\" , filter = is_code_focused ) def enter ( event ) : buffer = event . app . current_buffer buffer . insert_text ( \"\\n\" ) if ( current_file and \".py\" not in current_file . suffixes and \".pyi\" not in current_file . suffixes ) : return old_cursor_position = buffer . cursor_position if old_cursor_position == 0 : return end_position = buffer . text . rfind ( \"\\n\" , 0 , old_cursor_position ) + 1 code , rest = buffer . text [ :end_position ] , buffer . text [ end_position: ] if len ( code ) < 2 or ( code [ -1 ] == \"\\n\" and code [ -2 ] == \"\\n\" ) : return formatted_code = format_code ( code ) difference = len ( formatted_code ) - len ( code ) buffer . text = formatted_code + rest buffer . cursor_position = old_cursor_position + difference example def example ( game_name : str ) View Source def example ( game_name : str ): import inspect from quickpython import examples def expand_example (): new ( inspect . getsource ( getattr ( examples , game_name ))) return expand_example exit def exit ( event = None ) Triggers the request to close QPython cleanly. View Source @kb . add ( \"c-q\" ) def exit ( event = None ) : \"\"\"Triggers the request to close QPython cleanly.\"\"\" app . exit () feedback def feedback ( text ) View Source def feedback ( text ): immediate . buffer . text = text format_code def format_code ( contents : str ) -> str View Source def format_code ( contents : str ) -> str : return black_format_code ( isort_format_code ( contents )) goto def goto ( event = None ) View Source @kb . add ( \"c-g\" ) def goto ( event = None ) : async def coroutine () : dialog = TextInputDialog ( title = \"Go to line\" , label_text = \"Line number:\" ) line_number = await show_dialog_as_float ( dialog ) if line_number is None : return try : line_number = int ( line_number ) except ValueError : feedback ( \"Invalid line number\" ) else : code . buffer . cursor_position = ( code . buffer . document . translate_row_col_to_index ( line_number - 1 , 0 ) ) ensure_future ( coroutine ()) indent def indent ( event ) View Source @kb . add ( \"tab\" ) def indent ( event ) : event . app . current_buffer . insert_text ( \" \" ) insert_time_and_date def insert_time_and_date ( ) View Source def insert_time_and_date (): code . buffer . insert_text ( datetime . now (). isoformat ()) isort_format_code def isort_format_code ( contents : str ) -> str View Source def isort_format_code ( contents : str ) -> str : return isort . code ( contents , config = isort_config ) new def new ( content = '' ) Creates a new file buffer. View Source def new ( content = \"\" ): \"\"\"Creates a new file buffer.\"\"\" global current_file global isort_config global black_config current_file = None isort_config = default_isort_config black_config = default_black_config code . buffer . text = content open_file_frame . title = \"Untitled\" feedback ( \"\" ) open_file def open_file ( event = None ) View Source @kb . add ( \"c-o\" ) def open_file ( event = None ) : async def coroutine () : global current_file global isort_config global black_config open_dialog = TextInputDialog ( title = \"Open file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( open_dialog ) if filename is not None : current_file = Path ( filename ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} try : with open ( current_file , \"r\" , encoding = \"utf8\" ) as new_file_conent : code . buffer . text = new_file_conent . read () open_file_frame . title = current_file . name feedback ( f \"Successfully opened {current_file}\" ) except IOError as error : feedback ( f \"Error: {error}\" ) ensure_future ( coroutine ()) paste def paste ( ) View Source def paste (): code . buffer . paste_clipboard_data ( app . clipboard . get_data ()) replace_text def replace_text ( ) View Source def replace_text (): async def coroutine (): to_replace_dialog = TextInputDialog ( title = \"Text to Replace\" , label_text = \"original:\" ) replacement_dialog = TextInputDialog ( title = \"Replace With\" , label_text = \"replacement:\" ) to_replace = await show_dialog_as_float ( to_replace_dialog ) if to_replace is None : return replacement = await show_dialog_as_float ( replacement_dialog ) if replacement is None : return code . buffer . text = format_code ( code . buffer . text . replace ( to_replace , replacement ) ) ensure_future ( coroutine ()) run_buffer def run_buffer ( event = None ) View Source @kb . add ( \"c-r\" ) @kb . add ( \"f5\" ) def run_buffer ( event = None ) : asyncio . ensure_future ( _run_buffer ()) save_as_file def save_as_file ( ) View Source def save_as_file (): async def coroutine (): global current_file global isort_config global black_config save_dialog = TextInputDialog ( title = \"Save file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( save_dialog ) if filename is not None : current_file = Path ( filename ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} if not current_file . suffixes and not current_file . exists (): current_file = current_file . with_suffix ( \".py\" ) open_file_frame . title = current_file . name save_file () ensure_future ( coroutine ()) save_file def save_file ( event = None ) View Source @kb . add ( \"c-s\" ) def save_file ( event = None ) : if not current_file : save_as_file () return buffer = app . current_buffer buffer . text = format_code ( buffer . text ) current_file . write_text ( buffer . text , encoding = \"utf8\" ) immediate . buffer . text = f \"Successfully saved {current_file}\" search def search ( event = None ) View Source @kb . add ( \"c-f\" ) def search ( event = None ) : start_search ( code . control ) search_next def search_next ( event = None ) View Source def search_next ( event = None ): search_state = app . current_search_state cursor_position = code . buffer . get_search_position ( search_state , include_current_position = False ) code . buffer . cursor_position = cursor_position select_all def select_all ( event = None ) View Source @kb . add ( \"c-a\" ) def select_all ( event = None ) : code . buffer . cursor_position = 0 code . buffer . start_selection () code . buffer . cursor_position = len ( code . buffer . text ) show_dialog_as_float def show_dialog_as_float ( dialog ) Coroutine. View Source async def show_dialog_as_float ( dialog ): \" Coroutine. \" float_ = Float ( content = dialog ) root_container . floats . insert ( 0 , float_ ) focused_before = app . layout . current_window app . layout . focus ( dialog ) result = await dialog . future app . layout . focus ( focused_before ) if float_ in root_container . floats : root_container . floats . remove ( float_ ) return result start def start ( argv = None ) View Source def start ( argv = None ) : global current_file global isort_config argv = sys . argv if argv is None else argv if len ( sys . argv ) > 2 : sys . exit ( \"Usage: qpython [filename]\" ) elif len ( sys . argv ) == 2 : current_file = Path ( sys . argv [ 1 ] ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) open_file_frame . title = current_file . name if current_file . exists () : with current_file . open ( encoding = \"utf8\" ) as open_file : code . buffer . text = open_file . read () else : message_dialog ( title = \"Welcome to\" , text = ABOUT_MESSAGE , style = style , ). run () app . layout . focus ( code . buffer ) app . run () undo def undo ( event = None ) View Source @kb . add ( \"c-z\" ) def undo ( event = None ) : code . buffer . undo () view_buffer def view_buffer ( event = None ) View Source def view_buffer ( event = None ): asyncio . ensure_future ( _view_buffer ()) Classes CodeFrame class CodeFrame ( body : Union [ prompt_toolkit . layout . containers . Container , ForwardRef ( 'MagicContainer' )], title : Union [ str , ForwardRef ( 'MagicFormattedText' ), List [ Union [ Tuple [ str , str ], Tuple [ str , str , Callable [[ prompt_toolkit . mouse_events . MouseEvent ], NoneType ]]]], Callable [[], Any ], NoneType ] = '' , style : str = '' , width : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , height : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , key_bindings : Union [ prompt_toolkit . key_binding . key_bindings . KeyBindings , NoneType ] = None , modal : bool = False ) A custom frame for the quick python code container to match desired styling View Source class CodeFrame : \"\"\"A custom frame for the quick python code container to match desired styling\"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill(width=1, height=1, char=Border.TOP_LEFT), fill(char=Border.HORIZONTAL), Label( lambda: Template(\" {} \").format(self.title), style=\"class:frame.label\", dont_extend_width=True, ), fill(char=Border.HORIZONTAL), fill(width=1, height=1, char=Border.TOP_RIGHT), ] , height = 1 , ) top_row_without_title = VSplit ( [ fill(width=1, height=1, char=Border.TOP_LEFT), fill(char=Border.HORIZONTAL), fill(width=1, height=1, char=Border.TOP_RIGHT), ] , height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer(content=top_row_with_title, filter=has_title), ConditionalContainer(content=top_row_without_title, filter=~has_title), VSplit( [ fill(width=1, char=Border.VERTICAL), DynamicContainer(lambda: self.body), fill(width=1, char=Border.VERTICAL), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ] , padding = 0 , ), ] , width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container ImmediateFrame class ImmediateFrame ( body : Union [ prompt_toolkit . layout . containers . Container , ForwardRef ( 'MagicContainer' )], title : Union [ str , ForwardRef ( 'MagicFormattedText' ), List [ Union [ Tuple [ str , str ], Tuple [ str , str , Callable [[ prompt_toolkit . mouse_events . MouseEvent ], NoneType ]]]], Callable [[], Any ], NoneType ] = '' , style : str = '' , width : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , height : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , key_bindings : Union [ prompt_toolkit . key_binding . key_bindings . KeyBindings , NoneType ] = None , modal : bool = False ) Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the body and title attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. View Source class ImmediateFrame : \" \"\" Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the `body` and `title` attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. \"\" \" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = \"\u251c\" ), fill ( char = Border . HORIZONTAL ), # Notice: we use `Template` here, because `self.title` can be an # `HTML` object for instance. Label ( lambda : Template ( \" {} \" ). format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = \"\u2524\" ), ] , height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ] , height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ] , padding = 0 , ), ] , width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container MessageDialog class MessageDialog ( title , text ) View Source class MessageDialog : def __init__ ( self , title , text ) : self . future = Future () def set_done () : self . future . set_result ( None ) ok_button = Button ( text = \"OK\" , handler = ( lambda : set_done ())) self . dialog = Dialog ( title = title , body = HSplit ( [ Label(text=text) ] ), buttons =[ ok_button ] , width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ) : return self . dialog TextInputDialog class TextInputDialog ( title = '' , label_text = '' , completer = None ) View Source class TextInputDialog: def __init__ ( self , title = \"\" , label_text = \"\" , completer = None ): self . future = Future () def accept_text ( buf ): app . layout . focus ( ok_button ) buf . complete_state = None return True def accept (): self . future . set_result ( self . text_area . text ) def cancel (): self . future . set_result ( None ) self . text_area = TextArea ( completer = completer , multiline = False , width = Dimension ( preferred = 40 ), accept_handler = accept_text , ) ok_button = Button ( text = \"OK\" , handler = accept ) cancel_button = Button ( text = \"Cancel\" , handler = cancel ) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = label_text ), self . text_area ]), buttons =[ ok_button , cancel_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog","title":"CLI"},{"location":"reference/quickpython/cli/#module-quickpythoncli","text":"View Source import asyncio import builtins import os import pydoc import sys import types from asyncio import Future , ensure_future from datetime import datetime from functools import partial from pathlib import Path from typing import Optional import black import isort from prompt_toolkit import Application from prompt_toolkit.completion import PathCompleter from prompt_toolkit.filters import Condition from prompt_toolkit.formatted_text import AnyFormattedText , Template from prompt_toolkit.key_binding.key_bindings import KeyBindings from prompt_toolkit.layout.containers import ( AnyContainer , ConditionalContainer , Container , DynamicContainer , Float , HSplit , VSplit , Window , ) from prompt_toolkit.layout.dimension import AnyDimension , Dimension from prompt_toolkit.layout.layout import Layout from prompt_toolkit.layout.menus import CompletionsMenu from prompt_toolkit.output.color_depth import ColorDepth from prompt_toolkit.search import start_search from prompt_toolkit.shortcuts import clear , message_dialog from prompt_toolkit.styles import Style from prompt_toolkit.widgets import ( Dialog , MenuContainer , MenuItem , SearchToolbar , TextArea , ) from prompt_toolkit.widgets.base import Border , Button , Label from quickpython import __version__ , extensions ABOUT_MESSAGE = f \"\"\"QuickPython version {__version__} Copyright (c) 2020 Timothy Crosley. Few rights reserved. MIT Licensed. Simultanously distributed to the US and Canada. And you know, the rest of the world. A productive parody. Made in Seattle. \"\"\" kb = KeyBindings () eb = KeyBindings () current_file : Optional [ Path ] = None default_isort_config = isort . Config ( settings_path = os . getcwd ()) if default_isort_config == isort . settings . DEFAULT_CONFIG : default_isort_config = isort . Config ( profile = \"black\" , float_to_top = True ) default_black_config_file = black . find_pyproject_toml (( os . getcwd (),)) if default_black_config_file : default_black_config = black . parse_pyproject_toml ( default_black_config_file ) else : default_black_config = {} default_black_config = {} isort_config : isort . Config = default_isort_config black_config : dict = default_black_config code_frame_style = Style . from_dict ({ \"frame.label\" : \"bg:#AAAAAA fg:#0000aa\" }) style = Style . from_dict ( { \"menu-bar\" : \"bg:#aaaaaa black bold\" , \"menu-bar.selected-item\" : \"bg:black #aaaaaa bold\" , \"menu\" : \"bg:#aaaaaa black bold\" , \"menu.border shadow\" : \"black\" , \"shadow\" : \"bg:black\" , \"dialog\" : \"bg:#0000AA\" , \"frame.label\" : \"fg:#AAAAAA bold\" , \"dialog frame.label\" : \"fg:black bold bg:#AAAAAA\" , \"code-frame frame.label\" : \"bg:#AAAAAA fg:#0000aa\" , \"dialog.body\" : \"bg:#AAAAAA fg:#000000\" , \"dialog shadow\" : \"bg:#000000\" , \"scrollbar.background\" : \"bg:#AAAAAA\" , \"scrollbar.button\" : \"bg:black fg:black\" , \"scrollbar.arrow\" : \"bg:#AAAAAA fg:black bold\" , \"\" : \"bg:#0000AA fg:#AAAAAA bold\" , } ) @kb.add ( \"escape\" ) def _ ( event ): \"\"\"Focus the menu\"\"\" if event . app . layout . has_focus ( root_container . window ): event . app . layout . focus ( code ) else : event . app . layout . focus ( root_container . window ) def format_code ( contents : str ) -> str : return black_format_code ( isort_format_code ( contents )) def isort_format_code ( contents : str ) -> str : return isort . code ( contents , config = isort_config ) class TextInputDialog : def __init__ ( self , title = \"\" , label_text = \"\" , completer = None ): self . future = Future () def accept_text ( buf ): app . layout . focus ( ok_button ) buf . complete_state = None return True def accept (): self . future . set_result ( self . text_area . text ) def cancel (): self . future . set_result ( None ) self . text_area = TextArea ( completer = completer , multiline = False , width = Dimension ( preferred = 40 ), accept_handler = accept_text , ) ok_button = Button ( text = \"OK\" , handler = accept ) cancel_button = Button ( text = \"Cancel\" , handler = cancel ) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = label_text ), self . text_area ]), buttons = [ ok_button , cancel_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog class MessageDialog : def __init__ ( self , title , text ): self . future = Future () def set_done (): self . future . set_result ( None ) ok_button = Button ( text = \"OK\" , handler = ( lambda : set_done ())) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = text )]), buttons = [ ok_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog async def show_dialog_as_float ( dialog ): \" Coroutine. \" float_ = Float ( content = dialog ) root_container . floats . insert ( 0 , float_ ) focused_before = app . layout . current_window app . layout . focus ( dialog ) result = await dialog . future app . layout . focus ( focused_before ) if float_ in root_container . floats : root_container . floats . remove ( float_ ) return result @kb.add ( \"c-o\" ) def open_file ( event = None ): async def coroutine (): global current_file global isort_config global black_config open_dialog = TextInputDialog ( title = \"Open file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( open_dialog ) if filename is not None : current_file = Path ( filename ) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} try : with open ( current_file , \"r\" , encoding = \"utf8\" ) as new_file_conent : code . buffer . text = new_file_conent . read () open_file_frame . title = current_file . name feedback ( f \"Successfully opened {current_file}\" ) except IOError as error : feedback ( f \"Error: {error}\" ) ensure_future ( coroutine ()) def save_as_file (): async def coroutine (): global current_file global isort_config global black_config save_dialog = TextInputDialog ( title = \"Save file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( save_dialog ) if filename is not None : current_file = Path ( filename ) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} if not current_file . suffixes and not current_file . exists (): current_file = current_file . with_suffix ( \".py\" ) open_file_frame . title = current_file . name save_file () ensure_future ( coroutine ()) def feedback ( text ): immediate . buffer . text = text def black_format_code ( contents : str ) -> str : \"\"\"Formats the given import section using black.\"\"\" try : immediate . buffer . text = \"\" return black . format_file_contents ( contents , fast = True , mode = black . FileMode ( ** black_config ) ) except black . NothingChanged : return contents except Exception as error : immediate . buffer . text = str ( error ) return contents def new ( content = \"\" ): \"\"\"Creates a new file buffer.\"\"\" global current_file global isort_config global black_config current_file = None isort_config = default_isort_config black_config = default_black_config code . buffer . text = content open_file_frame . title = \"Untitled\" feedback ( \"\" ) @kb.add ( \"c-q\" ) def exit ( event = None ): \"\"\"Triggers the request to close QPython cleanly.\"\"\" app . exit () @Condition def is_code_focused () -> bool : return app . layout . has_focus ( code ) @kb.add ( \"tab\" ) def indent ( event ): event . app . current_buffer . insert_text ( \" \" ) @kb.add ( \"enter\" , filter = is_code_focused ) def enter ( event ): buffer = event . app . current_buffer buffer . insert_text ( \" \\n \" ) if ( current_file and \".py\" not in current_file . suffixes and \".pyi\" not in current_file . suffixes ): return old_cursor_position = buffer . cursor_position if old_cursor_position == 0 : return end_position = buffer . text . rfind ( \" \\n \" , 0 , old_cursor_position ) + 1 code , rest = buffer . text [: end_position ], buffer . text [ end_position :] if len ( code ) < 2 or ( code [ - 1 ] == \" \\n \" and code [ - 2 ] == \" \\n \" ): return formatted_code = format_code ( code ) difference = len ( formatted_code ) - len ( code ) buffer . text = formatted_code + rest buffer . cursor_position = old_cursor_position + difference @kb.add ( \"c-s\" ) def save_file ( event = None ): if not current_file : save_as_file () return buffer = app . current_buffer buffer . text = format_code ( buffer . text ) current_file . write_text ( buffer . text , encoding = \"utf8\" ) immediate . buffer . text = f \"Successfully saved {current_file}\" async def _run_buffer ( debug : bool = False ): buffer_filename = f \"{current_file or 'buffer'}.qpython\" with open ( buffer_filename , \"w\" ) as buffer_file : user_code = app . current_buffer . text if not user_code . endswith ( \" \\n \" ): user_code += \" \\n \" with_qpython_injected = isort . code ( user_code , add_imports = [ \"import quickpython.extensions\" ] ) buffer_file . write ( isort_format_code ( with_qpython_injected )) if debug : buffer_file . write ( \"breakpoint()\" ) try : clear () await app . run_system_command ( f 'PYTHONBREAKPOINT=ipdb.set_trace {sys.executable} \"{buffer_filename}\"' ) finally : os . remove ( buffer_filename ) async def _view_buffer (): clear () await app . run_system_command ( \"echo ''\" ) @kb.add ( \"c-r\" ) @kb.add ( \"f5\" ) def run_buffer ( event = None ): asyncio . ensure_future ( _run_buffer ()) def debug (): asyncio . ensure_future ( _run_buffer ( debug = True )) def view_buffer ( event = None ): asyncio . ensure_future ( _view_buffer ()) @kb.add ( \"c-z\" ) def undo ( event = None ): code . buffer . undo () def cut (): data = code . buffer . cut_selection () app . clipboard . set_data ( data ) def copy (): data = code . buffer . copy_selection () app . clipboard . set_data ( data ) def delete (): code . buffer . cut_selection () def paste (): code . buffer . paste_clipboard_data ( app . clipboard . get_data ()) @kb.add ( \"c-a\" ) def select_all ( event = None ): code . buffer . cursor_position = 0 code . buffer . start_selection () code . buffer . cursor_position = len ( code . buffer . text ) def insert_time_and_date (): code . buffer . insert_text ( datetime . now () . isoformat ()) search_toolbar = SearchToolbar () code = TextArea ( scrollbar = True , wrap_lines = False , focus_on_click = True , line_numbers = True , search_field = search_toolbar , ) code . window . right_margins [ 0 ] . up_arrow_symbol = \"\u2191\" # type: ignore code . window . right_margins [ 0 ] . down_arrow_symbol = \"\u2193\" # type: ignore class CodeFrame : \"\"\"A custom frame for the quick python code container to match desired styling\"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), Label ( lambda : Template ( \" {} \" ) . format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ], padding = 0 , ), ], width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container class ImmediateFrame : \"\"\" Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the `body` and `title` attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. \"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = \"\u251c\" ), fill ( char = Border . HORIZONTAL ), # Notice: we use `Template` here, because `self.title` can be an # `HTML` object for instance. Label ( lambda : Template ( \" {} \" ) . format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = \"\u2524\" ), ], height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ], height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ], padding = 0 , ), ], width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container open_file_frame = CodeFrame ( HSplit ( [ # One window that holds the BufferControl with the default buffer on # the left. code , # A vertical line in the middle. We explicitly specify the width, to # make sure that the layout engine will not try to divide the whole # width by three for all these windows. The window will simply fill its # content by repeating this character. ], ), title = \"Untitled\" , style = \"class:code-frame\" , ) @kb.add ( \"c-g\" ) def goto ( event = None ): async def coroutine (): dialog = TextInputDialog ( title = \"Go to line\" , label_text = \"Line number:\" ) line_number = await show_dialog_as_float ( dialog ) if line_number is None : return try : line_number = int ( line_number ) except ValueError : feedback ( \"Invalid line number\" ) else : code . buffer . cursor_position = ( code . buffer . document . translate_row_col_to_index ( line_number - 1 , 0 ) ) ensure_future ( coroutine ()) def replace_text (): async def coroutine (): to_replace_dialog = TextInputDialog ( title = \"Text to Replace\" , label_text = \"original:\" ) replacement_dialog = TextInputDialog ( title = \"Replace With\" , label_text = \"replacement:\" ) to_replace = await show_dialog_as_float ( to_replace_dialog ) if to_replace is None : return replacement = await show_dialog_as_float ( replacement_dialog ) if replacement is None : return code . buffer . text = format_code ( code . buffer . text . replace ( to_replace , replacement ) ) ensure_future ( coroutine ()) def about (): async def coroutine (): await show_dialog_as_float ( MessageDialog ( \"About QuickPython\" , ABOUT_MESSAGE )) ensure_future ( coroutine ()) def add_function (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Function\" , label_text = \"Function name:\" ) function_name = await show_dialog_as_float ( dialog ) if not function_name : return code . buffer . insert_text ( f \"\"\" def {function_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f \"\"\" class {class_name}: def __init__(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_data_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Data Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f ''' @dataclass class {class_name}: \"\"\"Comment\"\"\" ''' ) code . buffer . text = isort . code ( code . buffer . text , add_imports = [ \"from dataclasses import dataclass\" ], float_to_top = True , ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" def {method_name}(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_static_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Static Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @staticmethod def {method_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) def add_class_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @classmethod def {method_name}(cls): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ()) @kb.add ( \"c-f\" ) def search ( event = None ): start_search ( code . control ) def search_next ( event = None ): search_state = app . current_search_state cursor_position = code . buffer . get_search_position ( search_state , include_current_position = False ) code . buffer . cursor_position = cursor_position def example ( game_name : str ): import inspect from quickpython import examples def expand_example (): new ( inspect . getsource ( getattr ( examples , game_name ))) return expand_example def built_in_functions (): docs = [ pydoc . render_doc ( builtin , renderer = pydoc . plaintext ) . split ( \" \\n \" , 1 )[ 1 ] for builtin_name , builtin in vars ( builtins ) . items () if type ( builtin ) in ( types . FunctionType , types . BuiltinFunctionType ) and not builtin_name . startswith ( \"_\" ) ] new ( \" \\n \" . join ( docs )) QLabel = partial ( Label , dont_extend_width = True ) SPACE = QLabel ( \" \" ) immediate = TextArea () root_container = MenuContainer ( body = HSplit ( [ open_file_frame , search_toolbar , ImmediateFrame ( immediate , title = \"Immediate\" , height = 5 , style = \"fg:#AAAAAA bold\" , ), VSplit ( [ QLabel ( \"<F1=Help>\" ), SPACE , QLabel ( \"<F5=Run>\" ), SPACE , QLabel ( \"<CTRL+R=Run>\" ), ], style = \"bg:#00AAAA fg:white bold\" , height = 1 , ), ] ), menu_items = [ MenuItem ( \" File \" , children = [ MenuItem ( \"New...\" , handler = new ), MenuItem ( \"Open...\" , handler = open_file ), MenuItem ( \"Save\" , handler = save_file ), MenuItem ( \"Save as...\" , handler = save_as_file ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"Exit\" , handler = exit ), ], ), MenuItem ( \" Edit \" , children = [ MenuItem ( \"Undo\" , handler = undo ), MenuItem ( \"Cut\" , handler = cut ), MenuItem ( \"Copy\" , handler = copy ), MenuItem ( \"Paste\" , handler = paste ), MenuItem ( \"Delete\" , handler = delete ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"Go To\" , handler = goto ), MenuItem ( \"Select All\" , handler = select_all ), MenuItem ( \"Add Time/Date\" , handler = insert_time_and_date ), MenuItem ( \"-\" , disabled = True ), MenuItem ( \"New Function\" , handler = add_function ), MenuItem ( \"New Class\" , handler = add_class ), MenuItem ( \"New Data Class\" , handler = add_data_class ), MenuItem ( \"New Method\" , handler = add_method ), MenuItem ( \"New Static Method\" , handler = add_static_method ), MenuItem ( \"New Class Method\" , handler = add_class_method ), ], ), MenuItem ( \" View \" , children = [ MenuItem ( \"Output Screen\" , handler = view_buffer )], ), MenuItem ( \" Search \" , children = [ MenuItem ( \"Find (CTRL+F)\" , handler = search ), MenuItem ( \"Repeat last find\" , handler = search_next ), MenuItem ( \"Change\" , handler = replace_text ), ], ), MenuItem ( \" Run \" , children = [ MenuItem ( \"Start (F5)\" , handler = run_buffer ), MenuItem ( \"Debug\" , handler = debug ), ], ), MenuItem ( \" Examples \" , children = [ MenuItem ( \"Connect\" , handler = example ( \"connect\" )), MenuItem ( \"Eight Puzzle\" , handler = example ( \"eightpuzzle\" )), MenuItem ( \"Hang Man\" , handler = example ( \"hangman\" )), MenuItem ( \"Memory\" , handler = example ( \"memory\" )), MenuItem ( \"Minesweeper\" , handler = example ( \"minesweeper\" )), MenuItem ( \"Simon\" , handler = example ( \"simon\" )), MenuItem ( \"Tic Tac Toe\" , handler = example ( \"tictactoe\" )), MenuItem ( \"Towers\" , handler = example ( \"towers\" )), MenuItem ( \"Zig Zag\" , handler = example ( \"zigzag\" )), MenuItem ( \"Uno\" , handler = example ( \"uno\" )), ], ), MenuItem ( \" Help \" , children = [ MenuItem ( \"About\" , handler = about ), MenuItem ( \"Built-in Functions\" , handler = built_in_functions ), ], ), ], floats = [ Float ( xcursor = True , ycursor = True , content = CompletionsMenu ( max_height = 16 , scroll_offset = 1 ), ), ], key_bindings = kb , ) layout = Layout ( root_container ) app : Application = Application ( layout = layout , full_screen = True , mouse_support = True , style = style , enable_page_navigation_bindings = True , color_depth = ColorDepth . DEPTH_8_BIT , ) def start ( argv = None ): global current_file global isort_config argv = sys . argv if argv is None else argv if len ( sys . argv ) > 2 : sys . exit ( \"Usage: qpython [filename]\" ) elif len ( sys . argv ) == 2 : current_file = Path ( sys . argv [ 1 ]) . resolve () isort_config = isort . Config ( settings_path = current_file . parent ) open_file_frame . title = current_file . name if current_file . exists (): with current_file . open ( encoding = \"utf8\" ) as open_file : code . buffer . text = open_file . read () else : message_dialog ( title = \"Welcome to\" , text = ABOUT_MESSAGE , style = style , ) . run () app . layout . focus ( code . buffer ) app . run () if __name__ == \"__main__\" : start ()","title":"Module quickpython.cli"},{"location":"reference/quickpython/cli/#variables","text":"ABOUT_MESSAGE QLabel SPACE black_config code code_frame_style current_file default_black_config default_black_config_file default_isort_config eb immediate kb layout open_file_frame root_container search_toolbar style","title":"Variables"},{"location":"reference/quickpython/cli/#functions","text":"","title":"Functions"},{"location":"reference/quickpython/cli/#about","text":"def about ( ) View Source def about (): async def coroutine (): await show_dialog_as_float ( MessageDialog ( \"About QuickPython\" , ABOUT_MESSAGE )) ensure_future ( coroutine ())","title":"about"},{"location":"reference/quickpython/cli/#add_class","text":"def add_class ( ) View Source def add_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f \"\"\" class {class_name}: def __init__(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_class"},{"location":"reference/quickpython/cli/#add_class_method","text":"def add_class_method ( ) View Source def add_class_method () : async def coroutine () : dialog = TextInputDialog ( title = \"Add Class Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @classmethod def {method_name}(cls): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_class_method"},{"location":"reference/quickpython/cli/#add_data_class","text":"def add_data_class ( ) View Source def add_data_class (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Data Class\" , label_text = \"Class name:\" ) class_name = await show_dialog_as_float ( dialog ) if not class_name : return code . buffer . insert_text ( f ''' @dataclass class {class_name}: \"\"\"Comment\"\"\" ''' ) code . buffer . text = isort . code ( code . buffer . text , add_imports = [ \"from dataclasses import dataclass\" ], float_to_top = True , ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_data_class"},{"location":"reference/quickpython/cli/#add_function","text":"def add_function ( ) View Source def add_function (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Function\" , label_text = \"Function name:\" ) function_name = await show_dialog_as_float ( dialog ) if not function_name : return code . buffer . insert_text ( f \"\"\" def {function_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_function"},{"location":"reference/quickpython/cli/#add_method","text":"def add_method ( ) View Source def add_method (): async def coroutine (): dialog = TextInputDialog ( title = \"Add Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" def {method_name}(self): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_method"},{"location":"reference/quickpython/cli/#add_static_method","text":"def add_static_method ( ) View Source def add_static_method () : async def coroutine () : dialog = TextInputDialog ( title = \"Add Static Method\" , label_text = \"Method name:\" ) method_name = await show_dialog_as_float ( dialog ) if not method_name : return code . buffer . insert_text ( f \"\"\" @staticmethod def {method_name}(): pass \"\"\" ) code . buffer . text = format_code ( code . buffer . text ) ensure_future ( coroutine ())","title":"add_static_method"},{"location":"reference/quickpython/cli/#black_format_code","text":"def black_format_code ( contents : str ) -> str Formats the given import section using black. View Source def black_format_code ( contents : str ) -> str : \"\"\"Formats the given import section using black.\"\"\" try : immediate . buffer . text = \"\" return black . format_file_contents ( contents , fast = True , mode = black . FileMode ( ** black_config ) ) except black . NothingChanged : return contents except Exception as error : immediate . buffer . text = str ( error ) return contents","title":"black_format_code"},{"location":"reference/quickpython/cli/#built_in_functions","text":"def built_in_functions ( ) View Source def built_in_functions (): docs = [ pydoc . render_doc ( builtin , renderer = pydoc . plaintext ) . split ( \" \\n \" , 1 )[ 1 ] for builtin_name , builtin in vars ( builtins ) . items () if type ( builtin ) in ( types . FunctionType , types . BuiltinFunctionType ) and not builtin_name . startswith ( \"_\" ) ] new ( \" \\n \" . join ( docs ))","title":"built_in_functions"},{"location":"reference/quickpython/cli/#copy","text":"def copy ( ) View Source def copy (): data = code . buffer . copy_selection () app . clipboard . set_data ( data )","title":"copy"},{"location":"reference/quickpython/cli/#cut","text":"def cut ( ) View Source def cut (): data = code . buffer . cut_selection () app . clipboard . set_data ( data )","title":"cut"},{"location":"reference/quickpython/cli/#debug","text":"def debug ( ) View Source def debug (): asyncio . ensure_future ( _run_buffer ( debug = True ))","title":"debug"},{"location":"reference/quickpython/cli/#delete","text":"def delete ( ) View Source def delete (): code . buffer . cut_selection ()","title":"delete"},{"location":"reference/quickpython/cli/#enter","text":"def enter ( event ) View Source @kb . add ( \"enter\" , filter = is_code_focused ) def enter ( event ) : buffer = event . app . current_buffer buffer . insert_text ( \"\\n\" ) if ( current_file and \".py\" not in current_file . suffixes and \".pyi\" not in current_file . suffixes ) : return old_cursor_position = buffer . cursor_position if old_cursor_position == 0 : return end_position = buffer . text . rfind ( \"\\n\" , 0 , old_cursor_position ) + 1 code , rest = buffer . text [ :end_position ] , buffer . text [ end_position: ] if len ( code ) < 2 or ( code [ -1 ] == \"\\n\" and code [ -2 ] == \"\\n\" ) : return formatted_code = format_code ( code ) difference = len ( formatted_code ) - len ( code ) buffer . text = formatted_code + rest buffer . cursor_position = old_cursor_position + difference","title":"enter"},{"location":"reference/quickpython/cli/#example","text":"def example ( game_name : str ) View Source def example ( game_name : str ): import inspect from quickpython import examples def expand_example (): new ( inspect . getsource ( getattr ( examples , game_name ))) return expand_example","title":"example"},{"location":"reference/quickpython/cli/#exit","text":"def exit ( event = None ) Triggers the request to close QPython cleanly. View Source @kb . add ( \"c-q\" ) def exit ( event = None ) : \"\"\"Triggers the request to close QPython cleanly.\"\"\" app . exit ()","title":"exit"},{"location":"reference/quickpython/cli/#feedback","text":"def feedback ( text ) View Source def feedback ( text ): immediate . buffer . text = text","title":"feedback"},{"location":"reference/quickpython/cli/#format_code","text":"def format_code ( contents : str ) -> str View Source def format_code ( contents : str ) -> str : return black_format_code ( isort_format_code ( contents ))","title":"format_code"},{"location":"reference/quickpython/cli/#goto","text":"def goto ( event = None ) View Source @kb . add ( \"c-g\" ) def goto ( event = None ) : async def coroutine () : dialog = TextInputDialog ( title = \"Go to line\" , label_text = \"Line number:\" ) line_number = await show_dialog_as_float ( dialog ) if line_number is None : return try : line_number = int ( line_number ) except ValueError : feedback ( \"Invalid line number\" ) else : code . buffer . cursor_position = ( code . buffer . document . translate_row_col_to_index ( line_number - 1 , 0 ) ) ensure_future ( coroutine ())","title":"goto"},{"location":"reference/quickpython/cli/#indent","text":"def indent ( event ) View Source @kb . add ( \"tab\" ) def indent ( event ) : event . app . current_buffer . insert_text ( \" \" )","title":"indent"},{"location":"reference/quickpython/cli/#insert_time_and_date","text":"def insert_time_and_date ( ) View Source def insert_time_and_date (): code . buffer . insert_text ( datetime . now (). isoformat ())","title":"insert_time_and_date"},{"location":"reference/quickpython/cli/#isort_format_code","text":"def isort_format_code ( contents : str ) -> str View Source def isort_format_code ( contents : str ) -> str : return isort . code ( contents , config = isort_config )","title":"isort_format_code"},{"location":"reference/quickpython/cli/#new","text":"def new ( content = '' ) Creates a new file buffer. View Source def new ( content = \"\" ): \"\"\"Creates a new file buffer.\"\"\" global current_file global isort_config global black_config current_file = None isort_config = default_isort_config black_config = default_black_config code . buffer . text = content open_file_frame . title = \"Untitled\" feedback ( \"\" )","title":"new"},{"location":"reference/quickpython/cli/#open_file","text":"def open_file ( event = None ) View Source @kb . add ( \"c-o\" ) def open_file ( event = None ) : async def coroutine () : global current_file global isort_config global black_config open_dialog = TextInputDialog ( title = \"Open file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( open_dialog ) if filename is not None : current_file = Path ( filename ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} try : with open ( current_file , \"r\" , encoding = \"utf8\" ) as new_file_conent : code . buffer . text = new_file_conent . read () open_file_frame . title = current_file . name feedback ( f \"Successfully opened {current_file}\" ) except IOError as error : feedback ( f \"Error: {error}\" ) ensure_future ( coroutine ())","title":"open_file"},{"location":"reference/quickpython/cli/#paste","text":"def paste ( ) View Source def paste (): code . buffer . paste_clipboard_data ( app . clipboard . get_data ())","title":"paste"},{"location":"reference/quickpython/cli/#replace_text","text":"def replace_text ( ) View Source def replace_text (): async def coroutine (): to_replace_dialog = TextInputDialog ( title = \"Text to Replace\" , label_text = \"original:\" ) replacement_dialog = TextInputDialog ( title = \"Replace With\" , label_text = \"replacement:\" ) to_replace = await show_dialog_as_float ( to_replace_dialog ) if to_replace is None : return replacement = await show_dialog_as_float ( replacement_dialog ) if replacement is None : return code . buffer . text = format_code ( code . buffer . text . replace ( to_replace , replacement ) ) ensure_future ( coroutine ())","title":"replace_text"},{"location":"reference/quickpython/cli/#run_buffer","text":"def run_buffer ( event = None ) View Source @kb . add ( \"c-r\" ) @kb . add ( \"f5\" ) def run_buffer ( event = None ) : asyncio . ensure_future ( _run_buffer ())","title":"run_buffer"},{"location":"reference/quickpython/cli/#save_as_file","text":"def save_as_file ( ) View Source def save_as_file (): async def coroutine (): global current_file global isort_config global black_config save_dialog = TextInputDialog ( title = \"Save file\" , label_text = \"Enter the path of a file:\" , completer = PathCompleter (), ) filename = await show_dialog_as_float ( save_dialog ) if filename is not None : current_file = Path ( filename ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) black_config_file = black . find_pyproject_toml (( current_file ,)) if black_config_file : black_config = black . parse_pyproject_toml ( black_config_file ) else : black_config = {} if not current_file . suffixes and not current_file . exists (): current_file = current_file . with_suffix ( \".py\" ) open_file_frame . title = current_file . name save_file () ensure_future ( coroutine ())","title":"save_as_file"},{"location":"reference/quickpython/cli/#save_file","text":"def save_file ( event = None ) View Source @kb . add ( \"c-s\" ) def save_file ( event = None ) : if not current_file : save_as_file () return buffer = app . current_buffer buffer . text = format_code ( buffer . text ) current_file . write_text ( buffer . text , encoding = \"utf8\" ) immediate . buffer . text = f \"Successfully saved {current_file}\"","title":"save_file"},{"location":"reference/quickpython/cli/#search","text":"def search ( event = None ) View Source @kb . add ( \"c-f\" ) def search ( event = None ) : start_search ( code . control )","title":"search"},{"location":"reference/quickpython/cli/#search_next","text":"def search_next ( event = None ) View Source def search_next ( event = None ): search_state = app . current_search_state cursor_position = code . buffer . get_search_position ( search_state , include_current_position = False ) code . buffer . cursor_position = cursor_position","title":"search_next"},{"location":"reference/quickpython/cli/#select_all","text":"def select_all ( event = None ) View Source @kb . add ( \"c-a\" ) def select_all ( event = None ) : code . buffer . cursor_position = 0 code . buffer . start_selection () code . buffer . cursor_position = len ( code . buffer . text )","title":"select_all"},{"location":"reference/quickpython/cli/#show_dialog_as_float","text":"def show_dialog_as_float ( dialog ) Coroutine. View Source async def show_dialog_as_float ( dialog ): \" Coroutine. \" float_ = Float ( content = dialog ) root_container . floats . insert ( 0 , float_ ) focused_before = app . layout . current_window app . layout . focus ( dialog ) result = await dialog . future app . layout . focus ( focused_before ) if float_ in root_container . floats : root_container . floats . remove ( float_ ) return result","title":"show_dialog_as_float"},{"location":"reference/quickpython/cli/#start","text":"def start ( argv = None ) View Source def start ( argv = None ) : global current_file global isort_config argv = sys . argv if argv is None else argv if len ( sys . argv ) > 2 : sys . exit ( \"Usage: qpython [filename]\" ) elif len ( sys . argv ) == 2 : current_file = Path ( sys . argv [ 1 ] ). resolve () isort_config = isort . Config ( settings_path = current_file . parent ) open_file_frame . title = current_file . name if current_file . exists () : with current_file . open ( encoding = \"utf8\" ) as open_file : code . buffer . text = open_file . read () else : message_dialog ( title = \"Welcome to\" , text = ABOUT_MESSAGE , style = style , ). run () app . layout . focus ( code . buffer ) app . run ()","title":"start"},{"location":"reference/quickpython/cli/#undo","text":"def undo ( event = None ) View Source @kb . add ( \"c-z\" ) def undo ( event = None ) : code . buffer . undo ()","title":"undo"},{"location":"reference/quickpython/cli/#view_buffer","text":"def view_buffer ( event = None ) View Source def view_buffer ( event = None ): asyncio . ensure_future ( _view_buffer ())","title":"view_buffer"},{"location":"reference/quickpython/cli/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/cli/#codeframe","text":"class CodeFrame ( body : Union [ prompt_toolkit . layout . containers . Container , ForwardRef ( 'MagicContainer' )], title : Union [ str , ForwardRef ( 'MagicFormattedText' ), List [ Union [ Tuple [ str , str ], Tuple [ str , str , Callable [[ prompt_toolkit . mouse_events . MouseEvent ], NoneType ]]]], Callable [[], Any ], NoneType ] = '' , style : str = '' , width : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , height : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , key_bindings : Union [ prompt_toolkit . key_binding . key_bindings . KeyBindings , NoneType ] = None , modal : bool = False ) A custom frame for the quick python code container to match desired styling View Source class CodeFrame : \"\"\"A custom frame for the quick python code container to match desired styling\"\"\" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill(width=1, height=1, char=Border.TOP_LEFT), fill(char=Border.HORIZONTAL), Label( lambda: Template(\" {} \").format(self.title), style=\"class:frame.label\", dont_extend_width=True, ), fill(char=Border.HORIZONTAL), fill(width=1, height=1, char=Border.TOP_RIGHT), ] , height = 1 , ) top_row_without_title = VSplit ( [ fill(width=1, height=1, char=Border.TOP_LEFT), fill(char=Border.HORIZONTAL), fill(width=1, height=1, char=Border.TOP_RIGHT), ] , height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer(content=top_row_with_title, filter=has_title), ConditionalContainer(content=top_row_without_title, filter=~has_title), VSplit( [ fill(width=1, char=Border.VERTICAL), DynamicContainer(lambda: self.body), fill(width=1, char=Border.VERTICAL), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ] , padding = 0 , ), ] , width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container","title":"CodeFrame"},{"location":"reference/quickpython/cli/#immediateframe","text":"class ImmediateFrame ( body : Union [ prompt_toolkit . layout . containers . Container , ForwardRef ( 'MagicContainer' )], title : Union [ str , ForwardRef ( 'MagicFormattedText' ), List [ Union [ Tuple [ str , str ], Tuple [ str , str , Callable [[ prompt_toolkit . mouse_events . MouseEvent ], NoneType ]]]], Callable [[], Any ], NoneType ] = '' , style : str = '' , width : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , height : Union [ NoneType , int , prompt_toolkit . layout . dimension . Dimension , Callable [[], Any ]] = None , key_bindings : Union [ prompt_toolkit . key_binding . key_bindings . KeyBindings , NoneType ] = None , modal : bool = False ) Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the body and title attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. View Source class ImmediateFrame : \" \"\" Draw a border around any container, optionally with a title text. Changing the title and body of the frame is possible at runtime by assigning to the `body` and `title` attributes of this class. :param body: Another container object. :param title: Text to be displayed in the top of the frame (can be formatted text). :param style: Style string to be applied to this widget. \"\" \" def __init__ ( self , body : AnyContainer , title : AnyFormattedText = \"\" , style : str = \"\" , width : AnyDimension = None , height : AnyDimension = None , key_bindings : Optional [ KeyBindings ] = None , modal : bool = False , ) -> None : self . title = title self . body = body fill = partial ( Window , style = \"class:frame.border\" ) style = \"class:frame \" + style top_row_with_title = VSplit ( [ fill ( width = 1 , height = 1 , char = \"\u251c\" ), fill ( char = Border . HORIZONTAL ), # Notice: we use `Template` here, because `self.title` can be an # `HTML` object for instance. Label ( lambda : Template ( \" {} \" ). format ( self . title ), style = \"class:frame.label\" , dont_extend_width = True , ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = \"\u2524\" ), ] , height = 1 , ) top_row_without_title = VSplit ( [ fill ( width = 1 , height = 1 , char = Border . TOP_LEFT ), fill ( char = Border . HORIZONTAL ), fill ( width = 1 , height = 1 , char = Border . TOP_RIGHT ), ] , height = 1 , ) @Condition def has_title () -> bool : return bool ( self . title ) self . container = HSplit ( [ ConditionalContainer ( content = top_row_with_title , filter = has_title ), ConditionalContainer ( content = top_row_without_title , filter =~ has_title ), VSplit ( [ fill ( width = 1 , char = Border . VERTICAL ), DynamicContainer ( lambda : self . body ), fill ( width = 1 , char = Border . VERTICAL ), # Padding is required to make sure that if the content is # too small, the right frame border is still aligned. ] , padding = 0 , ), ] , width = width , height = height , style = style , key_bindings = key_bindings , modal = modal , ) def __pt_container__ ( self ) -> Container : return self . container","title":"ImmediateFrame"},{"location":"reference/quickpython/cli/#messagedialog","text":"class MessageDialog ( title , text ) View Source class MessageDialog : def __init__ ( self , title , text ) : self . future = Future () def set_done () : self . future . set_result ( None ) ok_button = Button ( text = \"OK\" , handler = ( lambda : set_done ())) self . dialog = Dialog ( title = title , body = HSplit ( [ Label(text=text) ] ), buttons =[ ok_button ] , width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ) : return self . dialog","title":"MessageDialog"},{"location":"reference/quickpython/cli/#textinputdialog","text":"class TextInputDialog ( title = '' , label_text = '' , completer = None ) View Source class TextInputDialog: def __init__ ( self , title = \"\" , label_text = \"\" , completer = None ): self . future = Future () def accept_text ( buf ): app . layout . focus ( ok_button ) buf . complete_state = None return True def accept (): self . future . set_result ( self . text_area . text ) def cancel (): self . future . set_result ( None ) self . text_area = TextArea ( completer = completer , multiline = False , width = Dimension ( preferred = 40 ), accept_handler = accept_text , ) ok_button = Button ( text = \"OK\" , handler = accept ) cancel_button = Button ( text = \"Cancel\" , handler = cancel ) self . dialog = Dialog ( title = title , body = HSplit ([ Label ( text = label_text ), self . text_area ]), buttons =[ ok_button , cancel_button ], width = Dimension ( preferred = 80 ), modal = True , ) def __pt_container__ ( self ): return self . dialog","title":"TextInputDialog"},{"location":"reference/quickpython/extensions/","text":"Module quickpython.extensions View Source import builtins import platform from subprocess import run def beep (): \"\"\"Makes a beep sound.\"\"\" print ( \" \\a \" , end = \"\" ) def cls (): \"\"\"Clears the screen.\"\"\" if platform . system () . lower () == \"windows\" : run ( \"cls\" ) else : run ( \"clear\" ) def main ( function ): \"\"\"A decorator that causes the decorated function to be started if ran directly but not if imported. \"\"\" caller = inspect . stack ()[ 1 ] module = inspect . getmodule ( caller [ 0 ]) if module . __name__ == \"__main__\" : function () return function setattr ( builtins , \"beep\" , beep ) setattr ( builtins , \"cls\" , cls ) setattr ( builtins , \"main\" , main ) Functions beep def beep ( ) Makes a beep sound. View Source def beep (): \"\"\"Makes a beep sound.\"\"\" print ( \"\\a\" , end = \"\" ) cls def cls ( ) Clears the screen. View Source def cls (): \"\"\"Clears the screen.\"\"\" if platform . system (). lower () == \"windows\" : run ( \"cls\" ) else : run ( \"clear\" ) main def main ( function ) A decorator that causes the decorated function to be started if ran directly but not if imported. View Source def main ( function ): \"\"\"A decorator that causes the decorated function to be started if ran directly but not if imported. \"\"\" caller = inspect . stack ()[ 1 ] module = inspect . getmodule ( caller [ 0 ]) if module . __name__ == \"__main__\" : function () return function","title":"Extensions"},{"location":"reference/quickpython/extensions/#module-quickpythonextensions","text":"View Source import builtins import platform from subprocess import run def beep (): \"\"\"Makes a beep sound.\"\"\" print ( \" \\a \" , end = \"\" ) def cls (): \"\"\"Clears the screen.\"\"\" if platform . system () . lower () == \"windows\" : run ( \"cls\" ) else : run ( \"clear\" ) def main ( function ): \"\"\"A decorator that causes the decorated function to be started if ran directly but not if imported. \"\"\" caller = inspect . stack ()[ 1 ] module = inspect . getmodule ( caller [ 0 ]) if module . __name__ == \"__main__\" : function () return function setattr ( builtins , \"beep\" , beep ) setattr ( builtins , \"cls\" , cls ) setattr ( builtins , \"main\" , main )","title":"Module quickpython.extensions"},{"location":"reference/quickpython/extensions/#functions","text":"","title":"Functions"},{"location":"reference/quickpython/extensions/#beep","text":"def beep ( ) Makes a beep sound. View Source def beep (): \"\"\"Makes a beep sound.\"\"\" print ( \"\\a\" , end = \"\" )","title":"beep"},{"location":"reference/quickpython/extensions/#cls","text":"def cls ( ) Clears the screen. View Source def cls (): \"\"\"Clears the screen.\"\"\" if platform . system (). lower () == \"windows\" : run ( \"cls\" ) else : run ( \"clear\" )","title":"cls"},{"location":"reference/quickpython/extensions/#main","text":"def main ( function ) A decorator that causes the decorated function to be started if ran directly but not if imported. View Source def main ( function ): \"\"\"A decorator that causes the decorated function to be started if ran directly but not if imported. \"\"\" caller = inspect . stack ()[ 1 ] module = inspect . getmodule ( caller [ 0 ]) if module . __name__ == \"__main__\" : function () return function","title":"main"},{"location":"reference/quickpython/examples/","text":"Module quickpython.examples View Source from quickpython.examples import ( connect , eightpuzzle , hangman , memory , minesweeper , simon , tictactoe , towers , uno , zigzag , ) __all__ = [ \"connect\" , \"eightpuzzle\" , \"hangman\" , \"memory\" , \"minesweeper\" , \"simon\" , \"tictactoe\" , \"towers\" , \"uno\" , \"zigzag\" , ] Sub-modules quickpython.examples.connect quickpython.examples.eightpuzzle quickpython.examples.hangman quickpython.examples.memory quickpython.examples.minesweeper quickpython.examples.simon quickpython.examples.tictactoe quickpython.examples.towers quickpython.examples.uno quickpython.examples.zigzag Variables connect eightpuzzle hangman memory minesweeper simon tictactoe towers uno zigzag","title":"Index"},{"location":"reference/quickpython/examples/#module-quickpythonexamples","text":"View Source from quickpython.examples import ( connect , eightpuzzle , hangman , memory , minesweeper , simon , tictactoe , towers , uno , zigzag , ) __all__ = [ \"connect\" , \"eightpuzzle\" , \"hangman\" , \"memory\" , \"minesweeper\" , \"simon\" , \"tictactoe\" , \"towers\" , \"uno\" , \"zigzag\" , ]","title":"Module quickpython.examples"},{"location":"reference/quickpython/examples/#sub-modules","text":"quickpython.examples.connect quickpython.examples.eightpuzzle quickpython.examples.hangman quickpython.examples.memory quickpython.examples.minesweeper quickpython.examples.simon quickpython.examples.tictactoe quickpython.examples.towers quickpython.examples.uno quickpython.examples.zigzag","title":"Sub-modules"},{"location":"reference/quickpython/examples/#variables","text":"connect eightpuzzle hangman memory minesweeper simon tictactoe towers uno zigzag","title":"Variables"},{"location":"reference/quickpython/examples/connect/","text":"Module quickpython.examples.connect /games/connect.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/connect.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import pyfiglet class Connect : def __init__ ( self ): \"\"\" initializes a `Connect` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : game = Connect () game . start () Classes Connect class Connect ( ) View Source class Connect : def __init__ ( self ) : \" \"\" initializes a `Connect` object \"\" \" pass def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Connect"},{"location":"reference/quickpython/examples/connect/#module-quickpythonexamplesconnect","text":"/games/connect.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/connect.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import pyfiglet class Connect : def __init__ ( self ): \"\"\" initializes a `Connect` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : game = Connect () game . start ()","title":"Module quickpython.examples.connect"},{"location":"reference/quickpython/examples/connect/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/connect/#connect","text":"class Connect ( ) View Source class Connect : def __init__ ( self ) : \" \"\" initializes a `Connect` object \"\" \" pass def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip ()","title":"Connect"},{"location":"reference/quickpython/examples/connect/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/connect/#game","text":"def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass","title":"game"},{"location":"reference/quickpython/examples/connect/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Connect 4\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/eightpuzzle/","text":"Module quickpython.examples.eightpuzzle /games/eightpuzzle.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/eightpuzzle.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import pyfiglet class EightPuzzle : def __init__ ( self ): \"\"\" initializes an `EightPuzzle` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : game = EightPuzzle () game . start () Classes EightPuzzle class EightPuzzle ( ) View Source class EightPuzzle : def __init__ ( self ) : \" \"\" initializes an `EightPuzzle` object \"\" \" pass def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Eightpuzzle"},{"location":"reference/quickpython/examples/eightpuzzle/#module-quickpythonexampleseightpuzzle","text":"/games/eightpuzzle.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/eightpuzzle.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import pyfiglet class EightPuzzle : def __init__ ( self ): \"\"\" initializes an `EightPuzzle` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : game = EightPuzzle () game . start ()","title":"Module quickpython.examples.eightpuzzle"},{"location":"reference/quickpython/examples/eightpuzzle/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/eightpuzzle/#eightpuzzle","text":"class EightPuzzle ( ) View Source class EightPuzzle : def __init__ ( self ) : \" \"\" initializes an `EightPuzzle` object \"\" \" pass def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip ()","title":"EightPuzzle"},{"location":"reference/quickpython/examples/eightpuzzle/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/eightpuzzle/#game","text":"def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass","title":"game"},{"location":"reference/quickpython/examples/eightpuzzle/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Eight Puzzle\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/hangman/","text":"Module quickpython.examples.hangman /games/hangman.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/hangman.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import pyfiglet HANGMAN = [ \"\"\" \\t----- \\t| | \\t| \\t| \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| -+- \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+- \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | \\t| | \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | | \\t| | \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | | \\t| | | \\t| \\t-------- \"\"\" , ] class Hangman : def __init__ ( self ): \"\"\" initializes a `Hangman` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character . upper () for character in random . choice ( WORDS )] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ): cls () print ( HANGMAN [ - lives ]) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter; \\n > \" ) . upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha (): self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )): if letter == word [ i ]: word_hidden [ i ] = letter cls () print ( HANGMAN [ - lives ]) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" ) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () WORDS = \"\"\"aa ab ad ag ah ai am an as at aw ax ay ba be bi bo by da do dy ee eh el em en er ex fa ga gi go ha he hi ho id if in io is it ka ki la li lo ma me mo my no of oh oi ok on op or ou ow ox oz pa pi re so te to uh um up us wa we ye yo act add age ago aid aim air all and any arm art ask bad bag ban bar bay bed bet bid big bin bit box boy bus but buy bye can cap car cat cow cry cup cut dad day die dig dog dot dry due dvd dye ear eat egg end etc eye fan far fat fee few fit fix flu fly for fry fun fur gap gas get god gun guy hat her hip his hit hot how ice ill ink jam job joy key kid lab law lay leg let lid lie lip lot low mad map may mix mrs net new nor not now nut odd off oil old one our out owe own pan pay pen per pet pig pin pop pot pub put raw red rid rob rub run say sea see set sew sex she shy sir sit six sky son sum sun tap tax tea ten the tie tin tip toe ton too top toy try two use van via war way web wet who why win yes yet you able acid aged ally also area arms army atom aunt away baby back bake ball band bank base bath beak bear beat beef beer bell belt bend bent best bike bill bird bite blow blue boat body boil bomb bone book boot bore born boss both bowl burn bury bush busy cake call calm camp card care case cash cast cell cent chat chew chin chip chop city clap club coal coat code coin cold come cook cool cope copy core cost crop curb cure curl damp dare dark data date dead deaf deal dear debt deep deny desk diet dirt disc dish disk door down drag draw drop drug drum dull dump dust duty each earn ease east easy edge else euro even ever evil exam exit face fact fail fair fall fame farm fast fear feed feel file fill film find fine fire firm fish five flag flat flow fold food foot fork form four free from fuel full fund gain game gate gear gift girl give glad glue goal gold good grab gram grey grow hair half hall hand hang hard harm hate have head heal hear heat heel hell help here hero hers hide high hill hire hold hole holy home hook hope horn host hour huge hunt hurt idea inch into iron item join joke july jump june just keen keep kick kill kind king kiss knee knit knot know lack lady lake lamp land lane last late lazy lead leaf lean left lend less life lift like line link list live load loan lock long look lord lose loss lost loud love luck lump lung mail main make male mall many mark mass mate meal mean meat meet melt menu mere mess mild mile milk mind mine miss mood moon more most move much must nail name navy near neat neck need nest news next nice nine none nose note obey once only onto open ours oven over pace pack page pain pair pale park part pass past path peak pick pile pill pink pint pipe pity plan play plot plug plus poem pole pool poor port pose post pour pray pull pure push quit race rail rain rank rare rate read real rear rely rent rest rice rich ride ring rise risk road rock role roll roof room root rope rude ruin rule rush sack safe sail sale salt same sand save seal seat seed seek seem self sell send ship shoe shop shot show shut sick side sign silk sing sink site size skin slip slow snow soap sock soft soil some song soon sore sort soul soup sour spin spot star stay step stir stop such suck suit sure swim tail take talk tall tank tape task taxi team tear tell tend tent term test text than that them then they thin this thus tidy till time tiny tire tone tool tour town trap tree trip true tube tune turn twin type tyre ugly undo unit upon urge used user vary vast very view vote wage wait wake walk wall want warm warn wash wave weak wear week well west what when whom wide wife wild will wind wine wing wire wise wish with wood wool word work wrap zero zone about above abuse actor adapt admit adopt adult after again agent agree ahead alarm alive allow alone along aloud alter amaze among amuse anger angle angry ankle annoy apart apple apply april argue arise armed arrow aside avoid awake award aware awful badly based basic basis beach beard begin below birth black blade blame blank blind block blood board bored bound brain brand brave bread break breed brick brief bring broad brown brush build bunch burnt burst buyer cable candy carry catch cause cease chain chair chart chase cheap cheat check cheek chest chief child civil claim class clean clear clerk click climb clock close cloth cloud coach coast cough could count court cover crack craft crash crazy cream crime crisp cross crowd crown cruel crush curly curve cycle daily dance death decay delay depth diary dirty doubt dozen draft drama dream dress drink drive drunk dying early earth eight elbow elect email empty enemy enjoy enter entry equal error essay event every exact exist extra faint faith false fancy fault fence fetch fever field fifth fifty fight final first fixed flame flash flesh float flood floor flour focus force forty found frame fresh front fruit fully funny giant glass glove goods grade grain grand grant grass grave great green group guard guess guest guide habit happy heart heavy hello hence hobby horse hotel house human hurry ideal image imply index inner issue jeans jelly joint judge juice knife knock label large later laugh layer learn least leave legal lemon level light limit litre local logic loose lorry lover loyal lucky lunch magic major march marry match maybe mayor means media metal metre might minor mixed model money month moral motor mount mouse mouth movie music naked nerve never newly niece night ninth noise noisy north novel nurse occur ocean oddly offer often onion order organ other ought outer owner paint panel pants paper party pause peace penny phase phone photo piano piece pilot pitch place plain plane plant plate point pound power press price pride prime print prior prize proof proud prove punch pupil queen quick quiet quite quote radio raise range rapid reach react ready refer relax reply rider right rival river rough round route royal ruler rural sadly salad salty sauce scale scare scene score screw sense serve seven shade shake shall shame shape share sharp shave sheep sheet shelf shell shift shine shiny shirt shock shoot short shout sight silly since sixth sixty skill skirt sleep slice slide slope small smart smash smell smile smoke snake solid solve sorry sound south space spare speak speed spell spend spice spicy spite split spoil spoon sport spray staff stage stair stamp stand stare start state steal steam steel steep steer stick stiff still sting stock stone store storm story stove strip study stuff style sugar swear sweat sweep sweet swell swing table taste teach tenth thank their theme there thick thief thing think third three throw thumb tight tired title today tonne tooth topic total touch tough towel tower trace track trade train treat trend trial trick truck truly trust truth twice twist uncle under union unite until upper upset urban usual valid value video virus visit vital voice waist waste watch water weigh wheel where which while white whole whose width woman world worry worse worst worth would wound wrist write wrong young yours youth abroad absent absorb accent accept access accuse across action active actual adjust admire advert advice advise affair affect afford afraid agency allied almost always amazed amount amused animal annual answer anyone anyway appeal appear around arrest arrive artist asleep aspect assist assume assure attach attack attend august author autumn battle beauty become before behalf behave behind belief belong beside better beyond bitter blonde border boring borrow bother bottle bottom branch breast breath bridge bright broken bubble budget bullet butter button called calmly camera cancel cancer cannot career carpet carrot castle centre chance change charge cheese cheque choice choose church cinema circle clever client closed closet coffee coldly colour column comedy commit common cooker cookie corner cotton county couple course cousin create credit crisis curved custom damage dancer danger debate decade decide deeply defeat defend define degree demand depend derive desert design desire detail device devote dinner direct divide doctor dollar double drawer driver during easily editor effect effort eighth eighty either eleven emerge empire employ enable ending energy engage engine enough ensure entire escape estate except excite excuse expand expect expert export expose extend extent factor fairly family famous farmer fasten father faucet favour fellow female figure finely finger finish firmly flight flower flying follow forest forget formal former fourth freely freeze friday fridge friend frozen future gallon gamble garage garden gather gentle gently global govern ground growth guilty hammer handle happen hardly hatred health heaven height highly hollow honest honour horror humour hungry ignore impact import impose income indeed indoor infect inform injure injury insect insert inside insist insult intend invent invest invite island itself jacket junior kindly labour latest latter launch lawyer leader league length lesson letter likely liquid listen little lively living locate lonely loudly lovely mainly manage manner market master matter medium member memory mental merely method midday middle minute mirror mobile modern moment monday mostly mother motion moving murder muscle museum myself narrow nation nature nearby nearly neatly needle nephew nicely ninety nobody normal notice number object obtain occupy offend office online openly oppose option orange origin output packet palace parent partly pencil people pepper period permit person petrol phrase planet player please plenty pocket poetry poison police policy polish polite potato powder praise prayer prefer pretty priest prince prison profit prompt proper public punish purely purple pursue racing rarely rather reader really reason recall recent reckon record reduce reform refuse regard region regret reject relate relief remain remark remind remote remove rented repair repeat report rescue resist resort result retain retire return reveal review revise reward rhythm riding rubber rudely ruined rumour runner safely safety sailor salary sample saving scared scheme school scream screen search season second secret sector secure select senate senior series settle severe sewing sexual shadow shaped should shower signal silent silver simple simply singer single sister sleeve slight slowly smooth social softly source speech spider spirit spoken spread spring square stable statue status steady sticky strain stream street stress strict strike string stripe stroke strong studio stupid sudden suffer suited summer sunday supply surely survey switch symbol system tablet tackle target thanks theirs theory thirty though thread threat throat ticket tiring toilet tomato tongue travel tunnel twelve twenty unable unfair unique united unkind unless unlike unload untidy upside upward urgent useful valley varied victim vision volume waiter wallet wander warmth wealth weapon weekly weight widely wildly window winner winter within wonder wooden worker writer yellow abandon ability absence account achieve acquire actress address advance against airport alarmed alcohol already amazing amusing analyse ancient angrily annoyed another anxiety anxious anybody appoint approve arrange arrival article ashamed attempt attract average awfully awkward baggage balance bandage bargain barrier battery because bedroom believe beneath benefit betting between bicycle billion biology biscuit breathe briefly broadly brother cabinet camping capable capital captain capture careful ceiling central century certain chamber channel chapter charity cheaply chemist chicken citizen classic clearly climate closely clothes collect college combine comfort command comment company compare compete complex concept concern concert conduct confine confirm confuse connect consist consult contact contain content contest context control convert cooking correct cottage council counter country courage covered cracked crowded crucial culture curious current curtain customs cycling dancing declare decline defence delight deliver dentist deposit depress deserve despite destroy develop devoted diagram diamond digital discuss disease disgust dislike dismiss display disturb divorce drawing dressed driving eastern economy edition educate elderly elegant element emotion engaged enquiry entitle equally evening exactly examine example excited exclude exhibit expense explain explode explore express extreme factory failure faintly farming farther fashion feather feature federal feeling fifteen finally finance fishing flavour flooded folding foreign forever forgive formula fortune forward freedom freshly funeral further garbage general genuine goodbye gradual grammar gravely greatly grocery happily harmful healthy hearing heating heavily helpful herself highway himself history holiday housing however hundred hunting husband illegal illness imagine immoral impress improve include indoors initial injured install instead involve january jealous jointly journey justice justify killing kitchen knitted lacking largely leading leather lecture legally library licence license lightly limited locally located logical loosely luggage machine manager married massive maximum meaning measure medical meeting mention message million mineral minimum missing mistake mixture monitor morally morning musical mystery natural neither nervous network noisily nothing nowhere nuclear observe obvious october offence offense officer opening operate opinion opposed outdoor outline outside overall package painful painter partner passage passing patient pattern payment pension perfect perform perhaps physics picture plastic pleased pointed popular possess precise predict prepare present pretend prevent primary printer private problem proceed process produce product program project promise promote propose protect protest proudly provide publish purpose qualify quality quarter quickly quietly railway rapidly reading reality realize receipt receive recover reflect refusal regular related relaxed release remains removal replace request require reserve resolve respect respond restore retired reverse rightly roughly rounded routine rubbish running sadness sailing satisfy science scratch section senator serious servant service session seventh seventy several shallow sharply shelter shocked shortly silence similar sincere singing sixteen skilful skilled smoking society soldier somehow someone speaker special squeeze station steeply stiffly stomach strange stretch striped student subject succeed success suggest summary support suppose surface surname survive suspect swallow sweater swollen teacher tension theatre thickly thirsty thought through tightly tonight totally tourist towards trading traffic trouble tuesday twelfth twisted typical unhappy uniform unknown unlucky unusual upwards useless usually variety various vehicle venture version victory village violent visible visitor walking warning washing weather website wedding weekend welcome western whereas whether whisper whistle whoever willing winning without witness working worried worship wounded writing written wrongly absolute academic accident accurate actively activity actually addition adequate advanced aircraft alarming alphabet although ambition analysis announce annoying annually anything anywhere apparent approach approval argument artistic attached attitude attorney audience backward bacteria bathroom birthday bitterly brightly building business campaign capacity careless category ceremony chairman cheerful chemical climbing clothing collapse coloured commonly complain complete computer conclude concrete confined conflict confront confused congress consider constant consumer continue contract contrast convince coughing covering creature criminal critical cultural cupboard customer daughter december decision decorate decrease definite delicate delivery describe deserted detailed directly director disabled disagree disaster discount discover dissolve distance district division divorced document domestic dominate downward dramatic economic educated eighteen election electric elevator eleventh emphasis employee employer engineer enormous entirely entrance envelope estimate everyone evidence exchange exciting exercise expected facility faithful familiar farthest february festival fiftieth fighting finished flooding football forecast formally formerly fortieth fourteen frequent friendly frighten function gambling gasoline generate generous governor grandson grateful harmless headache hesitate homework honestly hospital humorous identify identity incident increase indicate indirect industry infected informal innocent instance intended interest interior internal internet interval involved irritate keyboard kilogram kindness knitting language location magazine maintain majority marriage matching material medicine mentally midnight military minister ministry minority mistaken moreover mountain movement multiply musician national negative nineteen nonsense normally northern november occasion occupied official opponent opposing opposite ordinary organize original outdoors overcome painting parallel passport patience peaceful personal persuade physical planning platform pleasant pleasing pleasure politely politics position positive possible possibly powerful practice practise pregnant premises prepared presence preserve pressure previous princess printing priority prisoner probable probably producer progress promptly properly property proposal prospect provided publicly purchase quantity question railroad reaction recently regional register relation relative relaxing relevant religion remember repeated research resident resource response restrict revision romantic saturday schedule scissors secretly security sensible sentence separate severely sexually shocking shooting shopping shoulder sideways sixtieth slightly smoothly socially software solution somebody somewhat southern specific spelling standard steadily straight stranger strategy strength stressed strictly striking strongly struggle suddenly suitable suitcase superior surprise surround swearing swelling swimming sympathy teaching tendency terrible terribly thinking thirteen thorough thousand threaten thursday together tomorrow training transfer triangle tropical trousers ultimate umbrella unfairly universe unlikely unsteady upstairs vacation valuable vertical violence weakness whatever whenever wherever withdraw worrying wrapping yourself abandoned accompany according advantage adventure advertise affection afternoon agreement alcoholic alongside ambulance anxiously apartment apologize approving assistant associate attempted attention authority automatic available awkwardly backwards basically beautiful beginning behaviour boyfriend breakfast breathing brilliant broadcast calculate candidate cardboard carefully celebrate certainly challenge character chemistry chocolate cigarette classroom colleague committee community complaint concerned condition confident confusing confusion connected conscious construct container continent correctly criterion criticism criticize curiously currently dangerous delighted departure depressed desperate determine different difficult direction disappear discovery disgusted dishonest downwards drugstore education effective efficient eightieth elsewhere embarrass emergency emotional emphasize encounter encourage enjoyable enjoyment entertain equipment essential establish everybody excellent exception excluding executive existence expensive explosion extension extensive extremely favourite fifteenth financial following furniture generally gentleman genuinely geography gradually guarantee happiness highlight household hundredth illegally imaginary immediate impatient important impressed inability including infection influence initially institute insulting insurance intention interpret interrupt interview introduce invention irritated jewellery judgement justified kilometre knowledge landscape machinery marketing meanwhile milligram millionth motorbike naturally necessary neighbour nervously newspaper ninetieth objective obviously o\ufffdclock offensive operation organized otherwise ourselves packaging passenger perfectly performer permanent photocopy poisonous political pollution potential practical precisely president primarily principle privately procedure professor programme promotion pronounce providing publicity qualified realistic reception recognize recommend recording reduction reference regarding regularly religious remaining represent reproduce satisfied scientist secondary secretary selection sensitive separated september seriously seventeen signature similarly sincerely situation skilfully something sometimes somewhere specially spiritual statement strangely structure substance suffering supporter surprised suspicion technical technique telephone temporary therefore thickness thirtieth timetable tradition transform translate transport traveller treatment twentieth typically uncertain underwear unusually unwilling upsetting variation vegetable violently virtually wednesday willingly wonderful yesterday absolutely acceptable accidental accurately additional adequately admiration afterwards aggressive altogether anticipate apparently appearance appreciate artificial assistance associated atmosphere attraction attractive background carelessly centimetre chairwoman cheerfully collection commercial commission commitment comparison completely complicate concerning conclusion conference confidence connection constantly continuous contribute controlled convenient convention decoration decorative definitely definition deliberate department depressing determined dictionary difference difficulty disappoint disapprove discipline discussion disgusting distribute disturbing downstairs eighteenth electrical electronic employment enthusiasm equivalent especially eventually everything everywhere exaggerate excitement exhibition experience experiment expression faithfully foundation fourteenth frequently friendship frightened generation generously girlfriend government grandchild historical horizontal illustrate importance impossible impression impressive indication indirectly individual industrial inevitable inevitably infectious ingredient initiative instrument interested investment invitation irritating journalist laboratory literature management membership millimetre motorcycle mysterious nineteenth noticeable officially opposition originally parliament particular permission personally philosophy photograph physically pleasantly politician population possession preference presumably previously production profession proportion protection publishing punishment reasonable reasonably regulation relatively remarkable remarkably repeatedly reputation resistance restaurant restricted retirement revolution ridiculous satisfying scientific separately separation seventieth specialist substitute successful sufficient suggestion surprising suspicious technology television themselves thirteenth thoroughly thousandth throughout ultimately underneath understand underwater unemployed unexpected unfriendly university unpleasant achievement acknowledge advertising alternative anniversary application appointment appropriate approximate arrangement association beautifully businessman calculation celebration certificate combination comfortable comfortably communicate competition competitive complicated concentrate confidently consequence contrasting countryside demonstrate description desperately destruction development differently disapproval dishonestly distinguish effectively efficiently electricity embarrassed emotionally engineering entertainer environment essentially exaggerated examination expectation experienced explanation fashionable frightening fundamental grandfather grandmother grandparent hairdresser imagination immediately implication importantly improvement independent information institution instruction intelligent interesting investigate involvement manufacture mathematics measurement necessarily observation opportunity outstanding partnership performance permanently personality photography politically possibility potentially practically preparation publication recognition requirement reservation responsible restriction significant substantial supermarket surrounding sympathetic temperature temporarily threatening traditional translation transparent unconscious underground unfortunate unimportant unnecessary unwillingly accidentally alphabetical artificially artistically circumstance congratulate conservative considerable considerably construction contemporary continuously contribution conventional conversation deliberately disadvantage disagreement disappointed disapproving distribution dramatically embarrassing entertaining enthusiastic increasingly independence intelligence interruption introduction manufacturer nevertheless occasionally organization particularly photographer presentation professional refrigerator relationship satisfaction specifically successfully sufficiently surprisingly surroundings unacceptable uncontrolled unemployment unexpectedly unreasonable unsuccessful accommodation advertisement alternatively approximately automatically communication concentration consideration determination disappointing embarrassment encouragement entertainment environmental extraordinary granddaughter independently international investigation manufacturing neighbourhood pronunciation qualification significantly substantially traditionally uncomfortable understanding unfortunately alphabetically characteristic congratulation disappointment interpretation representative responsibility transportation enthusiastically\"\"\" . split ( \" \\n \" ) if __name__ == \"__main__\" : game = Hangman () game . start () Variables HANGMAN WORDS Classes Hangman class Hangman ( ) View Source class Hangman : def __init__ ( self ) : \"\"\" initializes a `Hangman` object \"\"\" pass def game ( self ) : \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character.upper() for character in random.choice(WORDS) ] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ) : cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter;\\n> \" ). upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha () : self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )) : if letter == word [ i ] : word_hidden [ i ] = letter cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character.upper() for character in random.choice(WORDS) ] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ) : cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter;\\n> \" ). upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha () : self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )) : if letter == word [ i ] : word_hidden [ i ] = letter cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" ) start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Hangman"},{"location":"reference/quickpython/examples/hangman/#module-quickpythonexampleshangman","text":"/games/hangman.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/hangman.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import pyfiglet HANGMAN = [ \"\"\" \\t----- \\t| | \\t| \\t| \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| -+- \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+- \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | \\t| \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | \\t| | \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | | \\t| | \\t| \\t-------- \"\"\" , \"\"\" \\t----- \\t| | \\t| 0 \\t| /-+-\\\\ \\t| | \\t| | \\t| | | \\t| | | \\t| \\t-------- \"\"\" , ] class Hangman : def __init__ ( self ): \"\"\" initializes a `Hangman` object \"\"\" pass def game ( self ): \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character . upper () for character in random . choice ( WORDS )] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ): cls () print ( HANGMAN [ - lives ]) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter; \\n > \" ) . upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha (): self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )): if letter == word [ i ]: word_hidden [ i ] = letter cls () print ( HANGMAN [ - lives ]) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" ) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () WORDS = \"\"\"aa ab ad ag ah ai am an as at aw ax ay ba be bi bo by da do dy ee eh el em en er ex fa ga gi go ha he hi ho id if in io is it ka ki la li lo ma me mo my no of oh oi ok on op or ou ow ox oz pa pi re so te to uh um up us wa we ye yo act add age ago aid aim air all and any arm art ask bad bag ban bar bay bed bet bid big bin bit box boy bus but buy bye can cap car cat cow cry cup cut dad day die dig dog dot dry due dvd dye ear eat egg end etc eye fan far fat fee few fit fix flu fly for fry fun fur gap gas get god gun guy hat her hip his hit hot how ice ill ink jam job joy key kid lab law lay leg let lid lie lip lot low mad map may mix mrs net new nor not now nut odd off oil old one our out owe own pan pay pen per pet pig pin pop pot pub put raw red rid rob rub run say sea see set sew sex she shy sir sit six sky son sum sun tap tax tea ten the tie tin tip toe ton too top toy try two use van via war way web wet who why win yes yet you able acid aged ally also area arms army atom aunt away baby back bake ball band bank base bath beak bear beat beef beer bell belt bend bent best bike bill bird bite blow blue boat body boil bomb bone book boot bore born boss both bowl burn bury bush busy cake call calm camp card care case cash cast cell cent chat chew chin chip chop city clap club coal coat code coin cold come cook cool cope copy core cost crop curb cure curl damp dare dark data date dead deaf deal dear debt deep deny desk diet dirt disc dish disk door down drag draw drop drug drum dull dump dust duty each earn ease east easy edge else euro even ever evil exam exit face fact fail fair fall fame farm fast fear feed feel file fill film find fine fire firm fish five flag flat flow fold food foot fork form four free from fuel full fund gain game gate gear gift girl give glad glue goal gold good grab gram grey grow hair half hall hand hang hard harm hate have head heal hear heat heel hell help here hero hers hide high hill hire hold hole holy home hook hope horn host hour huge hunt hurt idea inch into iron item join joke july jump june just keen keep kick kill kind king kiss knee knit knot know lack lady lake lamp land lane last late lazy lead leaf lean left lend less life lift like line link list live load loan lock long look lord lose loss lost loud love luck lump lung mail main make male mall many mark mass mate meal mean meat meet melt menu mere mess mild mile milk mind mine miss mood moon more most move much must nail name navy near neat neck need nest news next nice nine none nose note obey once only onto open ours oven over pace pack page pain pair pale park part pass past path peak pick pile pill pink pint pipe pity plan play plot plug plus poem pole pool poor port pose post pour pray pull pure push quit race rail rain rank rare rate read real rear rely rent rest rice rich ride ring rise risk road rock role roll roof room root rope rude ruin rule rush sack safe sail sale salt same sand save seal seat seed seek seem self sell send ship shoe shop shot show shut sick side sign silk sing sink site size skin slip slow snow soap sock soft soil some song soon sore sort soul soup sour spin spot star stay step stir stop such suck suit sure swim tail take talk tall tank tape task taxi team tear tell tend tent term test text than that them then they thin this thus tidy till time tiny tire tone tool tour town trap tree trip true tube tune turn twin type tyre ugly undo unit upon urge used user vary vast very view vote wage wait wake walk wall want warm warn wash wave weak wear week well west what when whom wide wife wild will wind wine wing wire wise wish with wood wool word work wrap zero zone about above abuse actor adapt admit adopt adult after again agent agree ahead alarm alive allow alone along aloud alter amaze among amuse anger angle angry ankle annoy apart apple apply april argue arise armed arrow aside avoid awake award aware awful badly based basic basis beach beard begin below birth black blade blame blank blind block blood board bored bound brain brand brave bread break breed brick brief bring broad brown brush build bunch burnt burst buyer cable candy carry catch cause cease chain chair chart chase cheap cheat check cheek chest chief child civil claim class clean clear clerk click climb clock close cloth cloud coach coast cough could count court cover crack craft crash crazy cream crime crisp cross crowd crown cruel crush curly curve cycle daily dance death decay delay depth diary dirty doubt dozen draft drama dream dress drink drive drunk dying early earth eight elbow elect email empty enemy enjoy enter entry equal error essay event every exact exist extra faint faith false fancy fault fence fetch fever field fifth fifty fight final first fixed flame flash flesh float flood floor flour focus force forty found frame fresh front fruit fully funny giant glass glove goods grade grain grand grant grass grave great green group guard guess guest guide habit happy heart heavy hello hence hobby horse hotel house human hurry ideal image imply index inner issue jeans jelly joint judge juice knife knock label large later laugh layer learn least leave legal lemon level light limit litre local logic loose lorry lover loyal lucky lunch magic major march marry match maybe mayor means media metal metre might minor mixed model money month moral motor mount mouse mouth movie music naked nerve never newly niece night ninth noise noisy north novel nurse occur ocean oddly offer often onion order organ other ought outer owner paint panel pants paper party pause peace penny phase phone photo piano piece pilot pitch place plain plane plant plate point pound power press price pride prime print prior prize proof proud prove punch pupil queen quick quiet quite quote radio raise range rapid reach react ready refer relax reply rider right rival river rough round route royal ruler rural sadly salad salty sauce scale scare scene score screw sense serve seven shade shake shall shame shape share sharp shave sheep sheet shelf shell shift shine shiny shirt shock shoot short shout sight silly since sixth sixty skill skirt sleep slice slide slope small smart smash smell smile smoke snake solid solve sorry sound south space spare speak speed spell spend spice spicy spite split spoil spoon sport spray staff stage stair stamp stand stare start state steal steam steel steep steer stick stiff still sting stock stone store storm story stove strip study stuff style sugar swear sweat sweep sweet swell swing table taste teach tenth thank their theme there thick thief thing think third three throw thumb tight tired title today tonne tooth topic total touch tough towel tower trace track trade train treat trend trial trick truck truly trust truth twice twist uncle under union unite until upper upset urban usual valid value video virus visit vital voice waist waste watch water weigh wheel where which while white whole whose width woman world worry worse worst worth would wound wrist write wrong young yours youth abroad absent absorb accent accept access accuse across action active actual adjust admire advert advice advise affair affect afford afraid agency allied almost always amazed amount amused animal annual answer anyone anyway appeal appear around arrest arrive artist asleep aspect assist assume assure attach attack attend august author autumn battle beauty become before behalf behave behind belief belong beside better beyond bitter blonde border boring borrow bother bottle bottom branch breast breath bridge bright broken bubble budget bullet butter button called calmly camera cancel cancer cannot career carpet carrot castle centre chance change charge cheese cheque choice choose church cinema circle clever client closed closet coffee coldly colour column comedy commit common cooker cookie corner cotton county couple course cousin create credit crisis curved custom damage dancer danger debate decade decide deeply defeat defend define degree demand depend derive desert design desire detail device devote dinner direct divide doctor dollar double drawer driver during easily editor effect effort eighth eighty either eleven emerge empire employ enable ending energy engage engine enough ensure entire escape estate except excite excuse expand expect expert export expose extend extent factor fairly family famous farmer fasten father faucet favour fellow female figure finely finger finish firmly flight flower flying follow forest forget formal former fourth freely freeze friday fridge friend frozen future gallon gamble garage garden gather gentle gently global govern ground growth guilty hammer handle happen hardly hatred health heaven height highly hollow honest honour horror humour hungry ignore impact import impose income indeed indoor infect inform injure injury insect insert inside insist insult intend invent invest invite island itself jacket junior kindly labour latest latter launch lawyer leader league length lesson letter likely liquid listen little lively living locate lonely loudly lovely mainly manage manner market master matter medium member memory mental merely method midday middle minute mirror mobile modern moment monday mostly mother motion moving murder muscle museum myself narrow nation nature nearby nearly neatly needle nephew nicely ninety nobody normal notice number object obtain occupy offend office online openly oppose option orange origin output packet palace parent partly pencil people pepper period permit person petrol phrase planet player please plenty pocket poetry poison police policy polish polite potato powder praise prayer prefer pretty priest prince prison profit prompt proper public punish purely purple pursue racing rarely rather reader really reason recall recent reckon record reduce reform refuse regard region regret reject relate relief remain remark remind remote remove rented repair repeat report rescue resist resort result retain retire return reveal review revise reward rhythm riding rubber rudely ruined rumour runner safely safety sailor salary sample saving scared scheme school scream screen search season second secret sector secure select senate senior series settle severe sewing sexual shadow shaped should shower signal silent silver simple simply singer single sister sleeve slight slowly smooth social softly source speech spider spirit spoken spread spring square stable statue status steady sticky strain stream street stress strict strike string stripe stroke strong studio stupid sudden suffer suited summer sunday supply surely survey switch symbol system tablet tackle target thanks theirs theory thirty though thread threat throat ticket tiring toilet tomato tongue travel tunnel twelve twenty unable unfair unique united unkind unless unlike unload untidy upside upward urgent useful valley varied victim vision volume waiter wallet wander warmth wealth weapon weekly weight widely wildly window winner winter within wonder wooden worker writer yellow abandon ability absence account achieve acquire actress address advance against airport alarmed alcohol already amazing amusing analyse ancient angrily annoyed another anxiety anxious anybody appoint approve arrange arrival article ashamed attempt attract average awfully awkward baggage balance bandage bargain barrier battery because bedroom believe beneath benefit betting between bicycle billion biology biscuit breathe briefly broadly brother cabinet camping capable capital captain capture careful ceiling central century certain chamber channel chapter charity cheaply chemist chicken citizen classic clearly climate closely clothes collect college combine comfort command comment company compare compete complex concept concern concert conduct confine confirm confuse connect consist consult contact contain content contest context control convert cooking correct cottage council counter country courage covered cracked crowded crucial culture curious current curtain customs cycling dancing declare decline defence delight deliver dentist deposit depress deserve despite destroy develop devoted diagram diamond digital discuss disease disgust dislike dismiss display disturb divorce drawing dressed driving eastern economy edition educate elderly elegant element emotion engaged enquiry entitle equally evening exactly examine example excited exclude exhibit expense explain explode explore express extreme factory failure faintly farming farther fashion feather feature federal feeling fifteen finally finance fishing flavour flooded folding foreign forever forgive formula fortune forward freedom freshly funeral further garbage general genuine goodbye gradual grammar gravely greatly grocery happily harmful healthy hearing heating heavily helpful herself highway himself history holiday housing however hundred hunting husband illegal illness imagine immoral impress improve include indoors initial injured install instead involve january jealous jointly journey justice justify killing kitchen knitted lacking largely leading leather lecture legally library licence license lightly limited locally located logical loosely luggage machine manager married massive maximum meaning measure medical meeting mention message million mineral minimum missing mistake mixture monitor morally morning musical mystery natural neither nervous network noisily nothing nowhere nuclear observe obvious october offence offense officer opening operate opinion opposed outdoor outline outside overall package painful painter partner passage passing patient pattern payment pension perfect perform perhaps physics picture plastic pleased pointed popular possess precise predict prepare present pretend prevent primary printer private problem proceed process produce product program project promise promote propose protect protest proudly provide publish purpose qualify quality quarter quickly quietly railway rapidly reading reality realize receipt receive recover reflect refusal regular related relaxed release remains removal replace request require reserve resolve respect respond restore retired reverse rightly roughly rounded routine rubbish running sadness sailing satisfy science scratch section senator serious servant service session seventh seventy several shallow sharply shelter shocked shortly silence similar sincere singing sixteen skilful skilled smoking society soldier somehow someone speaker special squeeze station steeply stiffly stomach strange stretch striped student subject succeed success suggest summary support suppose surface surname survive suspect swallow sweater swollen teacher tension theatre thickly thirsty thought through tightly tonight totally tourist towards trading traffic trouble tuesday twelfth twisted typical unhappy uniform unknown unlucky unusual upwards useless usually variety various vehicle venture version victory village violent visible visitor walking warning washing weather website wedding weekend welcome western whereas whether whisper whistle whoever willing winning without witness working worried worship wounded writing written wrongly absolute academic accident accurate actively activity actually addition adequate advanced aircraft alarming alphabet although ambition analysis announce annoying annually anything anywhere apparent approach approval argument artistic attached attitude attorney audience backward bacteria bathroom birthday bitterly brightly building business campaign capacity careless category ceremony chairman cheerful chemical climbing clothing collapse coloured commonly complain complete computer conclude concrete confined conflict confront confused congress consider constant consumer continue contract contrast convince coughing covering creature criminal critical cultural cupboard customer daughter december decision decorate decrease definite delicate delivery describe deserted detailed directly director disabled disagree disaster discount discover dissolve distance district division divorced document domestic dominate downward dramatic economic educated eighteen election electric elevator eleventh emphasis employee employer engineer enormous entirely entrance envelope estimate everyone evidence exchange exciting exercise expected facility faithful familiar farthest february festival fiftieth fighting finished flooding football forecast formally formerly fortieth fourteen frequent friendly frighten function gambling gasoline generate generous governor grandson grateful harmless headache hesitate homework honestly hospital humorous identify identity incident increase indicate indirect industry infected informal innocent instance intended interest interior internal internet interval involved irritate keyboard kilogram kindness knitting language location magazine maintain majority marriage matching material medicine mentally midnight military minister ministry minority mistaken moreover mountain movement multiply musician national negative nineteen nonsense normally northern november occasion occupied official opponent opposing opposite ordinary organize original outdoors overcome painting parallel passport patience peaceful personal persuade physical planning platform pleasant pleasing pleasure politely politics position positive possible possibly powerful practice practise pregnant premises prepared presence preserve pressure previous princess printing priority prisoner probable probably producer progress promptly properly property proposal prospect provided publicly purchase quantity question railroad reaction recently regional register relation relative relaxing relevant religion remember repeated research resident resource response restrict revision romantic saturday schedule scissors secretly security sensible sentence separate severely sexually shocking shooting shopping shoulder sideways sixtieth slightly smoothly socially software solution somebody somewhat southern specific spelling standard steadily straight stranger strategy strength stressed strictly striking strongly struggle suddenly suitable suitcase superior surprise surround swearing swelling swimming sympathy teaching tendency terrible terribly thinking thirteen thorough thousand threaten thursday together tomorrow training transfer triangle tropical trousers ultimate umbrella unfairly universe unlikely unsteady upstairs vacation valuable vertical violence weakness whatever whenever wherever withdraw worrying wrapping yourself abandoned accompany according advantage adventure advertise affection afternoon agreement alcoholic alongside ambulance anxiously apartment apologize approving assistant associate attempted attention authority automatic available awkwardly backwards basically beautiful beginning behaviour boyfriend breakfast breathing brilliant broadcast calculate candidate cardboard carefully celebrate certainly challenge character chemistry chocolate cigarette classroom colleague committee community complaint concerned condition confident confusing confusion connected conscious construct container continent correctly criterion criticism criticize curiously currently dangerous delighted departure depressed desperate determine different difficult direction disappear discovery disgusted dishonest downwards drugstore education effective efficient eightieth elsewhere embarrass emergency emotional emphasize encounter encourage enjoyable enjoyment entertain equipment essential establish everybody excellent exception excluding executive existence expensive explosion extension extensive extremely favourite fifteenth financial following furniture generally gentleman genuinely geography gradually guarantee happiness highlight household hundredth illegally imaginary immediate impatient important impressed inability including infection influence initially institute insulting insurance intention interpret interrupt interview introduce invention irritated jewellery judgement justified kilometre knowledge landscape machinery marketing meanwhile milligram millionth motorbike naturally necessary neighbour nervously newspaper ninetieth objective obviously o\ufffdclock offensive operation organized otherwise ourselves packaging passenger perfectly performer permanent photocopy poisonous political pollution potential practical precisely president primarily principle privately procedure professor programme promotion pronounce providing publicity qualified realistic reception recognize recommend recording reduction reference regarding regularly religious remaining represent reproduce satisfied scientist secondary secretary selection sensitive separated september seriously seventeen signature similarly sincerely situation skilfully something sometimes somewhere specially spiritual statement strangely structure substance suffering supporter surprised suspicion technical technique telephone temporary therefore thickness thirtieth timetable tradition transform translate transport traveller treatment twentieth typically uncertain underwear unusually unwilling upsetting variation vegetable violently virtually wednesday willingly wonderful yesterday absolutely acceptable accidental accurately additional adequately admiration afterwards aggressive altogether anticipate apparently appearance appreciate artificial assistance associated atmosphere attraction attractive background carelessly centimetre chairwoman cheerfully collection commercial commission commitment comparison completely complicate concerning conclusion conference confidence connection constantly continuous contribute controlled convenient convention decoration decorative definitely definition deliberate department depressing determined dictionary difference difficulty disappoint disapprove discipline discussion disgusting distribute disturbing downstairs eighteenth electrical electronic employment enthusiasm equivalent especially eventually everything everywhere exaggerate excitement exhibition experience experiment expression faithfully foundation fourteenth frequently friendship frightened generation generously girlfriend government grandchild historical horizontal illustrate importance impossible impression impressive indication indirectly individual industrial inevitable inevitably infectious ingredient initiative instrument interested investment invitation irritating journalist laboratory literature management membership millimetre motorcycle mysterious nineteenth noticeable officially opposition originally parliament particular permission personally philosophy photograph physically pleasantly politician population possession preference presumably previously production profession proportion protection publishing punishment reasonable reasonably regulation relatively remarkable remarkably repeatedly reputation resistance restaurant restricted retirement revolution ridiculous satisfying scientific separately separation seventieth specialist substitute successful sufficient suggestion surprising suspicious technology television themselves thirteenth thoroughly thousandth throughout ultimately underneath understand underwater unemployed unexpected unfriendly university unpleasant achievement acknowledge advertising alternative anniversary application appointment appropriate approximate arrangement association beautifully businessman calculation celebration certificate combination comfortable comfortably communicate competition competitive complicated concentrate confidently consequence contrasting countryside demonstrate description desperately destruction development differently disapproval dishonestly distinguish effectively efficiently electricity embarrassed emotionally engineering entertainer environment essentially exaggerated examination expectation experienced explanation fashionable frightening fundamental grandfather grandmother grandparent hairdresser imagination immediately implication importantly improvement independent information institution instruction intelligent interesting investigate involvement manufacture mathematics measurement necessarily observation opportunity outstanding partnership performance permanently personality photography politically possibility potentially practically preparation publication recognition requirement reservation responsible restriction significant substantial supermarket surrounding sympathetic temperature temporarily threatening traditional translation transparent unconscious underground unfortunate unimportant unnecessary unwillingly accidentally alphabetical artificially artistically circumstance congratulate conservative considerable considerably construction contemporary continuously contribution conventional conversation deliberately disadvantage disagreement disappointed disapproving distribution dramatically embarrassing entertaining enthusiastic increasingly independence intelligence interruption introduction manufacturer nevertheless occasionally organization particularly photographer presentation professional refrigerator relationship satisfaction specifically successfully sufficiently surprisingly surroundings unacceptable uncontrolled unemployment unexpectedly unreasonable unsuccessful accommodation advertisement alternatively approximately automatically communication concentration consideration determination disappointing embarrassment encouragement entertainment environmental extraordinary granddaughter independently international investigation manufacturing neighbourhood pronunciation qualification significantly substantially traditionally uncomfortable understanding unfortunately alphabetically characteristic congratulation disappointment interpretation representative responsibility transportation enthusiastically\"\"\" . split ( \" \\n \" ) if __name__ == \"__main__\" : game = Hangman () game . start ()","title":"Module quickpython.examples.hangman"},{"location":"reference/quickpython/examples/hangman/#variables","text":"HANGMAN WORDS","title":"Variables"},{"location":"reference/quickpython/examples/hangman/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/hangman/#hangman","text":"class Hangman ( ) View Source class Hangman : def __init__ ( self ) : \"\"\" initializes a `Hangman` object \"\"\" pass def game ( self ) : \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character.upper() for character in random.choice(WORDS) ] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ) : cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter;\\n> \" ). upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha () : self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )) : if letter == word [ i ] : word_hidden [ i ] = letter cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Hangman"},{"location":"reference/quickpython/examples/hangman/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/hangman/#game","text":"def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . message = \"\" lives = 11 word = [ character.upper() for character in random.choice(WORDS) ] word_hidden = [ \"_\" for character in word ] guessed = [] while ( lives != 0 ) and ( \"_\" in word_hidden ) : cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"you have {0} attempt{1} remaining\" . format ( lives , \"\" if lives == 1 else \"s\" )) print () letter = input ( \"choose a letter;\\n> \" ). upper () if not letter : continue elif not len ( letter ) == 1 : self . message = \"too many letters\" continue elif not letter . isalpha () : self . message = \"that is not a letter\" continue elif letter in guessed : self . message = \"you've already guessed that letter\" continue guessed . append ( letter ) if letter not in word : lives -= 1 continue for i in range ( len ( word )) : if letter == word [ i ] : word_hidden [ i ] = letter cls () print ( HANGMAN [ -lives ] ) print () if guessed : print ( \" \" . join ( guessed )) print () print ( \"\" . join ( word_hidden )) print () if lives == 0 : print ( \"you lose\" ) print ( \"the word was {0}\" . format ( \"\" . join ( word ))) else : print ( \"you win\" )","title":"game"},{"location":"reference/quickpython/examples/hangman/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Hangman\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/memory/","text":"Module quickpython.examples.memory /games/memory.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/memory.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \" License \"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS \" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __ authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __ version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __ version_info__ )] ) import os import random import re import string import time import pyfiglet GRID_SIZES = { \"easy\" : 6 , \"intermediate\" : 10 , \"hard\" : 14 } CHARACTERS = \" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ! \\ \" \u00a3 $ %^&*()-_=+[{]};:'@#~,<.>/?\\\\|`\u00ac\u00e1\u00e9\" class Memory : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Memory` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . characters = CHARACTERS [ : ((( self . grid_size // 2 ) ** 2 ) * 2 )] self . message = \"\" def game ( self ) : \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ) : second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ) : self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" ) def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column ) def show_grid ( self ) : \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][ : self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ) : if j % (self.grid_size) == 0: print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % (self.grid_size) == 1: print ( \" {0:>2} | {1} \" . format ( i , k ), end= \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end= \"\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False if __ name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" } : cls () print () difficulty = input ( \"difficulty;\\n> \" ). strip () game = Memory ( difficulty ) game . start () Variables CHARACTERS GRID_SIZES Classes Memory class Memory ( difficulty : str ) View Source class Memory : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Memory` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . characters = CHARACTERS [ : ((( self . grid_size // 2 ) ** 2 ) * 2 )] self . message = \"\" def game ( self ) : \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ) : second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ) : self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" ) def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column ) def show_grid ( self ) : \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][ : self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ) : if j % (self.grid_size) == 0: print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % (self.grid_size) == 1: print ( \" {0:>2} | {1} \" . format ( i , k ), end= \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end= \"\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False Methods game def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ): self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] != \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ): second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] != \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ): self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" ) parse_coordinates def parse_coordinates ( self , coordinates : str ) generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple View Source def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column ) show_grid def show_grid ( self ) View Source def show_grid ( self ): \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][: self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ): if j % ( self . grid_size ) == 0 : print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % ( self . grid_size ) == 1 : print ( \" {0:>2} | {1} \" . format ( i , k ), end = \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end = \"\" ) start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () valid_coordinates def valid_coordinates ( self , coordinates : str ) determines whether coordinates are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether coordinates are valid View Source def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"Memory"},{"location":"reference/quickpython/examples/memory/#module-quickpythonexamplesmemory","text":"/games/memory.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/memory.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \" License \"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS \" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __ authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __ version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __ version_info__ )] ) import os import random import re import string import time import pyfiglet GRID_SIZES = { \"easy\" : 6 , \"intermediate\" : 10 , \"hard\" : 14 } CHARACTERS = \" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ! \\ \" \u00a3 $ %^&*()-_=+[{]};:'@#~,<.>/?\\\\|`\u00ac\u00e1\u00e9\" class Memory : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Memory` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . characters = CHARACTERS [ : ((( self . grid_size // 2 ) ** 2 ) * 2 )] self . message = \"\" def game ( self ) : \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ) : second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ) : self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" ) def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column ) def show_grid ( self ) : \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][ : self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ) : if j % (self.grid_size) == 0: print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % (self.grid_size) == 1: print ( \" {0:>2} | {1} \" . format ( i , k ), end= \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end= \"\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False if __ name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" } : cls () print () difficulty = input ( \"difficulty;\\n> \" ). strip () game = Memory ( difficulty ) game . start ()","title":"Module quickpython.examples.memory"},{"location":"reference/quickpython/examples/memory/#variables","text":"CHARACTERS GRID_SIZES","title":"Variables"},{"location":"reference/quickpython/examples/memory/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/memory/#memory","text":"class Memory ( difficulty : str ) View Source class Memory : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Memory` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . characters = CHARACTERS [ : ((( self . grid_size // 2 ) ** 2 ) * 2 )] self . message = \"\" def game ( self ) : \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ) : second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] ! = \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ) : self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" ) def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column ) def show_grid ( self ) : \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][ : self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ) : if j % (self.grid_size) == 0: print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % (self.grid_size) == 1: print ( \" {0:>2} | {1} \" . format ( i , k ), end= \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end= \"\" ) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"Memory"},{"location":"reference/quickpython/examples/memory/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/memory/#game","text":"def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" self . known = [ \" \" ] * len ( self . characters * 2 ) characters = [ character for character in self . characters * 2 ] random . shuffle ( characters ) while \" \" in self . known : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ): self . message = \"invalid coordinates\" continue first_row , first_column = self . parse_coordinates ( coordinates ) if self . known [( first_row * self . grid_size ) + first_column ] != \" \" : self . message = \"invalid coordinates\" continue self . known [( first_row * self . grid_size ) + first_column ] = characters [ ( first_row * self . grid_size ) + first_column ] while True : cls () print () self . show_grid () print () if self . message : print ( self . message ) print () self . message = \"\" coordinates = input ( \"> \" ). strip (). upper () if self . valid_coordinates ( coordinates ): second_row , second_column = self . parse_coordinates ( coordinates ) if self . known [( second_row * self . grid_size ) + second_column ] != \" \" : self . message = \"invalid coordinates\" continue self . known [( second_row * self . grid_size ) + second_column ] = characters [ ( second_row * self . grid_size ) + second_column ] break self . message = \"invalid coordinates\" cls () print () self . show_grid () time . sleep ( 1 ) if ( not self . known [( first_row * self . grid_size ) + first_column ] == self . known [( second_row * self . grid_size ) + second_column ] ): self . known [( first_row * self . grid_size ) + first_column ] = \" \" self . known [( second_row * self . grid_size ) + second_column ] = \" \" cls () print () self . show_grid () print () print ( \"congrats\" )","title":"game"},{"location":"reference/quickpython/examples/memory/#parse_coordinates","text":"def parse_coordinates ( self , coordinates : str ) generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple View Source def parse_coordinates ( self , coordinates : str ) : \"\"\" generates a (row : int, column : int) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int) tuple \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) return ( row , column )","title":"parse_coordinates"},{"location":"reference/quickpython/examples/memory/#show_grid","text":"def show_grid ( self ) View Source def show_grid ( self ): \"\"\"\"\"\" print ( \" {0}\" . format ( \" \" . join ([ character for character in string . ascii_lowercase ][: self . grid_size ]) ) ) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) i = 1 for ( j , k ) in enumerate ( self . known , 1 ): if j % ( self . grid_size ) == 0 : print ( \"| {0} |\" . format ( k )) print ( \" {0}\" . format ( \"-\" * (( self . grid_size * 4 ) + 1 ))) elif j % ( self . grid_size ) == 1 : print ( \" {0:>2} | {1} \" . format ( i , k ), end = \"\" ) i += 1 else : print ( \"| {0} \" . format ( k ), end = \"\" )","title":"show_grid"},{"location":"reference/quickpython/examples/memory/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Memory\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/memory/#valid_coordinates","text":"def valid_coordinates ( self , coordinates : str ) determines whether coordinates are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether coordinates are valid View Source def valid_coordinates ( self , coordinates : str ) : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"(?P<column>[A-{0}])(?P<row>{1})\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"valid_coordinates"},{"location":"reference/quickpython/examples/minesweeper/","text":"Module quickpython.examples.minesweeper /games/minesweeper.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/minesweeper.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \" License \"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS \" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __ authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __ version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __ version_info__ )] ) import os import random import re import string import time import colorama import pyfiglet GRID_SIZES = { \"easy\" : 10 , \"intermediate\" : 18 , \"hard\" : 20 } MINE_COUNTS = { \"easy\" : 10 , \"intermediate\" : 50 , \"hard\" : 100 } COLORS = [ colorama . Fore . LIGHTYELLOW_EX , colorama . Fore . YELLOW , colorama . Fore . LIGHTMAGENTA_EX , colorama . Fore . MAGENTA , colorama . Fore . LIGHTRED_EX , colorama . Fore . RED , colorama . Fore . LIGHTCYAN_EX , colorama . Fore . CYAN , ] class Grid : def __ init__ ( self , size : int , mine_count: int ) : \"\"\" initializes a `Grid` object \"\"\" self . size = size self . mine_count = mine_count self . known = [[ \" \" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] def get_neighbors ( self , cell : tuple ) -> set : \"\"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\"\" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is ` cell ` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 )) def generate_mines ( self , start_cell: tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) ! = self . mine_count: cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\" def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell ! = \"X\" : values = [ self . hidden [ row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ], number , colorama . Fore . RESET ) def show ( self , grid : list ) -> str : \"\"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\"\" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len ( grid )] : top_label += \"{0} \" . format ( character ) grid_string = \"{0}\\n{1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \"\\n{0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0}\\n{1}\" . format ( row , horizontal ) return grid_string def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] ! = \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] ! = \"F\" : self . show_cell (( row_index , column_index )) def start ( self , start_cell: tuple ) : \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [[ \"0\" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell ) class Minesweeper : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Minesweeper` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . mine_count = MINE_COUNTS [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \") def parse_coordinates(self, coordinates: str) -> tuple: \"\"\" generates a ( row : int , column : int , flag : bool ) tuple from coordinates arguments : coordinates :: str :: the coordinates convert returns : :: tuple :: a ( row : int , column : int , flag : bool ) tuple \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) flag = match.group(\" flag \") == \" F \" return (row, column, flag) def start(self): \"\"\" calls ` self . game ` in a 'would you like to play again?' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Minesweeper \")) print() input(\" enter to play\\nctrl + c to quit to main menu\\n\\n \") self.game() choice = input(\" \\nwould you like to play again?\\n > \").strip() def valid_coordinates(self, coordinates: str) -> bool: \"\"\" determines whether ` coordinates ` are valid arguments : coordinates :: str :: the coordinates to check returns : :: bool :: whether ` coordinates ` are valid \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) if match: return True return False if __name__ == \" __ main__ \": difficulty = None while difficulty not in {\" easy \", \" intermediate \", \" hard \"}: cls() print() difficulty = input(\" difficulty ; \\n > \" ). strip () game = Minesweeper ( difficulty ) game . start () Variables COLORS GRID_SIZES MINE_COUNTS Classes Grid class Grid ( size : int , mine_count : int ) View Source class Grid : def __init__ ( self , size : int , mine_count : int ) : \"\"\" initializes a `Grid` object \"\"\" self . size = size self . mine_count = mine_count self . known = [ [\" \" for (i) in range(self.size) ] for ( j ) in range ( self . size ) ] def get_neighbors ( self , cell : tuple ) -> set : \"\"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\"\" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is ` cell ` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 )) def generate_mines ( self , start_cell : tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) != self . mine_count : cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\" def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell != \"X\" : values = [ self.hidden[row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ] , number , colorama . Fore . RESET ) def show ( self , grid : list ) -> str : \"\"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\"\" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len(grid) ] : top_label += \"{0} \" . format ( character ) grid_string = \"{0}\\n{1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \"\\n{0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0}\\n{1}\" . format ( row , horizontal ) return grid_string def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] != \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] != \"F\" : self . show_cell (( row_index , column_index )) def start ( self , start_cell : tuple ) : \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [ [\"0\" for (i) in range(self.size) ] for ( j ) in range ( self . size ) ] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell ) Methods generate_mines def generate_mines ( self , start_cell : tuple ) generates a set of mines excluding start_cell arguments: start_cell :: tuple :: the player's first selected cell View Source def generate_mines ( self , start_cell : tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) != self . mine_count : cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\" generate_numbers def generate_numbers ( self ) generates a number for each cell based on surrounding mines View Source def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell != \"X\" : values = [ self.hidden[row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ] , number , colorama . Fore . RESET ) get_neighbors def get_neighbors ( self , cell : tuple ) -> set gets a set of surrounding cells from cell arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells View Source def get_neighbors ( self , cell : tuple ) -> set : \" \"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\" \" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is `cell` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors get_random_cell def get_random_cell ( self ) -> tuple gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple View Source def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 )) show def show ( self , grid : list ) -> str generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of grid View Source def show ( self , grid : list ) -> str : \" \"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\" \" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len ( grid ) ] : top_label += \"{0} \" . format ( character ) grid_string = \"{0} \\n {1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \" \\n {0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0} \\n {1}\" . format ( row , horizontal ) return grid_string show_cell def show_cell ( self , cell : tuple ) sets cell in self.known as self.hidden and iterates through neighbors if self.known == \"0\" arguments: cell :: tuple :: the cell to show View Source def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] != \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] != \"F\" : self . show_cell (( row_index , column_index )) start def start ( self , start_cell : tuple ) generates the minesweeper grid arguments: start_cell :: tuple :: passed into self.generate_mines and self.show_cell View Source def start ( self , start_cell : tuple ): \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [[ \"0\" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell ) Minesweeper class Minesweeper ( difficulty : str ) View Source class Minesweeper : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Minesweeper` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . mine_count = MINE_COUNTS [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \") def parse_coordinates(self, coordinates: str) -> tuple: \"\"\" generates a ( row : int , column : int , flag : bool ) tuple from coordinates arguments : coordinates :: str :: the coordinates convert returns : :: tuple :: a ( row : int , column : int , flag : bool ) tuple \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) flag = match.group(\" flag \") == \" F \" return (row, column, flag) def start(self): \"\"\" calls ` self . game ` in a 'would you like to play again?' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Minesweeper \")) print() input(\" enter to play\\nctrl + c to quit to main menu\\n\\n \") self.game() choice = input(\" \\nwould you like to play again?\\n > \").strip() def valid_coordinates(self, coordinates: str) -> bool: \"\"\" determines whether ` coordinates ` are valid arguments : coordinates :: str :: the coordinates to check returns : :: bool :: whether ` coordinates ` are valid \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False Methods game def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \" ) parse_coordinates def parse_coordinates ( self , coordinates : str ) -> tuple generates a (row : int, column : int, flag : bool) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int, flag : bool) tuple View Source def parse_coordinates ( self , coordinates : str ) -> tuple : \"\"\" generates a (row : int, column : int, flag : bool) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int, flag : bool) tuple \"\"\" pattern = re . compile ( r \"^(?P<column>[A-{0}])(?P<row>{1})(?P<flag>F?)$\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) flag = match . group ( \"flag\" ) == \"F\" return ( row , column , flag ) start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Minesweeper\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () valid_coordinates def valid_coordinates ( self , coordinates : str ) -> bool determines whether coordinates are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether coordinates are valid View Source def valid_coordinates ( self , coordinates : str ) -> bool : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"^(?P<column>[A-{0}])(?P<row>{1})(?P<flag>F?)$\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"Minesweeper"},{"location":"reference/quickpython/examples/minesweeper/#module-quickpythonexamplesminesweeper","text":"/games/minesweeper.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/minesweeper.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \" License \"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \" AS IS \" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __ authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __ version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __ version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __ version_info__ )] ) import os import random import re import string import time import colorama import pyfiglet GRID_SIZES = { \"easy\" : 10 , \"intermediate\" : 18 , \"hard\" : 20 } MINE_COUNTS = { \"easy\" : 10 , \"intermediate\" : 50 , \"hard\" : 100 } COLORS = [ colorama . Fore . LIGHTYELLOW_EX , colorama . Fore . YELLOW , colorama . Fore . LIGHTMAGENTA_EX , colorama . Fore . MAGENTA , colorama . Fore . LIGHTRED_EX , colorama . Fore . RED , colorama . Fore . LIGHTCYAN_EX , colorama . Fore . CYAN , ] class Grid : def __ init__ ( self , size : int , mine_count: int ) : \"\"\" initializes a `Grid` object \"\"\" self . size = size self . mine_count = mine_count self . known = [[ \" \" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] def get_neighbors ( self , cell : tuple ) -> set : \"\"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\"\" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is ` cell ` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 )) def generate_mines ( self , start_cell: tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) ! = self . mine_count: cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\" def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell ! = \"X\" : values = [ self . hidden [ row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ], number , colorama . Fore . RESET ) def show ( self , grid : list ) -> str : \"\"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\"\" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len ( grid )] : top_label += \"{0} \" . format ( character ) grid_string = \"{0}\\n{1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \"\\n{0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0}\\n{1}\" . format ( row , horizontal ) return grid_string def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] ! = \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] ! = \"F\" : self . show_cell (( row_index , column_index )) def start ( self , start_cell: tuple ) : \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [[ \"0\" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell ) class Minesweeper : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Minesweeper` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . mine_count = MINE_COUNTS [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \") def parse_coordinates(self, coordinates: str) -> tuple: \"\"\" generates a ( row : int , column : int , flag : bool ) tuple from coordinates arguments : coordinates :: str :: the coordinates convert returns : :: tuple :: a ( row : int , column : int , flag : bool ) tuple \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) flag = match.group(\" flag \") == \" F \" return (row, column, flag) def start(self): \"\"\" calls ` self . game ` in a 'would you like to play again?' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Minesweeper \")) print() input(\" enter to play\\nctrl + c to quit to main menu\\n\\n \") self.game() choice = input(\" \\nwould you like to play again?\\n > \").strip() def valid_coordinates(self, coordinates: str) -> bool: \"\"\" determines whether ` coordinates ` are valid arguments : coordinates :: str :: the coordinates to check returns : :: bool :: whether ` coordinates ` are valid \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) if match: return True return False if __name__ == \" __ main__ \": difficulty = None while difficulty not in {\" easy \", \" intermediate \", \" hard \"}: cls() print() difficulty = input(\" difficulty ; \\n > \" ). strip () game = Minesweeper ( difficulty ) game . start ()","title":"Module quickpython.examples.minesweeper"},{"location":"reference/quickpython/examples/minesweeper/#variables","text":"COLORS GRID_SIZES MINE_COUNTS","title":"Variables"},{"location":"reference/quickpython/examples/minesweeper/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/minesweeper/#grid","text":"class Grid ( size : int , mine_count : int ) View Source class Grid : def __init__ ( self , size : int , mine_count : int ) : \"\"\" initializes a `Grid` object \"\"\" self . size = size self . mine_count = mine_count self . known = [ [\" \" for (i) in range(self.size) ] for ( j ) in range ( self . size ) ] def get_neighbors ( self , cell : tuple ) -> set : \"\"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\"\" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is ` cell ` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 )) def generate_mines ( self , start_cell : tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) != self . mine_count : cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\" def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell != \"X\" : values = [ self.hidden[row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ] , number , colorama . Fore . RESET ) def show ( self , grid : list ) -> str : \"\"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\"\" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len(grid) ] : top_label += \"{0} \" . format ( character ) grid_string = \"{0}\\n{1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \"\\n{0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0}\\n{1}\" . format ( row , horizontal ) return grid_string def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] != \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] != \"F\" : self . show_cell (( row_index , column_index )) def start ( self , start_cell : tuple ) : \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [ [\"0\" for (i) in range(self.size) ] for ( j ) in range ( self . size ) ] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell )","title":"Grid"},{"location":"reference/quickpython/examples/minesweeper/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/minesweeper/#generate_mines","text":"def generate_mines ( self , start_cell : tuple ) generates a set of mines excluding start_cell arguments: start_cell :: tuple :: the player's first selected cell View Source def generate_mines ( self , start_cell : tuple ) : \"\"\" generates a set of mines excluding `start_cell` arguments: start_cell :: tuple :: the player's first selected cell \"\"\" self . mines = set () neighbors = self . get_neighbors ( start_cell ) while len ( self . mines ) != self . mine_count : cell = self . get_random_cell () if ( cell == start_cell ) or ( cell in neighbors ) : continue self . mines . add ( cell ) for ( row , column ) in self . mines : self . hidden [ row ][ column ] = \"X\"","title":"generate_mines"},{"location":"reference/quickpython/examples/minesweeper/#generate_numbers","text":"def generate_numbers ( self ) generates a number for each cell based on surrounding mines View Source def generate_numbers ( self ) : \"\"\" generates a number for each cell based on surrounding mines \"\"\" for ( row_index , row ) in enumerate ( self . hidden ) : for ( column_index , cell ) in enumerate ( row ) : if cell != \"X\" : values = [ self.hidden[row ][ column ] for ( row , column ) in self . get_neighbors (( row_index , column_index )) ] number = values . count ( \"X\" ) if number == 0 : self . hidden [ row_index ][ column_index ] = \"0\" else : self . hidden [ row_index ][ column_index ] = \"{0}{1}{2}\" . format ( COLORS [ number - 1 ] , number , colorama . Fore . RESET )","title":"generate_numbers"},{"location":"reference/quickpython/examples/minesweeper/#get_neighbors","text":"def get_neighbors ( self , cell : tuple ) -> set gets a set of surrounding cells from cell arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells View Source def get_neighbors ( self , cell : tuple ) -> set : \" \"\" gets a set of surrounding cells from `cell` arguments: cell :: tuple :: the cell to surround returns: neighbors :: set :: a set of surrounding cells \"\" \" row_index , column_index = cell neighbors = set () for i in range ( - 1 , 2 ) : for j in range ( - 1 , 2 ) : if ( i == 0 ) and ( j == 0 ) : # this is `cell` continue elif ( - 1 < ( row_index + i ) < self . size ) and ( - 1 < ( column_index + j ) < self . size ) : neighbors . add (( row_index + i , column_index + j )) return neighbors","title":"get_neighbors"},{"location":"reference/quickpython/examples/minesweeper/#get_random_cell","text":"def get_random_cell ( self ) -> tuple gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple View Source def get_random_cell ( self ) -> tuple : \"\"\" gets a random (row, column) tuple returns: :: tuple :: a random (row, column) tuple \"\"\" return ( random . randint ( 0 , self . size - 1 ), random . randint ( 0 , self . size - 1 ))","title":"get_random_cell"},{"location":"reference/quickpython/examples/minesweeper/#show","text":"def show ( self , grid : list ) -> str generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of grid View Source def show ( self , grid : list ) -> str : \" \"\" generates a string containing a readable form of the minesweeper grid arguments: grid :: list :: the minesweeper grid to generate returns: grid_string :: str :: the readable form of `grid` \"\" \" horizontal = \" \" + ( \"-\" * ( 4 * len ( grid ))) + \"-\" top_label = \" \" for character in string . ascii_uppercase [ : len ( grid ) ] : top_label += \"{0} \" . format ( character ) grid_string = \"{0} \\n {1}\" . format ( top_label , horizontal ) for ( i , j ) in enumerate ( grid , 1 ) : row = \" \\n {0:>2} |\" . format ( i ) for k in j : row += \" {0} |\" . format ( k ) grid_string += \"{0} \\n {1}\" . format ( row , horizontal ) return grid_string","title":"show"},{"location":"reference/quickpython/examples/minesweeper/#show_cell","text":"def show_cell ( self , cell : tuple ) sets cell in self.known as self.hidden and iterates through neighbors if self.known == \"0\" arguments: cell :: tuple :: the cell to show View Source def show_cell ( self , cell : tuple ) : \"\"\" sets `cell` in `self.known` as `self.hidden` and iterates through neighbors if `self.known` == \" 0 \" arguments: cell :: tuple :: the cell to show \"\"\" row_index , column_index = cell if self . known [ row_index ][ column_index ] != \" \" : return self . known [ row_index ][ column_index ] = self . hidden [ row_index ][ column_index ] if self . known [ row_index ][ column_index ] == \"0\" : for ( row_index , column_index ) in self . get_neighbors (( row_index , column_index )) : if self . known [ row_index ][ column_index ] != \"F\" : self . show_cell (( row_index , column_index ))","title":"show_cell"},{"location":"reference/quickpython/examples/minesweeper/#start","text":"def start ( self , start_cell : tuple ) generates the minesweeper grid arguments: start_cell :: tuple :: passed into self.generate_mines and self.show_cell View Source def start ( self , start_cell : tuple ): \"\"\" generates the minesweeper grid arguments: start_cell :: tuple :: passed into `self.generate_mines` and `self.show_cell` \"\"\" self . hidden = [[ \"0\" for ( i ) in range ( self . size )] for ( j ) in range ( self . size )] self . generate_mines ( start_cell ) self . generate_numbers () self . show_cell ( start_cell )","title":"start"},{"location":"reference/quickpython/examples/minesweeper/#minesweeper","text":"class Minesweeper ( difficulty : str ) View Source class Minesweeper : def __ init__ ( self , difficulty : str ) : \"\"\" initializes a `Minesweeper` object \"\"\" self . grid_size = GRID_SIZES [ difficulty ] self . mine_count = MINE_COUNTS [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \") def parse_coordinates(self, coordinates: str) -> tuple: \"\"\" generates a ( row : int , column : int , flag : bool ) tuple from coordinates arguments : coordinates :: str :: the coordinates convert returns : :: tuple :: a ( row : int , column : int , flag : bool ) tuple \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) ) match = re.match(pattern, coordinates) row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) flag = match.group(\" flag \") == \" F \" return (row, column, flag) def start(self): \"\"\" calls ` self . game ` in a 'would you like to play again?' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Minesweeper \")) print() input(\" enter to play\\nctrl + c to quit to main menu\\n\\n \") self.game() choice = input(\" \\nwould you like to play again?\\n > \").strip() def valid_coordinates(self, coordinates: str) -> bool: \"\"\" determines whether ` coordinates ` are valid arguments : coordinates :: str :: the coordinates to check returns : :: bool :: whether ` coordinates ` are valid \"\"\" pattern = re.compile( r\" ^ ( ? P < column > [ A - { 0 }])( ? P < row> { 1 })( ? P < flag > F ? ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"Minesweeper"},{"location":"reference/quickpython/examples/minesweeper/#methods_1","text":"","title":"Methods"},{"location":"reference/quickpython/examples/minesweeper/#game","text":"def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . grid = Grid ( self . grid_size , self . mine_count ) self . message = \"\" coordinates = \"\" while not self . valid_coordinates ( coordinates ) or ( coordinates . endswith ( \"F\" )) : cls () print () print ( self . grid . show ( self . grid . known )) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if not self . valid_coordinates ( coordinates ) : self . message = \"invalid coordinates\" continue row , column , flag = self . parse_coordinates ( coordinates ) self . grid . start (( row , column )) flags = set () while not flags == self . grid . mines : cls () print () print ( self . grid . show ( self . grid . known )) print () if self . message : print ( self . message ) print () self . message = \"\" else : print ( \"{0} mine{1} left\" . format ( len ( self . grid . mines ) - len ( flags ), \"s\" if ( len ( self . grid . mines ) - len ( flags ) ! = 1 ) else \"\" , ) ) print () coordinates = input ( \"coordinates;\\n> \" ). strip (). upper () if coordinates . startswith ( \"EVAL(\" ) : # this entire block of code was me messing with the game and making cheats bc i got bored : )) # commands are ; # eval ( va- ` column `` row ` ) -> sets self . message to the value at ` column ` , ` row ` # eval ( win ) -> does some freaky looking printing to generate mines and win the game pattern_string = r \" ^ EVAL \\ ( VA - ( ? P < column > [ A - { 0 }])( ? P < row> { 1 }) \\ ) $ \".format( string.ascii_uppercase[self.grid_size - 1], \" | \".join([str(i) for i in range(1, self.grid_size + 1)][::-1]), ) pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: row = int(match.group(\" row \")) - 1 column = string.ascii_uppercase.index(match.group(\" column \")) self.message = self.grid.hidden[row][column] continue pattern_string = r\" ^ EVAL \\ ( WIN \\ ) $ \" pattern = re.compile(pattern_string) match = re.match(pattern, coordinates) if match: for i in range(self.grid_size): for j in range(self.grid_size): if self.grid.known[i][j] != \" \": continue if self.grid.hidden[i][j] != \" X \": continue flags.add((i, j)) self.grid.known[i][j] = \" F \" cls() print() print(self.grid.show(self.grid.known)) print() print( \" { 0 } mine { 1 } left \".format( len(self.grid.mines) - len(flags), \" s \" if (len(self.grid.mines) - len(flags) != 1) else \"\", ) ) continue if not self.valid_coordinates(coordinates): self.message = \" invalid coordinates \" continue row, column, flag = self.parse_coordinates(coordinates) if flag: if self.grid.known[row][column] == \" \": self.grid.known[row][column] = \" F \" flags.add((row, column)) elif self.grid.known[row][column] == \" F \": self.grid.known[row][column] = \" \" flags.remove((row, column)) else: self.message = \" cannot put a flag there \" elif (row, column) in flags: self.message = \" there is a flag there \" elif self.grid.hidden[row][column] == \" X \": cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you lose \") return elif self.grid.known[row][column] == \" \": self.grid.show_cell((row, column)) else: self.message = \" that cell is already shown \" cls() print() print(self.grid.show(self.grid.hidden)) print() print(\" you win \" )","title":"game"},{"location":"reference/quickpython/examples/minesweeper/#parse_coordinates","text":"def parse_coordinates ( self , coordinates : str ) -> tuple generates a (row : int, column : int, flag : bool) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int, flag : bool) tuple View Source def parse_coordinates ( self , coordinates : str ) -> tuple : \"\"\" generates a (row : int, column : int, flag : bool) tuple from coordinates arguments: coordinates :: str :: the coordinates convert returns: :: tuple :: a (row : int, column : int, flag : bool) tuple \"\"\" pattern = re . compile ( r \"^(?P<column>[A-{0}])(?P<row>{1})(?P<flag>F?)$\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) row = int ( match . group ( \"row\" )) - 1 column = string . ascii_uppercase . index ( match . group ( \"column\" )) flag = match . group ( \"flag\" ) == \"F\" return ( row , column , flag )","title":"parse_coordinates"},{"location":"reference/quickpython/examples/minesweeper/#start_1","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Minesweeper\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/minesweeper/#valid_coordinates","text":"def valid_coordinates ( self , coordinates : str ) -> bool determines whether coordinates are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether coordinates are valid View Source def valid_coordinates ( self , coordinates : str ) -> bool : \"\"\" determines whether `coordinates` are valid arguments: coordinates :: str :: the coordinates to check returns: :: bool :: whether `coordinates` are valid \"\"\" pattern = re . compile ( r \"^(?P<column>[A-{0}])(?P<row>{1})(?P<flag>F?)$\" . format ( string . ascii_uppercase [ self . grid_size - 1 ], \"|\" . join ([ str ( i ) for i in range ( 1 , self . grid_size + 1 )][ ::- 1 ]), ) ) match = re . match ( pattern , coordinates ) if match : return True return False","title":"valid_coordinates"},{"location":"reference/quickpython/examples/simon/","text":"Module quickpython.examples.simon /games/simon.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/simon.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import time import colorama import pyfiglet COLORS = { \"easy\" : [ ( colorama . Back . RED , \"red\" ), ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ], \"intermediate\" : [ ( colorama . Back . RED , \"red\" ), ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ( colorama . Back . CYAN , \"cyan\" ), ], \"hard\" : [ ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ( colorama . Back . CYAN , \"cyan\" ), ( colorama . Back . MAGENTA , \"magenta\" ), ], } TIMES = { \"easy\" : 0.5 , \"intermediate\" : 0.4 , \"hard\" : 0.3 } class Simon : def __init__ ( self , difficulty : str ): \"\"\" initializes a `Simon` object \"\"\" self . colors = COLORS [ difficulty ] self . time = TIMES [ difficulty ] def game ( self ): \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ) . replace ( \" \" , \"\" ) correct = \"\" . join ([ color_name [ 0 ] for ( color , color_name ) in colors ]) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 )) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" }: cls () print () difficulty = input ( \"difficulty; \\n > \" ) . strip () game = Simon ( difficulty ) game . start () Variables COLORS TIMES Classes Simon class Simon ( difficulty : str ) View Source class Simon : def __init__ ( self , difficulty : str ) : \"\"\" initializes a `Simon` object \"\"\" self . colors = COLORS [ difficulty ] self . time = TIMES [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ). replace ( \" \" , \"\" ) correct = \"\" . join ( [ color_name[0 ] for ( color , color_name ) in colors ] ) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 )) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ). replace ( \" \" , \"\" ) correct = \"\" . join ([ color_name [ 0 ] for ( color , color_name ) in colors ]) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 )) start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Simon"},{"location":"reference/quickpython/examples/simon/#module-quickpythonexamplessimon","text":"/games/simon.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/simon.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 1 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import time import colorama import pyfiglet COLORS = { \"easy\" : [ ( colorama . Back . RED , \"red\" ), ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ], \"intermediate\" : [ ( colorama . Back . RED , \"red\" ), ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ( colorama . Back . CYAN , \"cyan\" ), ], \"hard\" : [ ( colorama . Back . GREEN , \"green\" ), ( colorama . Back . BLUE , \"blue\" ), ( colorama . Back . YELLOW , \"yellow\" ), ( colorama . Back . CYAN , \"cyan\" ), ( colorama . Back . MAGENTA , \"magenta\" ), ], } TIMES = { \"easy\" : 0.5 , \"intermediate\" : 0.4 , \"hard\" : 0.3 } class Simon : def __init__ ( self , difficulty : str ): \"\"\" initializes a `Simon` object \"\"\" self . colors = COLORS [ difficulty ] self . time = TIMES [ difficulty ] def game ( self ): \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ) . replace ( \" \" , \"\" ) correct = \"\" . join ([ color_name [ 0 ] for ( color , color_name ) in colors ]) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 )) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" }: cls () print () difficulty = input ( \"difficulty; \\n > \" ) . strip () game = Simon ( difficulty ) game . start ()","title":"Module quickpython.examples.simon"},{"location":"reference/quickpython/examples/simon/#variables","text":"COLORS TIMES","title":"Variables"},{"location":"reference/quickpython/examples/simon/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/simon/#simon","text":"class Simon ( difficulty : str ) View Source class Simon : def __init__ ( self , difficulty : str ) : \"\"\" initializes a `Simon` object \"\"\" self . colors = COLORS [ difficulty ] self . time = TIMES [ difficulty ] def game ( self ) : \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ). replace ( \" \" , \"\" ) correct = \"\" . join ( [ color_name[0 ] for ( color , color_name ) in colors ] ) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 )) def start ( self ) : \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Simon"},{"location":"reference/quickpython/examples/simon/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/simon/#game","text":"def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" colors = list () while True : colors . append ( random . choice ( self . colors )) for ( color , color_name ) in colors : cls () print ( \"\"\" ------------------ |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| |{0} {1}| ------------------ \"\"\" . format ( color , colorama . Back . RESET ) ) time . sleep ( self . time ) cls () print ( \"\"\" ------------------ | | | | | | | | | | | | | | ------------------ \"\"\" ) time . sleep ( self . time ) print () answer = input ( \"> \" ). replace ( \" \" , \"\" ) correct = \"\" . join ([ color_name [ 0 ] for ( color , color_name ) in colors ]) if answer != correct : break print () print ( \"you got {0} correct combinations\" . format ( len ( colors ) - 1 ))","title":"game"},{"location":"reference/quickpython/examples/simon/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Simon Says\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/tictactoe/","text":"Module quickpython.examples.tictactoe Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of a board with 9 spaces, this game has 9 boards with 81 spaces, the winner of each board placing their X or O on the big board! More info at: https://en.wikipedia.org/wiki/Ultimate_tic-tac-toe This and other games are available at https://nostarch.com/XX Tags: large, game, board game, two-player View Source \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of a board with 9 spaces, this game has 9 boards with 81 spaces, the winner of each board placing their X or O on the big board! More info at: https://en.wikipedia.org/wiki/Ultimate_tic-tac-toe This and other games are available at https://nostarch.com/XX Tags: large, game, board game, two-player\"\"\" __version__ = 0 import sys # Set up the constants: O_PLAYER = \"O\" X_PLAYER = \"X\" TIED = \"tied\" EMPTY_SPACE = \".\" BOARD_WIDTH = 3 BOARD_HEIGHT = 3 CANVAS_WIDTH = 15 CANVAS_HEIGHT = 9 SUBCANVAS_WIDTH = 5 SUBCANVAS_HEIGHT = 3 def main (): print ( \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of tic-tac-toe with 9 spaces, this game has a \"big\" board made up of 9 \"small\" tic-tac-toe boards. Moving on a small board causes the next player to move on that relative board. Winning on a small board lets that player put their mark on the big board. The winner must get three in a row on the big board. \"\"\" ) turn = X_PLAYER # X will go first. gameBoard = getNewBoard () # focusX and focusY determine which small board the player moves on. # If they are both None, the player can choose a small board. focusX , focusY = None , None while True : # Main game loop. displayBoard ( gameBoard ) focusX , focusY = askForPlayerMove ( turn , gameBoard , focusX , focusY ) # Check for a big board winner: bigBoard = makeBoardFromSmallBoards ( gameBoard ) bigWinner = getWinner ( bigBoard ) if bigWinner == TIED : displayBoard ( gameBoard ) print ( \"The game is a tie!\" ) print ( \"Thanks for playing!\" ) sys . exit () elif bigWinner != None : displayBoard ( gameBoard ) print ( bigWinner , \"has won!\" ) print ( \"Thanks for playing!\" ) sys . exit () # Switch to the other player's turn: if turn == X_PLAYER : turn = O_PLAYER elif turn == O_PLAYER : turn = X_PLAYER def getNewBoard (): \"\"\"Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE.\"\"\" board = {} # Loop over each small board: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): board [( x , y )] = {} # Loop over each space on the small board: for smallX in range ( BOARD_WIDTH ): for smallY in range ( BOARD_HEIGHT ): board [( x , y )][( smallX , smallY )] = EMPTY_SPACE return board def displayBoard ( board ): \"\"\"Displays the big tic-tac-toe board on the screen.\"\"\" # The canvas is a dictionary that has keys of (x, y) tuples, and # the values are the character to print at that place on the screen. canvas = {} # First, put blank spaces on the entire canvas: for x in range ( CANVAS_WIDTH ): for y in range ( CANVAS_HEIGHT ): canvas [( x , y )] = \" \" # Second, fill in the big board Xs and Os on the canvas: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( board [( x , y )]) if winner == X_PLAYER : # Draw a large X for each small board X won: canvas [( x * 5 + 1 , y * 3 + 0 )] = \" \\\\ \" canvas [( x * 5 + 3 , y * 3 + 0 )] = \"/\" canvas [( x * 5 + 2 , y * 3 + 1 )] = \"X\" canvas [( x * 5 + 1 , y * 3 + 2 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \" \\\\ \" elif winner == O_PLAYER : # Draw a large O for each small board O won: canvas [( x * 5 + 2 , y * 3 + 0 )] = \"_\" canvas [( x * 5 + 1 , y * 3 + 1 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 1 )] = \" \\\\ \" canvas [( x * 5 + 1 , y * 3 + 2 )] = \" \\\\ \" canvas [( x * 5 + 2 , y * 3 + 2 )] = \"_\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \"/\" elif winner == TIED : # Draw a large ### block for tied small boards: for scx in range ( SUBCANVAS_WIDTH ): for scy in range ( SUBCANVAS_HEIGHT ): canvas [( x * 5 + scx , y * 3 + scy )] = \"#\" # Third, fill in the Xs and Os of the small boards on the canvas: for ix , smallTopLeftX in enumerate ([ 0 , 5 , 10 ]): for iy , smallTopLeftY in enumerate ([ 0 , 3 , 6 ]): if getWinner ( board [( ix , iy )]) != None : continue for x in range ( 3 ): for y in range ( 3 ): canvasx = smallTopLeftX + ( x * 2 ) canvasy = smallTopLeftY + y canvas [( canvasx , canvasy )] = board [( ix , iy )][( x , y )] # Print out the tic tac toe board: for y in range ( 9 ): for x in range ( 15 ): print ( canvas [( x , y )], end = \"\" ) if x == 4 or x == 9 : print ( \"|\" , end = \"\" ) print () # Print a newline. if y == 2 or y == 5 : print ( \"-----+-----+-----\" ) def getWinner ( board ): \"\"\"Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet.\"\"\" # Create short-named variables for the spaces on this board. topL , topM , topR = board [( 0 , 0 )], board [( 1 , 0 )], board [( 2 , 0 )] midL , midM , midR = board [( 0 , 1 )], board [( 1 , 1 )], board [( 2 , 1 )] botL , botM , botR = board [( 0 , 2 )], board [( 1 , 2 )], board [( 2 , 2 )] for player in ( X_PLAYER , O_PLAYER ): if ( ( topL == topM == topR == player ) or ( midL == midM == midR == player ) # Top row or ( botL == botM == botR == player ) # Middle row or ( topL == midL == botL == player ) # Bottom row or ( topM == midM == botM == player ) # Left column or ( topR == midR == botR == player ) # Middle column or ( topL == midM == botR == player ) # Right column or ( topR == midM == botL == player ) # \\ diagonal ): # / diagonal return player # Check for a tie: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): if board [( x , y )] == EMPTY_SPACE : return None # Return None since there is no winner yet. return TIED def askForPlayerMove ( player , board , focusX , focusY ): \"\"\"Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. \"\"\" # Check if the player can freely select any small board: if focusX == None and focusY == None : # Let the player pick which board they want to move on: print ( player + \": Enter the BOARD you want to move on.\" ) validBoardsToSelect = [] for xyTuple , smallBoard in board . items (): if getWinner ( smallBoard ) == None : validBoardsToSelect . append ( xyTuple ) selectedBoard = enter1Through9 ( validBoardsToSelect ) focusX = selectedBoard % 3 focusY = selectedBoard // 3 # Select the space on the focused small board: smallXDesc = [ \"left\" , \"middle\" , \"right\" ][ focusX ] smallYDesc = [ \"top\" , \"middle\" , \"bottom\" ][ focusY ] print ( player , \"moves on the\" , smallYDesc , smallXDesc , \"board.\" ) validSpacesToSelect = [] for xyTuple , tile in board [( focusX , focusY )] . items (): if tile == EMPTY_SPACE : validSpacesToSelect . append ( xyTuple ) selectedSpace = enter1Through9 ( validSpacesToSelect ) x = selectedSpace % 3 y = selectedSpace // 3 board [( focusX , focusY )][( x , y )] = player # Figure out the small board that the next player must move on: if getWinner ( board [( x , y )]) == None : return ( x , y ) else : # If the small board has a winner or is tied, the next player # can move on any small board: return ( None , None ) def enter1Through9 ( validMoves ): \"\"\"Presents a \"minimap\" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces.\"\"\" for i , move in enumerate ( validMoves ): # Convert the (x, y) tuple values to an integer 1 through 9: validMoves [ i ] = str (( move [ 1 ] * 3 + move [ 0 ]) + 1 ) print ( \" 1 2 3\" ) print ( \" 4 5 6\" ) print ( \" 7 8 9\" ) print ( \"Enter your move (1-9) or QUIT:\" ) while True : # Keep asking the player until they enter a valid move. response = input ( \"> \" ) . upper () if response == \"QUIT\" : print ( \"Thanks for playing!\" ) sys . exit () if response in validMoves : # Return a int that is 0-8, not a string that is 1-9. return int ( response ) - 1 print ( \"You cannot select that space.\" ) def makeBoardFromSmallBoards ( smallBoards ): bigBoard = {} for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( smallBoards [( x , y )]) if winner == None : bigBoard [( x , y )] = EMPTY_SPACE elif winner == TIED : bigBoard [( x , y )] = TIED elif winner in ( X_PLAYER , O_PLAYER ): bigBoard [( x , y )] = winner return bigBoard # If the program is run (instead of imported), run the game: if __name__ == \"__main__\" : main () Variables BOARD_HEIGHT BOARD_WIDTH CANVAS_HEIGHT CANVAS_WIDTH EMPTY_SPACE O_PLAYER SUBCANVAS_HEIGHT SUBCANVAS_WIDTH TIED X_PLAYER Functions askForPlayerMove def askForPlayerMove ( player , board , focusX , focusY ) Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. View Source def askForPlayerMove ( player , board , focusX , focusY ) : \"\"\"Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. \"\"\" # Check if the player can freely select any small board : if focusX == None and focusY == None : # Let the player pick which board they want to move on : print ( player + \": Enter the BOARD you want to move on.\" ) validBoardsToSelect = [] for xyTuple , smallBoard in board . items () : if getWinner ( smallBoard ) == None : validBoardsToSelect . append ( xyTuple ) selectedBoard = enter1Through9 ( validBoardsToSelect ) focusX = selectedBoard % 3 focusY = selectedBoard // 3 # Select the space on the focused small board : smallXDesc = [ \"left\", \"middle\", \"right\" ][ focusX ] smallYDesc = [ \"top\", \"middle\", \"bottom\" ][ focusY ] print ( player , \"moves on the\" , smallYDesc , smallXDesc , \"board.\" ) validSpacesToSelect = [] for xyTuple , tile in board [ (focusX, focusY) ] . items () : if tile == EMPTY_SPACE : validSpacesToSelect . append ( xyTuple ) selectedSpace = enter1Through9 ( validSpacesToSelect ) x = selectedSpace % 3 y = selectedSpace // 3 board [ (focusX, focusY) ][ (x, y) ] = player # Figure out the small board that the next player must move on : if getWinner ( board [ (x, y) ] ) == None : return ( x , y ) else : # If the small board has a winner or is tied , the next player # can move on any small board : return ( None , None ) displayBoard def displayBoard ( board ) Displays the big tic-tac-toe board on the screen. View Source def displayBoard ( board ): \"\"\"Displays the big tic-tac-toe board on the screen.\"\"\" # The canvas is a dictionary that has keys of (x, y) tuples, and # the values are the character to print at that place on the screen. canvas = {} # First, put blank spaces on the entire canvas: for x in range ( CANVAS_WIDTH ): for y in range ( CANVAS_HEIGHT ): canvas [( x , y )] = \" \" # Second, fill in the big board Xs and Os on the canvas: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( board [( x , y )]) if winner == X_PLAYER : # Draw a large X for each small board X won: canvas [( x * 5 + 1 , y * 3 + 0 )] = \" \\\\ \" canvas [( x * 5 + 3 , y * 3 + 0 )] = \"/\" canvas [( x * 5 + 2 , y * 3 + 1 )] = \"X\" canvas [( x * 5 + 1 , y * 3 + 2 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \" \\\\ \" elif winner == O_PLAYER : # Draw a large O for each small board O won: canvas [( x * 5 + 2 , y * 3 + 0 )] = \"_\" canvas [( x * 5 + 1 , y * 3 + 1 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 1 )] = \" \\\\ \" canvas [( x * 5 + 1 , y * 3 + 2 )] = \" \\\\ \" canvas [( x * 5 + 2 , y * 3 + 2 )] = \"_\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \"/\" elif winner == TIED : # Draw a large ### block for tied small boards: for scx in range ( SUBCANVAS_WIDTH ): for scy in range ( SUBCANVAS_HEIGHT ): canvas [( x * 5 + scx , y * 3 + scy )] = \"#\" # Third, fill in the Xs and Os of the small boards on the canvas: for ix , smallTopLeftX in enumerate ([ 0 , 5 , 10 ]): for iy , smallTopLeftY in enumerate ([ 0 , 3 , 6 ]): if getWinner ( board [( ix , iy )]) != None : continue for x in range ( 3 ): for y in range ( 3 ): canvasx = smallTopLeftX + ( x * 2 ) canvasy = smallTopLeftY + y canvas [( canvasx , canvasy )] = board [( ix , iy )][( x , y )] # Print out the tic tac toe board: for y in range ( 9 ): for x in range ( 15 ): print ( canvas [( x , y )], end = \"\" ) if x == 4 or x == 9 : print ( \"|\" , end = \"\" ) print () # Print a newline. if y == 2 or y == 5 : print ( \"-----+-----+-----\" ) enter1Through9 def enter1Through9 ( validMoves ) Presents a \"minimap\" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces. View Source def enter1Through9 ( validMoves ): \"\"\"Presents a \" minimap \" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces.\"\"\" for i , move in enumerate ( validMoves ): # Convert the (x, y) tuple values to an integer 1 through 9: validMoves [ i ] = str (( move [ 1 ] * 3 + move [ 0 ]) + 1 ) print ( \" 1 2 3\" ) print ( \" 4 5 6\" ) print ( \" 7 8 9\" ) print ( \"Enter your move (1-9) or QUIT:\" ) while True: # Keep asking the player until they enter a valid move. response = input ( \"> \" ). upper () if response == \"QUIT\" : print ( \"Thanks for playing!\" ) sys . exit () if response in validMoves: # Return a int that is 0-8, not a string that is 1-9. return int ( response ) - 1 print ( \"You cannot select that space.\" ) getNewBoard def getNewBoard ( ) Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE. View Source def getNewBoard (): \"\"\"Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE.\"\"\" board = {} # Loop over each small board : for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): board [( x , y )] = {} # Loop over each space on the small board : for smallX in range ( BOARD_WIDTH ): for smallY in range ( BOARD_HEIGHT ): board [( x , y )][( smallX , smallY )] = EMPTY_SPACE return board getWinner def getWinner ( board ) Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet. View Source def getWinner ( board ): \"\"\"Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet.\"\"\" # Create short-named variables for the spaces on this board. topL , topM , topR = board [( 0 , 0 )], board [( 1 , 0 )], board [( 2 , 0 )] midL , midM , midR = board [( 0 , 1 )], board [( 1 , 1 )], board [( 2 , 1 )] botL , botM , botR = board [( 0 , 2 )], board [( 1 , 2 )], board [( 2 , 2 )] for player in ( X_PLAYER , O_PLAYER ): if ( ( topL == topM == topR == player ) or ( midL == midM == midR == player ) # Top row or ( botL == botM == botR == player ) # Middle row or ( topL == midL == botL == player ) # Bottom row or ( topM == midM == botM == player ) # Left column or ( topR == midR == botR == player ) # Middle column or ( topL == midM == botR == player ) # Right column or ( topR == midM == botL == player ) # \\ diagonal ): # / diagonal return player # Check for a tie: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): if board [( x , y )] == EMPTY_SPACE : return None # Return None since there is no winner yet. return TIED main def main ( ) View Source def main () : print ( \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of tic-tac-toe with 9 spaces, this game has a \" big \" board made up of 9 \" small \" tic-tac-toe boards. Moving on a small board causes the next player to move on that relative board. Winning on a small board lets that player put their mark on the big board. The winner must get three in a row on the big board. \"\"\" ) turn = X_PLAYER # X will go first . gameBoard = getNewBoard () # focusX and focusY determine which small board the player moves on . # If they are both None , the player can choose a small board . focusX , focusY = None , None while True : # Main game loop . displayBoard ( gameBoard ) focusX , focusY = askForPlayerMove ( turn , gameBoard , focusX , focusY ) # Check for a big board winner : bigBoard = makeBoardFromSmallBoards ( gameBoard ) bigWinner = getWinner ( bigBoard ) if bigWinner == TIED : displayBoard ( gameBoard ) print ( \"The game is a tie!\" ) print ( \"Thanks for playing!\" ) sys . exit () elif bigWinner != None : displayBoard ( gameBoard ) print ( bigWinner , \"has won!\" ) print ( \"Thanks for playing!\" ) sys . exit () # Switch to the other player ' s turn : if turn == X_PLAYER : turn = O_PLAYER elif turn == O_PLAYER : turn = X_PLAYER makeBoardFromSmallBoards def makeBoardFromSmallBoards ( smallBoards ) View Source def makeBoardFromSmallBoards ( smallBoards ): bigBoard = {} for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( smallBoards [( x , y )]) if winner == None : bigBoard [( x , y )] = EMPTY_SPACE elif winner == TIED : bigBoard [( x , y )] = TIED elif winner in ( X_PLAYER , O_PLAYER ): bigBoard [( x , y )] = winner return bigBoard","title":"Tictactoe"},{"location":"reference/quickpython/examples/tictactoe/#module-quickpythonexamplestictactoe","text":"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of a board with 9 spaces, this game has 9 boards with 81 spaces, the winner of each board placing their X or O on the big board! More info at: https://en.wikipedia.org/wiki/Ultimate_tic-tac-toe This and other games are available at https://nostarch.com/XX Tags: large, game, board game, two-player View Source \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of a board with 9 spaces, this game has 9 boards with 81 spaces, the winner of each board placing their X or O on the big board! More info at: https://en.wikipedia.org/wiki/Ultimate_tic-tac-toe This and other games are available at https://nostarch.com/XX Tags: large, game, board game, two-player\"\"\" __version__ = 0 import sys # Set up the constants: O_PLAYER = \"O\" X_PLAYER = \"X\" TIED = \"tied\" EMPTY_SPACE = \".\" BOARD_WIDTH = 3 BOARD_HEIGHT = 3 CANVAS_WIDTH = 15 CANVAS_HEIGHT = 9 SUBCANVAS_WIDTH = 5 SUBCANVAS_HEIGHT = 3 def main (): print ( \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of tic-tac-toe with 9 spaces, this game has a \"big\" board made up of 9 \"small\" tic-tac-toe boards. Moving on a small board causes the next player to move on that relative board. Winning on a small board lets that player put their mark on the big board. The winner must get three in a row on the big board. \"\"\" ) turn = X_PLAYER # X will go first. gameBoard = getNewBoard () # focusX and focusY determine which small board the player moves on. # If they are both None, the player can choose a small board. focusX , focusY = None , None while True : # Main game loop. displayBoard ( gameBoard ) focusX , focusY = askForPlayerMove ( turn , gameBoard , focusX , focusY ) # Check for a big board winner: bigBoard = makeBoardFromSmallBoards ( gameBoard ) bigWinner = getWinner ( bigBoard ) if bigWinner == TIED : displayBoard ( gameBoard ) print ( \"The game is a tie!\" ) print ( \"Thanks for playing!\" ) sys . exit () elif bigWinner != None : displayBoard ( gameBoard ) print ( bigWinner , \"has won!\" ) print ( \"Thanks for playing!\" ) sys . exit () # Switch to the other player's turn: if turn == X_PLAYER : turn = O_PLAYER elif turn == O_PLAYER : turn = X_PLAYER def getNewBoard (): \"\"\"Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE.\"\"\" board = {} # Loop over each small board: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): board [( x , y )] = {} # Loop over each space on the small board: for smallX in range ( BOARD_WIDTH ): for smallY in range ( BOARD_HEIGHT ): board [( x , y )][( smallX , smallY )] = EMPTY_SPACE return board def displayBoard ( board ): \"\"\"Displays the big tic-tac-toe board on the screen.\"\"\" # The canvas is a dictionary that has keys of (x, y) tuples, and # the values are the character to print at that place on the screen. canvas = {} # First, put blank spaces on the entire canvas: for x in range ( CANVAS_WIDTH ): for y in range ( CANVAS_HEIGHT ): canvas [( x , y )] = \" \" # Second, fill in the big board Xs and Os on the canvas: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( board [( x , y )]) if winner == X_PLAYER : # Draw a large X for each small board X won: canvas [( x * 5 + 1 , y * 3 + 0 )] = \" \\\\ \" canvas [( x * 5 + 3 , y * 3 + 0 )] = \"/\" canvas [( x * 5 + 2 , y * 3 + 1 )] = \"X\" canvas [( x * 5 + 1 , y * 3 + 2 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \" \\\\ \" elif winner == O_PLAYER : # Draw a large O for each small board O won: canvas [( x * 5 + 2 , y * 3 + 0 )] = \"_\" canvas [( x * 5 + 1 , y * 3 + 1 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 1 )] = \" \\\\ \" canvas [( x * 5 + 1 , y * 3 + 2 )] = \" \\\\ \" canvas [( x * 5 + 2 , y * 3 + 2 )] = \"_\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \"/\" elif winner == TIED : # Draw a large ### block for tied small boards: for scx in range ( SUBCANVAS_WIDTH ): for scy in range ( SUBCANVAS_HEIGHT ): canvas [( x * 5 + scx , y * 3 + scy )] = \"#\" # Third, fill in the Xs and Os of the small boards on the canvas: for ix , smallTopLeftX in enumerate ([ 0 , 5 , 10 ]): for iy , smallTopLeftY in enumerate ([ 0 , 3 , 6 ]): if getWinner ( board [( ix , iy )]) != None : continue for x in range ( 3 ): for y in range ( 3 ): canvasx = smallTopLeftX + ( x * 2 ) canvasy = smallTopLeftY + y canvas [( canvasx , canvasy )] = board [( ix , iy )][( x , y )] # Print out the tic tac toe board: for y in range ( 9 ): for x in range ( 15 ): print ( canvas [( x , y )], end = \"\" ) if x == 4 or x == 9 : print ( \"|\" , end = \"\" ) print () # Print a newline. if y == 2 or y == 5 : print ( \"-----+-----+-----\" ) def getWinner ( board ): \"\"\"Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet.\"\"\" # Create short-named variables for the spaces on this board. topL , topM , topR = board [( 0 , 0 )], board [( 1 , 0 )], board [( 2 , 0 )] midL , midM , midR = board [( 0 , 1 )], board [( 1 , 1 )], board [( 2 , 1 )] botL , botM , botR = board [( 0 , 2 )], board [( 1 , 2 )], board [( 2 , 2 )] for player in ( X_PLAYER , O_PLAYER ): if ( ( topL == topM == topR == player ) or ( midL == midM == midR == player ) # Top row or ( botL == botM == botR == player ) # Middle row or ( topL == midL == botL == player ) # Bottom row or ( topM == midM == botM == player ) # Left column or ( topR == midR == botR == player ) # Middle column or ( topL == midM == botR == player ) # Right column or ( topR == midM == botL == player ) # \\ diagonal ): # / diagonal return player # Check for a tie: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): if board [( x , y )] == EMPTY_SPACE : return None # Return None since there is no winner yet. return TIED def askForPlayerMove ( player , board , focusX , focusY ): \"\"\"Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. \"\"\" # Check if the player can freely select any small board: if focusX == None and focusY == None : # Let the player pick which board they want to move on: print ( player + \": Enter the BOARD you want to move on.\" ) validBoardsToSelect = [] for xyTuple , smallBoard in board . items (): if getWinner ( smallBoard ) == None : validBoardsToSelect . append ( xyTuple ) selectedBoard = enter1Through9 ( validBoardsToSelect ) focusX = selectedBoard % 3 focusY = selectedBoard // 3 # Select the space on the focused small board: smallXDesc = [ \"left\" , \"middle\" , \"right\" ][ focusX ] smallYDesc = [ \"top\" , \"middle\" , \"bottom\" ][ focusY ] print ( player , \"moves on the\" , smallYDesc , smallXDesc , \"board.\" ) validSpacesToSelect = [] for xyTuple , tile in board [( focusX , focusY )] . items (): if tile == EMPTY_SPACE : validSpacesToSelect . append ( xyTuple ) selectedSpace = enter1Through9 ( validSpacesToSelect ) x = selectedSpace % 3 y = selectedSpace // 3 board [( focusX , focusY )][( x , y )] = player # Figure out the small board that the next player must move on: if getWinner ( board [( x , y )]) == None : return ( x , y ) else : # If the small board has a winner or is tied, the next player # can move on any small board: return ( None , None ) def enter1Through9 ( validMoves ): \"\"\"Presents a \"minimap\" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces.\"\"\" for i , move in enumerate ( validMoves ): # Convert the (x, y) tuple values to an integer 1 through 9: validMoves [ i ] = str (( move [ 1 ] * 3 + move [ 0 ]) + 1 ) print ( \" 1 2 3\" ) print ( \" 4 5 6\" ) print ( \" 7 8 9\" ) print ( \"Enter your move (1-9) or QUIT:\" ) while True : # Keep asking the player until they enter a valid move. response = input ( \"> \" ) . upper () if response == \"QUIT\" : print ( \"Thanks for playing!\" ) sys . exit () if response in validMoves : # Return a int that is 0-8, not a string that is 1-9. return int ( response ) - 1 print ( \"You cannot select that space.\" ) def makeBoardFromSmallBoards ( smallBoards ): bigBoard = {} for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( smallBoards [( x , y )]) if winner == None : bigBoard [( x , y )] = EMPTY_SPACE elif winner == TIED : bigBoard [( x , y )] = TIED elif winner in ( X_PLAYER , O_PLAYER ): bigBoard [( x , y )] = winner return bigBoard # If the program is run (instead of imported), run the game: if __name__ == \"__main__\" : main ()","title":"Module quickpython.examples.tictactoe"},{"location":"reference/quickpython/examples/tictactoe/#variables","text":"BOARD_HEIGHT BOARD_WIDTH CANVAS_HEIGHT CANVAS_WIDTH EMPTY_SPACE O_PLAYER SUBCANVAS_HEIGHT SUBCANVAS_WIDTH TIED X_PLAYER","title":"Variables"},{"location":"reference/quickpython/examples/tictactoe/#functions","text":"","title":"Functions"},{"location":"reference/quickpython/examples/tictactoe/#askforplayermove","text":"def askForPlayerMove ( player , board , focusX , focusY ) Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. View Source def askForPlayerMove ( player , board , focusX , focusY ) : \"\"\"Asks the player which space on which small board to move on. The focusX and focusY values determine which small board the player can move on, but if they are both None the player can freely choose a small board. Returns the (x, y) of the small board the next player plays on. \"\"\" # Check if the player can freely select any small board : if focusX == None and focusY == None : # Let the player pick which board they want to move on : print ( player + \": Enter the BOARD you want to move on.\" ) validBoardsToSelect = [] for xyTuple , smallBoard in board . items () : if getWinner ( smallBoard ) == None : validBoardsToSelect . append ( xyTuple ) selectedBoard = enter1Through9 ( validBoardsToSelect ) focusX = selectedBoard % 3 focusY = selectedBoard // 3 # Select the space on the focused small board : smallXDesc = [ \"left\", \"middle\", \"right\" ][ focusX ] smallYDesc = [ \"top\", \"middle\", \"bottom\" ][ focusY ] print ( player , \"moves on the\" , smallYDesc , smallXDesc , \"board.\" ) validSpacesToSelect = [] for xyTuple , tile in board [ (focusX, focusY) ] . items () : if tile == EMPTY_SPACE : validSpacesToSelect . append ( xyTuple ) selectedSpace = enter1Through9 ( validSpacesToSelect ) x = selectedSpace % 3 y = selectedSpace // 3 board [ (focusX, focusY) ][ (x, y) ] = player # Figure out the small board that the next player must move on : if getWinner ( board [ (x, y) ] ) == None : return ( x , y ) else : # If the small board has a winner or is tied , the next player # can move on any small board : return ( None , None )","title":"askForPlayerMove"},{"location":"reference/quickpython/examples/tictactoe/#displayboard","text":"def displayBoard ( board ) Displays the big tic-tac-toe board on the screen. View Source def displayBoard ( board ): \"\"\"Displays the big tic-tac-toe board on the screen.\"\"\" # The canvas is a dictionary that has keys of (x, y) tuples, and # the values are the character to print at that place on the screen. canvas = {} # First, put blank spaces on the entire canvas: for x in range ( CANVAS_WIDTH ): for y in range ( CANVAS_HEIGHT ): canvas [( x , y )] = \" \" # Second, fill in the big board Xs and Os on the canvas: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( board [( x , y )]) if winner == X_PLAYER : # Draw a large X for each small board X won: canvas [( x * 5 + 1 , y * 3 + 0 )] = \" \\\\ \" canvas [( x * 5 + 3 , y * 3 + 0 )] = \"/\" canvas [( x * 5 + 2 , y * 3 + 1 )] = \"X\" canvas [( x * 5 + 1 , y * 3 + 2 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \" \\\\ \" elif winner == O_PLAYER : # Draw a large O for each small board O won: canvas [( x * 5 + 2 , y * 3 + 0 )] = \"_\" canvas [( x * 5 + 1 , y * 3 + 1 )] = \"/\" canvas [( x * 5 + 3 , y * 3 + 1 )] = \" \\\\ \" canvas [( x * 5 + 1 , y * 3 + 2 )] = \" \\\\ \" canvas [( x * 5 + 2 , y * 3 + 2 )] = \"_\" canvas [( x * 5 + 3 , y * 3 + 2 )] = \"/\" elif winner == TIED : # Draw a large ### block for tied small boards: for scx in range ( SUBCANVAS_WIDTH ): for scy in range ( SUBCANVAS_HEIGHT ): canvas [( x * 5 + scx , y * 3 + scy )] = \"#\" # Third, fill in the Xs and Os of the small boards on the canvas: for ix , smallTopLeftX in enumerate ([ 0 , 5 , 10 ]): for iy , smallTopLeftY in enumerate ([ 0 , 3 , 6 ]): if getWinner ( board [( ix , iy )]) != None : continue for x in range ( 3 ): for y in range ( 3 ): canvasx = smallTopLeftX + ( x * 2 ) canvasy = smallTopLeftY + y canvas [( canvasx , canvasy )] = board [( ix , iy )][( x , y )] # Print out the tic tac toe board: for y in range ( 9 ): for x in range ( 15 ): print ( canvas [( x , y )], end = \"\" ) if x == 4 or x == 9 : print ( \"|\" , end = \"\" ) print () # Print a newline. if y == 2 or y == 5 : print ( \"-----+-----+-----\" )","title":"displayBoard"},{"location":"reference/quickpython/examples/tictactoe/#enter1through9","text":"def enter1Through9 ( validMoves ) Presents a \"minimap\" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces. View Source def enter1Through9 ( validMoves ): \"\"\"Presents a \" minimap \" of a tic-tac-toe board's spaces, labeled with numbers 1 through 9. Returns the numeric space they chose. Valid moves is a list of (x, y) tuples representing the spaces the player can pick, e.g. [(0, 0), (0, 2)] means the player can only pick the top two corner spaces.\"\"\" for i , move in enumerate ( validMoves ): # Convert the (x, y) tuple values to an integer 1 through 9: validMoves [ i ] = str (( move [ 1 ] * 3 + move [ 0 ]) + 1 ) print ( \" 1 2 3\" ) print ( \" 4 5 6\" ) print ( \" 7 8 9\" ) print ( \"Enter your move (1-9) or QUIT:\" ) while True: # Keep asking the player until they enter a valid move. response = input ( \"> \" ). upper () if response == \"QUIT\" : print ( \"Thanks for playing!\" ) sys . exit () if response in validMoves: # Return a int that is 0-8, not a string that is 1-9. return int ( response ) - 1 print ( \"You cannot select that space.\" )","title":"enter1Through9"},{"location":"reference/quickpython/examples/tictactoe/#getnewboard","text":"def getNewBoard ( ) Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE. View Source def getNewBoard (): \"\"\"Returns a dictionary that represents the big tic-tac-toe board. Keys are (x, y) int tuples that span from 0 to 2, the values are dictonaries that represent small tic-tac-toe boards. These dictionaries have (x, y) int tuples as well, and their values are either X_PLAYER, O_PLAYER, or EMPTY_SPACE.\"\"\" board = {} # Loop over each small board : for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): board [( x , y )] = {} # Loop over each space on the small board : for smallX in range ( BOARD_WIDTH ): for smallY in range ( BOARD_HEIGHT ): board [( x , y )][( smallX , smallY )] = EMPTY_SPACE return board","title":"getNewBoard"},{"location":"reference/quickpython/examples/tictactoe/#getwinner","text":"def getWinner ( board ) Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet. View Source def getWinner ( board ): \"\"\"Return X_PLAYER, O_PLAYER, or TIED depending on who won. Return None if there is no winner and the board isn't full yet.\"\"\" # Create short-named variables for the spaces on this board. topL , topM , topR = board [( 0 , 0 )], board [( 1 , 0 )], board [( 2 , 0 )] midL , midM , midR = board [( 0 , 1 )], board [( 1 , 1 )], board [( 2 , 1 )] botL , botM , botR = board [( 0 , 2 )], board [( 1 , 2 )], board [( 2 , 2 )] for player in ( X_PLAYER , O_PLAYER ): if ( ( topL == topM == topR == player ) or ( midL == midM == midR == player ) # Top row or ( botL == botM == botR == player ) # Middle row or ( topL == midL == botL == player ) # Bottom row or ( topM == midM == botM == player ) # Left column or ( topR == midR == botR == player ) # Middle column or ( topL == midM == botR == player ) # Right column or ( topR == midM == botL == player ) # \\ diagonal ): # / diagonal return player # Check for a tie: for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): if board [( x , y )] == EMPTY_SPACE : return None # Return None since there is no winner yet. return TIED","title":"getWinner"},{"location":"reference/quickpython/examples/tictactoe/#main","text":"def main ( ) View Source def main () : print ( \"\"\"Ultimate Tic-Tac-Toe, by Al Sweigart al@inventwithpython.com Instead of tic-tac-toe with 9 spaces, this game has a \" big \" board made up of 9 \" small \" tic-tac-toe boards. Moving on a small board causes the next player to move on that relative board. Winning on a small board lets that player put their mark on the big board. The winner must get three in a row on the big board. \"\"\" ) turn = X_PLAYER # X will go first . gameBoard = getNewBoard () # focusX and focusY determine which small board the player moves on . # If they are both None , the player can choose a small board . focusX , focusY = None , None while True : # Main game loop . displayBoard ( gameBoard ) focusX , focusY = askForPlayerMove ( turn , gameBoard , focusX , focusY ) # Check for a big board winner : bigBoard = makeBoardFromSmallBoards ( gameBoard ) bigWinner = getWinner ( bigBoard ) if bigWinner == TIED : displayBoard ( gameBoard ) print ( \"The game is a tie!\" ) print ( \"Thanks for playing!\" ) sys . exit () elif bigWinner != None : displayBoard ( gameBoard ) print ( bigWinner , \"has won!\" ) print ( \"Thanks for playing!\" ) sys . exit () # Switch to the other player ' s turn : if turn == X_PLAYER : turn = O_PLAYER elif turn == O_PLAYER : turn = X_PLAYER","title":"main"},{"location":"reference/quickpython/examples/tictactoe/#makeboardfromsmallboards","text":"def makeBoardFromSmallBoards ( smallBoards ) View Source def makeBoardFromSmallBoards ( smallBoards ): bigBoard = {} for x in range ( BOARD_WIDTH ): for y in range ( BOARD_HEIGHT ): winner = getWinner ( smallBoards [( x , y )]) if winner == None : bigBoard [( x , y )] = EMPTY_SPACE elif winner == TIED : bigBoard [( x , y )] = TIED elif winner in ( X_PLAYER , O_PLAYER ): bigBoard [( x , y )] = winner return bigBoard","title":"makeBoardFromSmallBoards"},{"location":"reference/quickpython/examples/towers/","text":"Module quickpython.examples.towers /games/towers.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/towers.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import colorama import pyfiglet HEIGHTS = { \"easy\" : 3 , \"intermediate\" : 4 , \"hard\" : 5 } class Towers : def __init__ ( self , difficulty : str ): \"\"\" initializes a `Towers` object \"\"\" self . tower_height = HEIGHTS [ difficulty ] def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" }: cls () print () difficulty = input ( \"difficulty; \\n > \" ) . strip () game = Towers ( difficulty ) game . start () Variables HEIGHTS Classes Towers class Towers ( difficulty : str ) View Source class Towers : def __init__ ( self , difficulty : str ) : \" \"\" initializes a `Towers` object \"\" \" self . tower_height = HEIGHTS [ difficulty ] def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Towers"},{"location":"reference/quickpython/examples/towers/#module-quickpythonexamplestowers","text":"/games/towers.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/towers.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 0 , 0 , 1 , \"alpha\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import colorama import pyfiglet HEIGHTS = { \"easy\" : 3 , \"intermediate\" : 4 , \"hard\" : 5 } class Towers : def __init__ ( self , difficulty : str ): \"\"\" initializes a `Towers` object \"\"\" self . tower_height = HEIGHTS [ difficulty ] def game ( self ): \"\"\" starts the game \"\"\" pass def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : difficulty = None while difficulty not in { \"easy\" , \"intermediate\" , \"hard\" }: cls () print () difficulty = input ( \"difficulty; \\n > \" ) . strip () game = Towers ( difficulty ) game . start ()","title":"Module quickpython.examples.towers"},{"location":"reference/quickpython/examples/towers/#variables","text":"HEIGHTS","title":"Variables"},{"location":"reference/quickpython/examples/towers/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/towers/#towers","text":"class Towers ( difficulty : str ) View Source class Towers : def __init__ ( self , difficulty : str ) : \" \"\" initializes a `Towers` object \"\" \" self . tower_height = HEIGHTS [ difficulty ] def game ( self ) : \" \"\" starts the game \"\" \" pass def start ( self ) : \" \"\" calls `self.game` in a 'would you like to play again?' loop \"\" \" choice = \"y\" while choice . startswith ( \"y\" ) : cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ). strip ()","title":"Towers"},{"location":"reference/quickpython/examples/towers/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/towers/#game","text":"def game ( self ) starts the game View Source def game ( self ): \"\"\" starts the game \"\"\" pass","title":"game"},{"location":"reference/quickpython/examples/towers/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Towers\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/uno/","text":"Module quickpython.examples.uno /games/uno.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/uno.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 2 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import colorama import pyfiglet CARD_COLORS = [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ] CARD_NAMES = [ \"0\" , \"1\" , \"1\" , \"2\" , \"2\" , \"3\" , \"3\" , \"4\" , \"4\" , \"5\" , \"5\" , \"6\" , \"6\" , \"7\" , \"7\" , \"8\" , \"8\" , \"9\" , \"9\" , \"Reverse\" , \"Skip\" , \"+2\" , ] START_HAND = 7 COLOR_FORMATS = { \"Blue\" : colorama . Fore . BLUE , \"Green\" : colorama . Fore . GREEN , \"Red\" : colorama . Fore . RED , \"Yellow\" : colorama . Fore . YELLOW , } class Card : def __init__ ( self , color : str , name : str ): \"\"\" initializes a `Card` object \"\"\" self . color = color self . name = name def format ( self ) -> str : \"\"\" formats the card with cli color codes returns: :: str :: the formatted card \"\"\" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ], self . short_name , colorama . Fore . RESET ) return self . short_name def is_wild ( self ) -> bool : \"\"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\"\" if self . color == \"Wild\" : return True return False @property def short_name ( self ) -> str : \"\"\" generates a short name for the `Card` object returns: :: str :: the `Card` object's short name \"\"\" return \"{}{}\" . format ( self . color [: 1 :], self . name [: 1 :]) class Deck : def __init__ ( self ): \"\"\" initializes a `Deck` object \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () # add color cards for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) # add wildcards for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def flip ( self ): \"\"\" flips `self.in_pile` back over into `self.deck` \"\"\" if not self . deck : self . deck = self . in_pile self . in_pile = list () def is_empty ( self ) -> bool : \"\"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\"\" if len ( self . deck ) == 0 : return True return False def reset ( self ): \"\"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def shuffle ( self ): \"\"\" shuffles `self.deck` \"\"\" random . shuffle ( self . deck ) class Hand : def __init__ ( self , deck : Deck ): \"\"\" initializes a `Hand` object \"\"\" self . deck = deck self . hand = list () def __len__ ( self ) -> int : \"\"\" utilized by built-in `len` function \"\"\" return len ( self . hand ) def generate ( self ): \"\"\" fills `self.hand` up to len( `START_HAND` ) \"\"\" for i in range ( START_HAND ): card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card ) def reset ( self ): \"\"\" sets `self.hand` to an empty list \"\"\" self . hand = list () class Player : def __init__ ( self , name : str , deck : Deck ): \"\"\" initializes a `Player` object \"\"\" self . name = name self . deck = deck self . hand = Hand ( self . deck ) def is_winner ( self ) -> bool : \"\"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\"\" if len ( self . hand ) == 0 : return True return False class Uno : def __init__ ( self , player_count : int ): \"\"\" initializes an `Uno` object \"\"\" self . player_count = player_count def game ( self ): \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ): self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ([ player . is_winner () for player in self . players ]): cls () if self . color : color = COLOR_FORMATS [ self . color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/ \\\\ \" , \" \" , \" \" , \" \" ] elif self . current_player == 1 : pointers = [ \" \" , \">\" , \" \" , \" \" ] elif self . current_player == 2 : pointers = [ \" \" , \" \" , \" \\\\ /\" , \" \" ] elif self . current_player == 3 : pointers = [ \" \" , \" \" , \" \" , \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place; \\n > \" ) . strip () . upper () if card == \"+\" : if self . deck . is_empty (): self . deck . flip () card = self . deck . deck . pop () self . players [ self . current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self . current_player ] . hand . hand ) + 1 ): self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self . current_player ] . hand . hand ) ) ) continue card = self . players [ self . current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card . short_name for card in self . players [ self . current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self . current_player ] . hand . hand ) ) ) continue card = self . players [ self . current_player ] . hand . hand [ [ card . short_name for card in self . players [ self . current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self . current_player ] . hand . hand . pop ( self . players [ self . current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ]: cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color; \\n > \" ) . strip () . capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ]: cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color; \\n > \" ) . strip () . capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don't want to change the player continue if self . clockwise : next_player = self . current_player + 1 else : next_player = self . current_player - 1 if next_player > ( len ( self . players ) - 1 ): next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) if add_cards : for i in range ( add_cards ): if self . deck . is_empty (): self . deck . flip () card = self . deck . deck . pop () self . players [ next_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) if skip_player : if self . clockwise : next_player = self . current_player + 2 else : next_player = self . current_player - 2 if next_player > ( len ( self . players ) - 1 ): next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) self . current_player = next_player winner = [ player for player in self . players if player . is_winner ()][ 0 ] cls () print () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () print ( \"{0} wins!\" . format ( winner . name )) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Uno\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : players = None while not isinstance ( players , int ): cls () players = input ( \"players; \\n > \" ) try : players = int ( players ) except ( ValueError ) as e : pass game = Uno ( players ) game . start () Variables CARD_COLORS CARD_NAMES COLOR_FORMATS START_HAND Classes Card class Card ( color : str , name : str ) View Source class Card : def __init__ ( self , color : str , name : str ) : \" \"\" initializes a `Card` object \"\" \" self . color = color self . name = name def format ( self ) -> str : \" \"\" formats the card with cli color codes returns: :: str :: the formatted card \"\" \" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ] , self . short_name , colorama . Fore . RESET ) return self . short_name def is_wild ( self ) -> bool : \" \"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\" \" if self . color == \"Wild\" : return True return False @property def short_name ( self ) -> str : \" \"\" generates a short name for the `Card` object returns: :: str :: the `Card` object's short name \"\" \" return \"{}{}\" . format ( self . color [ : 1 : ] , self . name [ : 1 : ] ) Instance variables short_name generates a short name for the Card object returns: :: str :: the Card object's short name Methods format def format ( self ) -> str formats the card with cli color codes returns: :: str :: the formatted card View Source def format ( self ) -> str : \"\"\" formats the card with cli color codes returns: :: str :: the formatted card \"\"\" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ], self . short_name , colorama . Fore . RESET ) return self . short_name is_wild def is_wild ( self ) -> bool checks whether the Card object is a wildcard returns: :: bool :: whether the Card object is a wildcard View Source def is_wild ( self ) -> bool : \" \"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\" \" if self . color == \"Wild\" : return True return False Deck class Deck ( ) View Source class Deck : def __init__ ( self ) : \" \"\" initializes a `Deck` object \"\" \" self . deck = list () self . in_play = list () self . in_pile = list () # add color cards for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) # add wildcards for i in range ( 4 ) : for name in [ \"Change\" , \"+4\" ] : self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def flip ( self ) : \" \"\" flips `self.in_pile` back over into `self.deck` \"\" \" if not self . deck : self . deck = self . in_pile self . in_pile = list () def is_empty ( self ) -> bool : \" \"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\" \" if len ( self . deck ) == 0 : return True return False def reset ( self ) : \" \"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\" \" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ) : for name in [ \"Change\" , \"+4\" ] : self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def shuffle ( self ) : \" \"\" shuffles `self.deck` \"\" \" random . shuffle ( self . deck ) Methods flip def flip ( self ) flips self.in_pile back over into self.deck View Source def flip ( self ): \"\"\" flips `self.in_pile` back over into `self.deck` \"\"\" if not self . deck : self . deck = self . in_pile self . in_pile = list () is_empty def is_empty ( self ) -> bool checks whether self.deck is empty returns: :: bool :: whether self.deck is empty View Source def is_empty ( self ) -> bool : \"\"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\"\" if len ( self . deck ) == 0 : return True return False reset def reset ( self ) re-builds self.deck , self.in_play and self.in_pile and calls self.shuffle View Source def reset ( self ): \"\"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () shuffle def shuffle ( self ) shuffles self.deck View Source def shuffle ( self ): \"\"\" shuffles `self.deck` \"\"\" random . shuffle ( self . deck ) Hand class Hand ( deck : quickpython . examples . uno . Deck ) View Source class Hand : def __init__ ( self , deck : Deck ) : \" \"\" initializes a `Hand` object \"\" \" self . deck = deck self . hand = list () def __len__ ( self ) -> int : \" \"\" utilized by built-in `len` function \"\" \" return len ( self . hand ) def generate ( self ) : \" \"\" fills `self.hand` up to len( `START_HAND` ) \"\" \" for i in range ( START_HAND ) : card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card ) def reset ( self ) : \" \"\" sets `self.hand` to an empty list \"\" \" self . hand = list () Methods generate def generate ( self ) fills self.hand up to len( START_HAND ) View Source def generate ( self ) : \" \"\" fills `self.hand` up to len( `START_HAND` ) \"\" \" for i in range ( START_HAND ) : card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card ) reset def reset ( self ) sets self.hand to an empty list View Source def reset ( self ): \"\"\" sets `self.hand` to an empty list \"\"\" self . hand = list () Player class Player ( name : str , deck : quickpython . examples . uno . Deck ) View Source class Player : def __init__ ( self , name : str , deck : Deck ) : \" \"\" initializes a `Player` object \"\" \" self . name = name self . deck = deck self . hand = Hand ( self . deck ) def is_winner ( self ) -> bool : \" \"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\" \" if len ( self . hand ) == 0 : return True return False Methods is_winner def is_winner ( self ) -> bool checks whether the Player has won the game returns: :: bool :: whether the Player has won the game View Source def is_winner ( self ) -> bool : \" \"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\" \" if len ( self . hand ) == 0 : return True return False Uno class Uno ( player_count : int ) View Source class Uno : def __init__ ( self , player_count : int ) : \"\"\" initializes an `Uno` object \"\"\" self . player_count = player_count def game ( self ) : \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ) : self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ( [ player.is_winner() for player in self.players ] ) : cls () if self . color : color = COLOR_FORMATS [ self.color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/\\\\\", \" \", \" \", \" \" ] elif self . current_player == 1 : pointers = [ \" \", \">\", \" \", \" \" ] elif self . current_player == 2 : pointers = [ \" \", \" \", \"\\\\/\", \" \" ] elif self . current_player == 3 : pointers = [ \" \", \" \", \" \", \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place;\\n> \" ). strip (). upper () if card == \"+\" : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ self.current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self.current_player ] . hand . hand ) + 1 ) : self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card.short_name for card in self.players[self.current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ [card.short_name for card in self.players[self.current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self.current_player ] . hand . hand . pop ( self . players [ self.current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don 't want to change the player continue if self.clockwise: next_player = self.current_player + 1 else: next_player = self.current_player - 1 if next_player > (len(self.players) - 1): next_player -= len(self.players) elif next_player < 0: next_player += len(self.players) if add_cards: for i in range(add_cards): if self.deck.is_empty(): self.deck.flip() card = self.deck.deck.pop() self.players[next_player].hand.hand.append(card) self.deck.in_play.append(card) if skip_player: if self.clockwise: next_player = self.current_player + 2 else: next_player = self.current_player - 2 if next_player > (len(self.players) - 1): next_player -= len(self.players) elif next_player < 0: next_player += len(self.players) self.current_player = next_player winner = [player for player in self.players if player.is_winner()][0] cls() print() print( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\".format( *players, len(self.deck.deck), color, self.top_card.format(), colorama.Fore.RESET, *pointers ) ) print() print(\"{0} wins!\".format(winner.name)) def start(self): \"\"\" calls `self.game` in a ' would you like to play again ? ' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Uno \")) print() input(\" enter to play \\ nctrl + c to quit to main menu \\ n \\ n \") self.game() choice = input(\" \\ nwould you like to play again ? \\ n > \" ). strip () Methods game def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ) : self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ( [ player.is_winner() for player in self.players ] ) : cls () if self . color : color = COLOR_FORMATS [ self.color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/\\\\\", \" \", \" \", \" \" ] elif self . current_player == 1 : pointers = [ \" \", \">\", \" \", \" \" ] elif self . current_player == 2 : pointers = [ \" \", \" \", \"\\\\/\", \" \" ] elif self . current_player == 3 : pointers = [ \" \", \" \", \" \", \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place;\\n> \" ). strip (). upper () if card == \"+\" : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ self.current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self.current_player ] . hand . hand ) + 1 ) : self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card.short_name for card in self.players[self.current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ [card.short_name for card in self.players[self.current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self.current_player ] . hand . hand . pop ( self . players [ self.current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don ' t want to change the player continue if self . clockwise : next_player = self . current_player + 1 else : next_player = self . current_player - 1 if next_player > ( len ( self . players ) - 1 ) : next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) if add_cards : for i in range ( add_cards ) : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ next_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) if skip_player : if self . clockwise : next_player = self . current_player + 2 else : next_player = self . current_player - 2 if next_player > ( len ( self . players ) - 1 ) : next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) self . current_player = next_player winner = [ player for player in self.players if player.is_winner() ][ 0 ] cls () print () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () print ( \"{0} wins!\" . format ( winner . name )) start def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Uno\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"Uno"},{"location":"reference/quickpython/examples/uno/#module-quickpythonexamplesuno","text":"/games/uno.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. View Source \"\"\" /games/uno.py Copyright (c) 2019 ShineyDev Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \"\"\" __authors__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __maintainers__ = [( \"shineydev\" , \"contact@shiney.dev\" )] __version_info__ = ( 2 , 0 , 0 , \"final\" , 0 ) __version__ = \"{0}.{1}.{2}{3}{4}\" . format ( * [ str ( n )[ 0 ] if ( i == 3 ) else str ( n ) for ( i , n ) in enumerate ( __version_info__ )] ) import os import random import colorama import pyfiglet CARD_COLORS = [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ] CARD_NAMES = [ \"0\" , \"1\" , \"1\" , \"2\" , \"2\" , \"3\" , \"3\" , \"4\" , \"4\" , \"5\" , \"5\" , \"6\" , \"6\" , \"7\" , \"7\" , \"8\" , \"8\" , \"9\" , \"9\" , \"Reverse\" , \"Skip\" , \"+2\" , ] START_HAND = 7 COLOR_FORMATS = { \"Blue\" : colorama . Fore . BLUE , \"Green\" : colorama . Fore . GREEN , \"Red\" : colorama . Fore . RED , \"Yellow\" : colorama . Fore . YELLOW , } class Card : def __init__ ( self , color : str , name : str ): \"\"\" initializes a `Card` object \"\"\" self . color = color self . name = name def format ( self ) -> str : \"\"\" formats the card with cli color codes returns: :: str :: the formatted card \"\"\" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ], self . short_name , colorama . Fore . RESET ) return self . short_name def is_wild ( self ) -> bool : \"\"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\"\" if self . color == \"Wild\" : return True return False @property def short_name ( self ) -> str : \"\"\" generates a short name for the `Card` object returns: :: str :: the `Card` object's short name \"\"\" return \"{}{}\" . format ( self . color [: 1 :], self . name [: 1 :]) class Deck : def __init__ ( self ): \"\"\" initializes a `Deck` object \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () # add color cards for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) # add wildcards for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def flip ( self ): \"\"\" flips `self.in_pile` back over into `self.deck` \"\"\" if not self . deck : self . deck = self . in_pile self . in_pile = list () def is_empty ( self ) -> bool : \"\"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\"\" if len ( self . deck ) == 0 : return True return False def reset ( self ): \"\"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def shuffle ( self ): \"\"\" shuffles `self.deck` \"\"\" random . shuffle ( self . deck ) class Hand : def __init__ ( self , deck : Deck ): \"\"\" initializes a `Hand` object \"\"\" self . deck = deck self . hand = list () def __len__ ( self ) -> int : \"\"\" utilized by built-in `len` function \"\"\" return len ( self . hand ) def generate ( self ): \"\"\" fills `self.hand` up to len( `START_HAND` ) \"\"\" for i in range ( START_HAND ): card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card ) def reset ( self ): \"\"\" sets `self.hand` to an empty list \"\"\" self . hand = list () class Player : def __init__ ( self , name : str , deck : Deck ): \"\"\" initializes a `Player` object \"\"\" self . name = name self . deck = deck self . hand = Hand ( self . deck ) def is_winner ( self ) -> bool : \"\"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\"\" if len ( self . hand ) == 0 : return True return False class Uno : def __init__ ( self , player_count : int ): \"\"\" initializes an `Uno` object \"\"\" self . player_count = player_count def game ( self ): \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ): self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self . players [ 0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ([ player . is_winner () for player in self . players ]): cls () if self . color : color = COLOR_FORMATS [ self . color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/ \\\\ \" , \" \" , \" \" , \" \" ] elif self . current_player == 1 : pointers = [ \" \" , \">\" , \" \" , \" \" ] elif self . current_player == 2 : pointers = [ \" \" , \" \" , \" \\\\ /\" , \" \" ] elif self . current_player == 3 : pointers = [ \" \" , \" \" , \" \" , \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place; \\n > \" ) . strip () . upper () if card == \"+\" : if self . deck . is_empty (): self . deck . flip () card = self . deck . deck . pop () self . players [ self . current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self . current_player ] . hand . hand ) + 1 ): self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self . current_player ] . hand . hand ) ) ) continue card = self . players [ self . current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card . short_name for card in self . players [ self . current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self . current_player ] . hand . hand ) ) ) continue card = self . players [ self . current_player ] . hand . hand [ [ card . short_name for card in self . players [ self . current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self . current_player ] . hand . hand . pop ( self . players [ self . current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ]: cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color; \\n > \" ) . strip () . capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\" , \"Green\" , \"Red\" , \"Yellow\" ]: cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self . current_player ] . name ) for card in self . players [ self . current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color; \\n > \" ) . strip () . capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don't want to change the player continue if self . clockwise : next_player = self . current_player + 1 else : next_player = self . current_player - 1 if next_player > ( len ( self . players ) - 1 ): next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) if add_cards : for i in range ( add_cards ): if self . deck . is_empty (): self . deck . flip () card = self . deck . deck . pop () self . players [ next_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) if skip_player : if self . clockwise : next_player = self . current_player + 2 else : next_player = self . current_player - 2 if next_player > ( len ( self . players ) - 1 ): next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) self . current_player = next_player winner = [ player for player in self . players if player . is_winner ()][ 0 ] cls () print () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () print ( \"{0} wins!\" . format ( winner . name )) def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Uno\" )) print () input ( \"enter to play \\n ctrl + c to quit to main menu \\n\\n \" ) self . game () choice = input ( \" \\n would you like to play again? \\n > \" ) . strip () if __name__ == \"__main__\" : players = None while not isinstance ( players , int ): cls () players = input ( \"players; \\n > \" ) try : players = int ( players ) except ( ValueError ) as e : pass game = Uno ( players ) game . start ()","title":"Module quickpython.examples.uno"},{"location":"reference/quickpython/examples/uno/#variables","text":"CARD_COLORS CARD_NAMES COLOR_FORMATS START_HAND","title":"Variables"},{"location":"reference/quickpython/examples/uno/#classes","text":"","title":"Classes"},{"location":"reference/quickpython/examples/uno/#card","text":"class Card ( color : str , name : str ) View Source class Card : def __init__ ( self , color : str , name : str ) : \" \"\" initializes a `Card` object \"\" \" self . color = color self . name = name def format ( self ) -> str : \" \"\" formats the card with cli color codes returns: :: str :: the formatted card \"\" \" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ] , self . short_name , colorama . Fore . RESET ) return self . short_name def is_wild ( self ) -> bool : \" \"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\" \" if self . color == \"Wild\" : return True return False @property def short_name ( self ) -> str : \" \"\" generates a short name for the `Card` object returns: :: str :: the `Card` object's short name \"\" \" return \"{}{}\" . format ( self . color [ : 1 : ] , self . name [ : 1 : ] )","title":"Card"},{"location":"reference/quickpython/examples/uno/#instance-variables","text":"short_name generates a short name for the Card object returns: :: str :: the Card object's short name","title":"Instance variables"},{"location":"reference/quickpython/examples/uno/#methods","text":"","title":"Methods"},{"location":"reference/quickpython/examples/uno/#format","text":"def format ( self ) -> str formats the card with cli color codes returns: :: str :: the formatted card View Source def format ( self ) -> str : \"\"\" formats the card with cli color codes returns: :: str :: the formatted card \"\"\" if self . color != \"Wild\" : return \"{}{}{}\" . format ( COLOR_FORMATS [ self . color ], self . short_name , colorama . Fore . RESET ) return self . short_name","title":"format"},{"location":"reference/quickpython/examples/uno/#is_wild","text":"def is_wild ( self ) -> bool checks whether the Card object is a wildcard returns: :: bool :: whether the Card object is a wildcard View Source def is_wild ( self ) -> bool : \" \"\" checks whether the `Card` object is a wildcard returns: :: bool :: whether the `Card` object is a wildcard \"\" \" if self . color == \"Wild\" : return True return False","title":"is_wild"},{"location":"reference/quickpython/examples/uno/#deck","text":"class Deck ( ) View Source class Deck : def __init__ ( self ) : \" \"\" initializes a `Deck` object \"\" \" self . deck = list () self . in_play = list () self . in_pile = list () # add color cards for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) # add wildcards for i in range ( 4 ) : for name in [ \"Change\" , \"+4\" ] : self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def flip ( self ) : \" \"\" flips `self.in_pile` back over into `self.deck` \"\" \" if not self . deck : self . deck = self . in_pile self . in_pile = list () def is_empty ( self ) -> bool : \" \"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\" \" if len ( self . deck ) == 0 : return True return False def reset ( self ) : \" \"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\" \" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ) : for name in [ \"Change\" , \"+4\" ] : self . deck . append ( Card ( \"Wild\" , name )) self . shuffle () def shuffle ( self ) : \" \"\" shuffles `self.deck` \"\" \" random . shuffle ( self . deck )","title":"Deck"},{"location":"reference/quickpython/examples/uno/#methods_1","text":"","title":"Methods"},{"location":"reference/quickpython/examples/uno/#flip","text":"def flip ( self ) flips self.in_pile back over into self.deck View Source def flip ( self ): \"\"\" flips `self.in_pile` back over into `self.deck` \"\"\" if not self . deck : self . deck = self . in_pile self . in_pile = list ()","title":"flip"},{"location":"reference/quickpython/examples/uno/#is_empty","text":"def is_empty ( self ) -> bool checks whether self.deck is empty returns: :: bool :: whether self.deck is empty View Source def is_empty ( self ) -> bool : \"\"\" checks whether `self.deck` is empty returns: :: bool :: whether `self.deck` is empty \"\"\" if len ( self . deck ) == 0 : return True return False","title":"is_empty"},{"location":"reference/quickpython/examples/uno/#reset","text":"def reset ( self ) re-builds self.deck , self.in_play and self.in_pile and calls self.shuffle View Source def reset ( self ): \"\"\" re-builds `self.deck`, `self.in_play` and `self.in_pile` and calls `self.shuffle` \"\"\" self . deck = list () self . in_play = list () self . in_pile = list () for color in CARD_COLORS : for name in CARD_NAMES : self . deck . append ( Card ( color , name )) for i in range ( 4 ): for name in [ \"Change\" , \"+4\" ]: self . deck . append ( Card ( \"Wild\" , name )) self . shuffle ()","title":"reset"},{"location":"reference/quickpython/examples/uno/#shuffle","text":"def shuffle ( self ) shuffles self.deck View Source def shuffle ( self ): \"\"\" shuffles `self.deck` \"\"\" random . shuffle ( self . deck )","title":"shuffle"},{"location":"reference/quickpython/examples/uno/#hand","text":"class Hand ( deck : quickpython . examples . uno . Deck ) View Source class Hand : def __init__ ( self , deck : Deck ) : \" \"\" initializes a `Hand` object \"\" \" self . deck = deck self . hand = list () def __len__ ( self ) -> int : \" \"\" utilized by built-in `len` function \"\" \" return len ( self . hand ) def generate ( self ) : \" \"\" fills `self.hand` up to len( `START_HAND` ) \"\" \" for i in range ( START_HAND ) : card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card ) def reset ( self ) : \" \"\" sets `self.hand` to an empty list \"\" \" self . hand = list ()","title":"Hand"},{"location":"reference/quickpython/examples/uno/#methods_2","text":"","title":"Methods"},{"location":"reference/quickpython/examples/uno/#generate","text":"def generate ( self ) fills self.hand up to len( START_HAND ) View Source def generate ( self ) : \" \"\" fills `self.hand` up to len( `START_HAND` ) \"\" \" for i in range ( START_HAND ) : card = self . deck . deck . pop () self . hand . append ( card ) self . deck . in_play . append ( card )","title":"generate"},{"location":"reference/quickpython/examples/uno/#reset_1","text":"def reset ( self ) sets self.hand to an empty list View Source def reset ( self ): \"\"\" sets `self.hand` to an empty list \"\"\" self . hand = list ()","title":"reset"},{"location":"reference/quickpython/examples/uno/#player","text":"class Player ( name : str , deck : quickpython . examples . uno . Deck ) View Source class Player : def __init__ ( self , name : str , deck : Deck ) : \" \"\" initializes a `Player` object \"\" \" self . name = name self . deck = deck self . hand = Hand ( self . deck ) def is_winner ( self ) -> bool : \" \"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\" \" if len ( self . hand ) == 0 : return True return False","title":"Player"},{"location":"reference/quickpython/examples/uno/#methods_3","text":"","title":"Methods"},{"location":"reference/quickpython/examples/uno/#is_winner","text":"def is_winner ( self ) -> bool checks whether the Player has won the game returns: :: bool :: whether the Player has won the game View Source def is_winner ( self ) -> bool : \" \"\" checks whether the `Player` has won the game returns: :: bool :: whether the `Player` has won the game \"\" \" if len ( self . hand ) == 0 : return True return False","title":"is_winner"},{"location":"reference/quickpython/examples/uno/#uno","text":"class Uno ( player_count : int ) View Source class Uno : def __init__ ( self , player_count : int ) : \"\"\" initializes an `Uno` object \"\"\" self . player_count = player_count def game ( self ) : \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ) : self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ( [ player.is_winner() for player in self.players ] ) : cls () if self . color : color = COLOR_FORMATS [ self.color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/\\\\\", \" \", \" \", \" \" ] elif self . current_player == 1 : pointers = [ \" \", \">\", \" \", \" \" ] elif self . current_player == 2 : pointers = [ \" \", \" \", \"\\\\/\", \" \" ] elif self . current_player == 3 : pointers = [ \" \", \" \", \" \", \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place;\\n> \" ). strip (). upper () if card == \"+\" : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ self.current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self.current_player ] . hand . hand ) + 1 ) : self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card.short_name for card in self.players[self.current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ [card.short_name for card in self.players[self.current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self.current_player ] . hand . hand . pop ( self . players [ self.current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don 't want to change the player continue if self.clockwise: next_player = self.current_player + 1 else: next_player = self.current_player - 1 if next_player > (len(self.players) - 1): next_player -= len(self.players) elif next_player < 0: next_player += len(self.players) if add_cards: for i in range(add_cards): if self.deck.is_empty(): self.deck.flip() card = self.deck.deck.pop() self.players[next_player].hand.hand.append(card) self.deck.in_play.append(card) if skip_player: if self.clockwise: next_player = self.current_player + 2 else: next_player = self.current_player - 2 if next_player > (len(self.players) - 1): next_player -= len(self.players) elif next_player < 0: next_player += len(self.players) self.current_player = next_player winner = [player for player in self.players if player.is_winner()][0] cls() print() print( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\".format( *players, len(self.deck.deck), color, self.top_card.format(), colorama.Fore.RESET, *pointers ) ) print() print(\"{0} wins!\".format(winner.name)) def start(self): \"\"\" calls `self.game` in a ' would you like to play again ? ' loop \"\"\" choice = \" y \" while choice.startswith(\" y \"): cls() print(pyfiglet.figlet_format(\" Uno \")) print() input(\" enter to play \\ nctrl + c to quit to main menu \\ n \\ n \") self.game() choice = input(\" \\ nwould you like to play again ? \\ n > \" ). strip ()","title":"Uno"},{"location":"reference/quickpython/examples/uno/#methods_4","text":"","title":"Methods"},{"location":"reference/quickpython/examples/uno/#game","text":"def game ( self ) starts the game View Source def game ( self ) : \"\"\" starts the game \"\"\" self . deck = Deck () self . players = list () self . current_player = 0 self . clockwise = True self . message = \"\" self . color = None for i in range ( self . player_count ) : self . players . append ( Player ( \"P{}\" . format ( i + 1 ), self . deck )) self . players [ i ] . hand . generate () card = self . deck . deck . pop () self . top_card = card self . deck . in_pile . append ( card ) if len ( self . players ) == 2 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , \"--\" , \"--\" ] elif len ( self . players ) == 3 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , \"--\" , ] elif len ( self . players ) == 4 : players = [ self.players[0 ] . name , self . players [ 1 ] . name , self . players [ 2 ] . name , self . players [ 3 ] . name , ] while not any ( [ player.is_winner() for player in self.players ] ) : cls () if self . color : color = COLOR_FORMATS [ self.color ] else : color = \"\" if self . current_player == 0 : pointers = [ \"/\\\\\", \" \", \" \", \" \" ] elif self . current_player == 1 : pointers = [ \" \", \">\", \" \", \" \" ] elif self . current_player == 2 : pointers = [ \" \", \" \", \"\\\\/\", \" \" ] elif self . current_player == 3 : pointers = [ \" \", \" \", \" \", \"<\" ] print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () card = input ( \"choose a card to place;\\n> \" ). strip (). upper () if card == \"+\" : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ self.current_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) continue try : card_index = int ( card ) if card_index not in range ( 1 , len ( self . players [ self.current_player ] . hand . hand ) + 1 ) : self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ card_index - 1 ] except ( ValueError ) as e : if card not in [ card.short_name for card in self.players[self.current_player ] . hand . hand ]: self . message = ( \"card must be an integer in range 1 - {0} or the card name\" . format ( len ( self . players [ self.current_player ] . hand . hand ) ) ) continue card = self . players [ self.current_player ] . hand . hand [ [card.short_name for card in self.players[self.current_player ] . hand . hand ] . index ( card ) ] if card . color == \"Wild\" : pass elif self . top_card . color == \"Wild\" : if card . color != self . color : self . message = \"you can't place that card\" continue elif card . color == self . top_card . color : pass elif card . name == self . top_card . name : pass else : self . message = \"you can't place that card\" continue card = self . players [ self.current_player ] . hand . hand . pop ( self . players [ self.current_player ] . hand . hand . index ( card ) ) self . top_card = card self . deck . in_play . remove ( card ) self . deck . in_pile . append ( card ) add_cards = 0 skip_player = False reverse = False color = \"\" if self . top_card . name == \"Change\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () elif self . top_card . name == \"+4\" : self . color = \"\" while self . color not in [ \"Blue\", \"Green\", \"Red\", \"Yellow\" ] : cls () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () if self . message : print ( self . message ) print () self . message = \"\" print ( self . players [ self.current_player ] . name ) for card in self . players [ self.current_player ] . hand . hand : print ( card . format (), end = \" \" ) print () print () self . color = input ( \"choose a color;\\n> \" ). strip (). capitalize () add_cards = 4 skip_player = True elif self . top_card . name == \"+2\" : add_cards = 2 skip_player = True elif self . top_card . name == \"Skip\" : skip_player = True elif self . top_card . name == \"Reverse\" : reverse = True if reverse : self . clockwise = not self . clockwise if len ( self . players ) == 2 : # we don ' t want to change the player continue if self . clockwise : next_player = self . current_player + 1 else : next_player = self . current_player - 1 if next_player > ( len ( self . players ) - 1 ) : next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) if add_cards : for i in range ( add_cards ) : if self . deck . is_empty () : self . deck . flip () card = self . deck . deck . pop () self . players [ next_player ] . hand . hand . append ( card ) self . deck . in_play . append ( card ) if skip_player : if self . clockwise : next_player = self . current_player + 2 else : next_player = self . current_player - 2 if next_player > ( len ( self . players ) - 1 ) : next_player -= len ( self . players ) elif next_player < 0 : next_player += len ( self . players ) self . current_player = next_player winner = [ player for player in self.players if player.is_winner() ][ 0 ] cls () print () print ( \"\"\" {4} left in deck {0} {8} {3} {11} {5}{6}{7} {9} {1} {10} {2} \"\"\" . format ( * players , len ( self . deck . deck ), color , self . top_card . format (), colorama . Fore . RESET , * pointers ) ) print () print ( \"{0} wins!\" . format ( winner . name ))","title":"game"},{"location":"reference/quickpython/examples/uno/#start","text":"def start ( self ) calls self.game in a 'would you like to play again?' loop View Source def start ( self ): \"\"\" calls `self.game` in a 'would you like to play again?' loop \"\"\" choice = \"y\" while choice . startswith ( \"y\" ): cls () print ( pyfiglet . figlet_format ( \"Uno\" )) print () input ( \"enter to play\\nctrl + c to quit to main menu\\n\\n\" ) self . game () choice = input ( \"\\nwould you like to play again?\\n> \" ). strip ()","title":"start"},{"location":"reference/quickpython/examples/zigzag/","text":"Module quickpython.examples.zigzag Zigzag, by Al Sweigart al@inventwithpython.com A simple zig zag animation. Press Ctrl-C to stop. This and other games are available at https://nostarch.com/XX Tags: tiny, beginner, artistic, scrolling View Source \"\"\"Zigzag, by Al Sweigart al@inventwithpython.com A simple zig zag animation. Press Ctrl-C to stop. This and other games are available at https://nostarch.com/XX Tags: tiny, beginner, artistic, scrolling\"\"\" __version__ = 0 import sys import time if __name__ == \"__main__\" : print ( \"Zigzag, by Al Sweigart al@inventwithpython.com\" ) print ( \"Press Ctrl-C to quit.\" ) time . sleep ( 3 ) indentSize = 0 # How many spaces to indent. try : while True : # The main program loop. # Zig to the right 20 times: for i in range ( 20 ): indentSize = indentSize + 1 indentation = \" \" * indentSize print ( \" \" * indentSize + \"********\" ) time . sleep ( 0.05 ) # Pause for 50 milliseconds. # Zag to the left 20 times: for i in range ( 20 ): indentSize = indentSize - 1 indentation = \" \" * indentSize print ( indentation + \"********\" ) time . sleep ( 0.05 ) # Pause for 50 milliseconds. except KeyboardInterrupt : sys . exit () # When Ctrl-C is pressed, end the program.","title":"Zigzag"},{"location":"reference/quickpython/examples/zigzag/#module-quickpythonexampleszigzag","text":"Zigzag, by Al Sweigart al@inventwithpython.com A simple zig zag animation. Press Ctrl-C to stop. This and other games are available at https://nostarch.com/XX Tags: tiny, beginner, artistic, scrolling View Source \"\"\"Zigzag, by Al Sweigart al@inventwithpython.com A simple zig zag animation. Press Ctrl-C to stop. This and other games are available at https://nostarch.com/XX Tags: tiny, beginner, artistic, scrolling\"\"\" __version__ = 0 import sys import time if __name__ == \"__main__\" : print ( \"Zigzag, by Al Sweigart al@inventwithpython.com\" ) print ( \"Press Ctrl-C to quit.\" ) time . sleep ( 3 ) indentSize = 0 # How many spaces to indent. try : while True : # The main program loop. # Zig to the right 20 times: for i in range ( 20 ): indentSize = indentSize + 1 indentation = \" \" * indentSize print ( \" \" * indentSize + \"********\" ) time . sleep ( 0.05 ) # Pause for 50 milliseconds. # Zag to the left 20 times: for i in range ( 20 ): indentSize = indentSize - 1 indentation = \" \" * indentSize print ( indentation + \"********\" ) time . sleep ( 0.05 ) # Pause for 50 milliseconds. except KeyboardInterrupt : sys . exit () # When Ctrl-C is pressed, end the program.","title":"Module quickpython.examples.zigzag"}]}